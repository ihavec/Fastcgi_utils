// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/tvWall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobuf/tvWall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TvWall {

namespace {

const ::google::protobuf::Descriptor* Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Guid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Guid_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetInterface_reflection_ = NULL;
const ::google::protobuf::Descriptor* Network_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Network_reflection_ = NULL;
const ::google::protobuf::Descriptor* NVR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NVR_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMP_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Session_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Session_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Session_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Session_LoginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Session_LoginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Session_LoginMasterAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Session_LoginMasterAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Session_LoginMasterAck_Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Session_LoginMasterAck_Server_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Session_Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Session_Logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Session_LogoutAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Session_LogoutAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Session_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Session_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Session_PingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Session_PingAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Session_LogoutReasonType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_Screen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_Screen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_Camera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_Camera_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_Camera_CameraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_Camera_CameraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_Camera_RecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_Camera_RecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_CameraGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_CameraGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_LocalMovie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_LocalMovie_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_Flash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_Flash_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_View_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_View_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_ElementDat_View_ViewType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_FocusPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_FocusPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_HotPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_HotPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_ServerLayout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_ServerLayout_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_ServerLayoutLoop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_ServerLayoutLoop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementDat_GroupLoop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementDat_GroupLoop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementMaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementMaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementMaster_MasterLayout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementMaster_MasterLayout_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementMaster_MasterLayout_ServerPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementMaster_MasterLayout_ServerPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_ElementMaster_MasterLayout_MasLayout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_ElementMaster_MasterLayout_MasLayout_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ScreenSplitCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ScreenSplitCtrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ViewCtrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_VideoCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ViewCtrl_VideoCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_RecordCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ViewCtrl_RecordCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_FlashCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ViewCtrl_FlashCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_FlashCtrl_FlashCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_HTMLCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ViewCtrl_HTMLCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_HTMLCtrl_HTMLCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_LocalMovieCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ViewCtrl_LocalMovieCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_TextCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ViewCtrl_TextCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_TextCtrl_TextCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_MapCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ViewCtrl_MapCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_MapCtrl_MapCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_OthersCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_ViewCtrl_OthersCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_OthersCtrl_OthersCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_CameraCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_CameraCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_CameraCtrl_PTZ_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_HotPointCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_HotPointCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_HotPointCtrl_HotPointCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_LayoutCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_LayoutCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_LayoutCtrl_LayoutCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_LayoutLoopCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_LayoutLoopCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_CtrlMaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_CtrlMaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_CtrlMaster_CtrlMasterLyout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_CtrlMaster_CtrlMasterLyout_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_MachineCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_MachineCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_MachineCtrl_MachineCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_KeyCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_KeyCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_KeyCtrl_KeyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_KeyCmdCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_KeyCmdCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_KeyCmdCtrl_KeyCmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_KeyCmdCtrl_KeyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_AlarmCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_AlarmCtrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_SyncClockCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_SyncClockCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_SyncClockCtrl_SyncType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_TextContextCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_TextContextCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_TextContextCtrl_TextContextType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Ctrl_GroupLoopCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Ctrl_GroupLoopCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_RequireSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_RequireSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_RequireSession_ClientRequire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_RequireSession_ClientRequire_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_RequireSession_ClientRequireAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_RequireSession_ClientRequireAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_RequireSession_LocalMovieSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_RequireSession_LocalMovieSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_RequireSession_LocalMovieSessionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_RequireSession_LocalMovieSessionAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_RequireSession_LocalMovieSessionAck_MovieStat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_RequireSession_RecordRequire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_RequireSession_RecordRequire_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_RequireSession_RecordRequire_RecordRequireType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_RequireSession_RecordRequireAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_RequireSession_RecordRequireAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_RequireSession_NetRequire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_RequireSession_NetRequire_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_RequireSession_NetRequireAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_RequireSession_NetRequireAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_RequireSession_ClientRequireType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ScreenSpliStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ScreenSpliStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ViewStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_ViewGeomotryStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ViewStat_ViewGeomotryStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_VideoStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ViewStat_VideoStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_RecordStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ViewStat_RecordStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_LocalMovieStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ViewStat_LocalMovieStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_FlashStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ViewStat_FlashStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_FlashStat_FlashStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_HTMLStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ViewStat_HTMLStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_HTMLStat_HTMLStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_TextStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ViewStat_TextStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_TextStat_TextStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_MapStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ViewStat_MapStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_MapStat_MapCtrlType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_OthersStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ViewStat_OthersStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_CameraStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_CameraStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_CameraStat_PTZ_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_HotPointStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_HotPointStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_HotPointStat_HotPointStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_LayoutStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_LayoutStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_LayoutStat_LayoutStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_LayoutLoopStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_LayoutLoopStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_MapGrpStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_MapGrpStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_MapGrpStat_MapGrpStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ErrorStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_ErrorStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_KeyboardSelectedStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_KeyboardSelectedStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_AlarmStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_AlarmStat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_Stat_GroupLoopStat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_Stat_GroupLoopStat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_NoticeMaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_NoticeMaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Packet_Notice_NoticeMaster_NoticeMasterLyout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Packet_Notice_NoticeMaster_NoticeMasterLyout_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobuf_2ftvWall_2eproto() {
  protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobuf/tvWall.proto");
  GOOGLE_CHECK(file != NULL);
  Rect_descriptor_ = file->message_type(0);
  static const int Rect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, h_),
  };
  Rect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rect_descriptor_,
      Rect::default_instance_,
      Rect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rect));
  Point_descriptor_ = file->message_type(1);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  Guid_descriptor_ = file->message_type(2);
  static const int Guid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guid, data_),
  };
  Guid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Guid_descriptor_,
      Guid::default_instance_,
      Guid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Guid));
  NetInterface_descriptor_ = file->message_type(3);
  static const int NetInterface_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetInterface, ifname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetInterface, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetInterface, netmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetInterface, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetInterface, plug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetInterface, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetInterface, dhcp_),
  };
  NetInterface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetInterface_descriptor_,
      NetInterface::default_instance_,
      NetInterface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetInterface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetInterface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetInterface));
  Network_descriptor_ = file->message_type(4);
  static const int Network_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, gateway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, gateway6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, gwdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, nat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, dns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, interfaces_),
  };
  Network_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Network_descriptor_,
      Network::default_instance_,
      Network_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Network));
  NVR_descriptor_ = file->message_type(5);
  static const int NVR_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NVR, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NVR, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NVR, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NVR, connected_),
  };
  NVR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NVR_descriptor_,
      NVR::default_instance_,
      NVR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NVR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NVR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NVR));
  FMP_descriptor_ = file->message_type(6);
  static const int FMP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMP, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMP, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMP, password_),
  };
  FMP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMP_descriptor_,
      FMP::default_instance_,
      FMP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMP));
  Packet_descriptor_ = file->message_type(7);
  static const int Packet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, ctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, requiresession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, notice_),
  };
  Packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_descriptor_,
      Packet::default_instance_,
      Packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet));
  Packet_Session_descriptor_ = Packet_descriptor_->nested_type(0);
  static const int Packet_Session_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session, loginack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session, loginmstack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session, logout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session, logoutack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session, ping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session, pingack_),
  };
  Packet_Session_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Session_descriptor_,
      Packet_Session::default_instance_,
      Packet_Session_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Session));
  Packet_Session_Login_descriptor_ = Packet_Session_descriptor_->nested_type(0);
  static const int Packet_Session_Login_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Login, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Login, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Login, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Login, encryption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Login, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Login, ismaster_),
  };
  Packet_Session_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Session_Login_descriptor_,
      Packet_Session_Login::default_instance_,
      Packet_Session_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Session_Login));
  Packet_Session_LoginAck_descriptor_ = Packet_Session_descriptor_->nested_type(1);
  static const int Packet_Session_LoginAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginAck, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginAck, sessionid_),
  };
  Packet_Session_LoginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Session_LoginAck_descriptor_,
      Packet_Session_LoginAck::default_instance_,
      Packet_Session_LoginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Session_LoginAck));
  Packet_Session_LoginMasterAck_descriptor_ = Packet_Session_descriptor_->nested_type(2);
  static const int Packet_Session_LoginMasterAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck, loginack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck, ser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck, lyout_),
  };
  Packet_Session_LoginMasterAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Session_LoginMasterAck_descriptor_,
      Packet_Session_LoginMasterAck::default_instance_,
      Packet_Session_LoginMasterAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Session_LoginMasterAck));
  Packet_Session_LoginMasterAck_Server_descriptor_ = Packet_Session_LoginMasterAck_descriptor_->nested_type(0);
  static const int Packet_Session_LoginMasterAck_Server_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck_Server, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck_Server, login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck_Server, servername_),
  };
  Packet_Session_LoginMasterAck_Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Session_LoginMasterAck_Server_descriptor_,
      Packet_Session_LoginMasterAck_Server::default_instance_,
      Packet_Session_LoginMasterAck_Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck_Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LoginMasterAck_Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Session_LoginMasterAck_Server));
  Packet_Session_Logout_descriptor_ = Packet_Session_descriptor_->nested_type(3);
  static const int Packet_Session_Logout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Logout, reason_),
  };
  Packet_Session_Logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Session_Logout_descriptor_,
      Packet_Session_Logout::default_instance_,
      Packet_Session_Logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Session_Logout));
  Packet_Session_LogoutAck_descriptor_ = Packet_Session_descriptor_->nested_type(4);
  static const int Packet_Session_LogoutAck_offsets_[1] = {
  };
  Packet_Session_LogoutAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Session_LogoutAck_descriptor_,
      Packet_Session_LogoutAck::default_instance_,
      Packet_Session_LogoutAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LogoutAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_LogoutAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Session_LogoutAck));
  Packet_Session_Ping_descriptor_ = Packet_Session_descriptor_->nested_type(5);
  static const int Packet_Session_Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Ping, num_),
  };
  Packet_Session_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Session_Ping_descriptor_,
      Packet_Session_Ping::default_instance_,
      Packet_Session_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Session_Ping));
  Packet_Session_PingAck_descriptor_ = Packet_Session_descriptor_->nested_type(6);
  static const int Packet_Session_PingAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_PingAck, num_),
  };
  Packet_Session_PingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Session_PingAck_descriptor_,
      Packet_Session_PingAck::default_instance_,
      Packet_Session_PingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_PingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Session_PingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Session_PingAck));
  Packet_Session_LogoutReasonType_descriptor_ = Packet_Session_descriptor_->enum_type(0);
  Packet_ElementDat_descriptor_ = Packet_descriptor_->nested_type(1);
  static const int Packet_ElementDat_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, camgrp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, hotpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, localmovie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, flash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, servlayout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, currentlayout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, servlayoutloop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, currentlayoutloop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, nvrlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, grouploop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, maxplaybackrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, fmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, tvwallindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, anoleversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, sn_),
  };
  Packet_ElementDat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_descriptor_,
      Packet_ElementDat::default_instance_,
      Packet_ElementDat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat));
  Packet_ElementDat_Screen_descriptor_ = Packet_ElementDat_descriptor_->nested_type(0);
  static const int Packet_ElementDat_Screen_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Screen, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Screen, screenindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Screen, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Screen, col_),
  };
  Packet_ElementDat_Screen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_Screen_descriptor_,
      Packet_ElementDat_Screen::default_instance_,
      Packet_ElementDat_Screen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Screen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Screen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_Screen));
  Packet_ElementDat_Camera_descriptor_ = Packet_ElementDat_descriptor_->nested_type(1);
  static const int Packet_ElementDat_Camera_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera, camerainfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera, recordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera, isplaying_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera, isconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera, isplayback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera, parentid_),
  };
  Packet_ElementDat_Camera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_Camera_descriptor_,
      Packet_ElementDat_Camera::default_instance_,
      Packet_ElementDat_Camera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_Camera));
  Packet_ElementDat_Camera_CameraInfo_descriptor_ = Packet_ElementDat_Camera_descriptor_->nested_type(0);
  static const int Packet_ElementDat_Camera_CameraInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_CameraInfo, cameraip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_CameraInfo, cameraport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_CameraInfo, cameraname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_CameraInfo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_CameraInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_CameraInfo, canptz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_CameraInfo, composite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_CameraInfo, model_),
  };
  Packet_ElementDat_Camera_CameraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_Camera_CameraInfo_descriptor_,
      Packet_ElementDat_Camera_CameraInfo::default_instance_,
      Packet_ElementDat_Camera_CameraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_CameraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_CameraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_Camera_CameraInfo));
  Packet_ElementDat_Camera_RecordInfo_descriptor_ = Packet_ElementDat_Camera_descriptor_->nested_type(1);
  static const int Packet_ElementDat_Camera_RecordInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_RecordInfo, begin_),
  };
  Packet_ElementDat_Camera_RecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_Camera_RecordInfo_descriptor_,
      Packet_ElementDat_Camera_RecordInfo::default_instance_,
      Packet_ElementDat_Camera_RecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_RecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Camera_RecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_Camera_RecordInfo));
  Packet_ElementDat_CameraGrp_descriptor_ = Packet_ElementDat_descriptor_->nested_type(2);
  static const int Packet_ElementDat_CameraGrp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_CameraGrp, grpname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_CameraGrp, cam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_CameraGrp, camgrp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_CameraGrp, grpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_CameraGrp, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_CameraGrp, parentid_),
  };
  Packet_ElementDat_CameraGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_CameraGrp_descriptor_,
      Packet_ElementDat_CameraGrp::default_instance_,
      Packet_ElementDat_CameraGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_CameraGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_CameraGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_CameraGrp));
  Packet_ElementDat_LocalMovie_descriptor_ = Packet_ElementDat_descriptor_->nested_type(3);
  static const int Packet_ElementDat_LocalMovie_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_LocalMovie, filename_),
  };
  Packet_ElementDat_LocalMovie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_LocalMovie_descriptor_,
      Packet_ElementDat_LocalMovie::default_instance_,
      Packet_ElementDat_LocalMovie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_LocalMovie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_LocalMovie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_LocalMovie));
  Packet_ElementDat_Flash_descriptor_ = Packet_ElementDat_descriptor_->nested_type(4);
  static const int Packet_ElementDat_Flash_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Flash, url_),
  };
  Packet_ElementDat_Flash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_Flash_descriptor_,
      Packet_ElementDat_Flash::default_instance_,
      Packet_ElementDat_Flash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Flash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Flash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_Flash));
  Packet_ElementDat_View_descriptor_ = Packet_ElementDat_descriptor_->nested_type(5);
  static const int Packet_ElementDat_View_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, viewtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, keepstretch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, borderwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, showtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, pollinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, gpuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, showfullscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, windowstack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, isalarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, alarminterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, showmaxfullscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, showminfullscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, fullscreenrect_),
  };
  Packet_ElementDat_View_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_View_descriptor_,
      Packet_ElementDat_View::default_instance_,
      Packet_ElementDat_View_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_View, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_View));
  Packet_ElementDat_View_ViewType_descriptor_ = Packet_ElementDat_View_descriptor_->enum_type(0);
  Packet_ElementDat_FocusPoint_descriptor_ = Packet_ElementDat_descriptor_->nested_type(6);
  static const int Packet_ElementDat_FocusPoint_offsets_[1] = {
  };
  Packet_ElementDat_FocusPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_FocusPoint_descriptor_,
      Packet_ElementDat_FocusPoint::default_instance_,
      Packet_ElementDat_FocusPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_FocusPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_FocusPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_FocusPoint));
  Packet_ElementDat_HotPoint_descriptor_ = Packet_ElementDat_descriptor_->nested_type(7);
  static const int Packet_ElementDat_HotPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_HotPoint, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_HotPoint, screenindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_HotPoint, limitedmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_HotPoint, limitedrecord_),
  };
  Packet_ElementDat_HotPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_HotPoint_descriptor_,
      Packet_ElementDat_HotPoint::default_instance_,
      Packet_ElementDat_HotPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_HotPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_HotPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_HotPoint));
  Packet_ElementDat_ServerLayout_descriptor_ = Packet_ElementDat_descriptor_->nested_type(8);
  static const int Packet_ElementDat_ServerLayout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_ServerLayout, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_ServerLayout, layoutdat_),
  };
  Packet_ElementDat_ServerLayout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_ServerLayout_descriptor_,
      Packet_ElementDat_ServerLayout::default_instance_,
      Packet_ElementDat_ServerLayout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_ServerLayout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_ServerLayout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_ServerLayout));
  Packet_ElementDat_ServerLayoutLoop_descriptor_ = Packet_ElementDat_descriptor_->nested_type(9);
  static const int Packet_ElementDat_ServerLayoutLoop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_ServerLayoutLoop, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_ServerLayoutLoop, pollinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_ServerLayoutLoop, layoutname_),
  };
  Packet_ElementDat_ServerLayoutLoop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_ServerLayoutLoop_descriptor_,
      Packet_ElementDat_ServerLayoutLoop::default_instance_,
      Packet_ElementDat_ServerLayoutLoop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_ServerLayoutLoop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_ServerLayoutLoop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_ServerLayoutLoop));
  Packet_ElementDat_Map_descriptor_ = Packet_ElementDat_descriptor_->nested_type(10);
  static const int Packet_ElementDat_Map_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Map, mapurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Map, map_),
  };
  Packet_ElementDat_Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_Map_descriptor_,
      Packet_ElementDat_Map::default_instance_,
      Packet_ElementDat_Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_Map));
  Packet_ElementDat_GroupLoop_descriptor_ = Packet_ElementDat_descriptor_->nested_type(11);
  static const int Packet_ElementDat_GroupLoop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_GroupLoop, views_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_GroupLoop, pollinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_GroupLoop, ison_),
  };
  Packet_ElementDat_GroupLoop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementDat_GroupLoop_descriptor_,
      Packet_ElementDat_GroupLoop::default_instance_,
      Packet_ElementDat_GroupLoop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_GroupLoop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementDat_GroupLoop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementDat_GroupLoop));
  Packet_ElementMaster_descriptor_ = Packet_descriptor_->nested_type(2);
  static const int Packet_ElementMaster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster, ser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster, masterlyout_),
  };
  Packet_ElementMaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementMaster_descriptor_,
      Packet_ElementMaster::default_instance_,
      Packet_ElementMaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementMaster));
  Packet_ElementMaster_MasterLayout_descriptor_ = Packet_ElementMaster_descriptor_->nested_type(0);
  static const int Packet_ElementMaster_MasterLayout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout, masterlayout_),
  };
  Packet_ElementMaster_MasterLayout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementMaster_MasterLayout_descriptor_,
      Packet_ElementMaster_MasterLayout::default_instance_,
      Packet_ElementMaster_MasterLayout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementMaster_MasterLayout));
  Packet_ElementMaster_MasterLayout_ServerPos_descriptor_ = Packet_ElementMaster_MasterLayout_descriptor_->nested_type(0);
  static const int Packet_ElementMaster_MasterLayout_ServerPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout_ServerPos, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout_ServerPos, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout_ServerPos, point_),
  };
  Packet_ElementMaster_MasterLayout_ServerPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementMaster_MasterLayout_ServerPos_descriptor_,
      Packet_ElementMaster_MasterLayout_ServerPos::default_instance_,
      Packet_ElementMaster_MasterLayout_ServerPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout_ServerPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout_ServerPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementMaster_MasterLayout_ServerPos));
  Packet_ElementMaster_MasterLayout_MasLayout_descriptor_ = Packet_ElementMaster_MasterLayout_descriptor_->nested_type(1);
  static const int Packet_ElementMaster_MasterLayout_MasLayout_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout_MasLayout, lyoutname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout_MasLayout, sp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout_MasLayout, serverln_),
  };
  Packet_ElementMaster_MasterLayout_MasLayout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_ElementMaster_MasterLayout_MasLayout_descriptor_,
      Packet_ElementMaster_MasterLayout_MasLayout::default_instance_,
      Packet_ElementMaster_MasterLayout_MasLayout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout_MasLayout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_ElementMaster_MasterLayout_MasLayout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_ElementMaster_MasterLayout_MasLayout));
  Packet_Ctrl_descriptor_ = Packet_descriptor_->nested_type(3);
  static const int Packet_Ctrl_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, viewctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, cameractrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, hotpointctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, lyoutctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, masterctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, screenctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, lyoutloopctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, machinectrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, keyctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, keycmdctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, alarmctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, syncctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, txtcontextctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, grouploopctrl_),
  };
  Packet_Ctrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_descriptor_,
      Packet_Ctrl::default_instance_,
      Packet_Ctrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl));
  Packet_Ctrl_ScreenSplitCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(0);
  static const int Packet_Ctrl_ScreenSplitCtrl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ScreenSplitCtrl, screenindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ScreenSplitCtrl, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ScreenSplitCtrl, col_),
  };
  Packet_Ctrl_ScreenSplitCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ScreenSplitCtrl_descriptor_,
      Packet_Ctrl_ScreenSplitCtrl::default_instance_,
      Packet_Ctrl_ScreenSplitCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ScreenSplitCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ScreenSplitCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ScreenSplitCtrl));
  Packet_Ctrl_ViewCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(1);
  static const int Packet_Ctrl_ViewCtrl_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, videoctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, flashctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, htmlctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, textctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, othersctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, localmovie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, viewgeomotryctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, mapctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, recordctrl_),
  };
  Packet_Ctrl_ViewCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ViewCtrl_descriptor_,
      Packet_Ctrl_ViewCtrl::default_instance_,
      Packet_Ctrl_ViewCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ViewCtrl));
  Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_descriptor_ = Packet_Ctrl_ViewCtrl_descriptor_->nested_type(0);
  static const int Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl, view_),
  };
  Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_descriptor_,
      Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::default_instance_,
      Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl));
  Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType_descriptor_ = Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_ViewCtrl_VideoCtrl_descriptor_ = Packet_Ctrl_ViewCtrl_descriptor_->nested_type(1);
  static const int Packet_Ctrl_ViewCtrl_VideoCtrl_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_VideoCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_VideoCtrl, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_VideoCtrl, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_VideoCtrl, pollinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_VideoCtrl, keepstretch_),
  };
  Packet_Ctrl_ViewCtrl_VideoCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ViewCtrl_VideoCtrl_descriptor_,
      Packet_Ctrl_ViewCtrl_VideoCtrl::default_instance_,
      Packet_Ctrl_ViewCtrl_VideoCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_VideoCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_VideoCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ViewCtrl_VideoCtrl));
  Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType_descriptor_ = Packet_Ctrl_ViewCtrl_VideoCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_ViewCtrl_RecordCtrl_descriptor_ = Packet_Ctrl_ViewCtrl_descriptor_->nested_type(2);
  static const int Packet_Ctrl_ViewCtrl_RecordCtrl_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_RecordCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_RecordCtrl, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_RecordCtrl, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_RecordCtrl, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_RecordCtrl, keepstretch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_RecordCtrl, rate_),
  };
  Packet_Ctrl_ViewCtrl_RecordCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ViewCtrl_RecordCtrl_descriptor_,
      Packet_Ctrl_ViewCtrl_RecordCtrl::default_instance_,
      Packet_Ctrl_ViewCtrl_RecordCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_RecordCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_RecordCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ViewCtrl_RecordCtrl));
  Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType_descriptor_ = Packet_Ctrl_ViewCtrl_RecordCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_ViewCtrl_FlashCtrl_descriptor_ = Packet_Ctrl_ViewCtrl_descriptor_->nested_type(3);
  static const int Packet_Ctrl_ViewCtrl_FlashCtrl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_FlashCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_FlashCtrl, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_FlashCtrl, url_),
  };
  Packet_Ctrl_ViewCtrl_FlashCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ViewCtrl_FlashCtrl_descriptor_,
      Packet_Ctrl_ViewCtrl_FlashCtrl::default_instance_,
      Packet_Ctrl_ViewCtrl_FlashCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_FlashCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_FlashCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ViewCtrl_FlashCtrl));
  Packet_Ctrl_ViewCtrl_FlashCtrl_FlashCtrlType_descriptor_ = Packet_Ctrl_ViewCtrl_FlashCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_ViewCtrl_HTMLCtrl_descriptor_ = Packet_Ctrl_ViewCtrl_descriptor_->nested_type(4);
  static const int Packet_Ctrl_ViewCtrl_HTMLCtrl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_HTMLCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_HTMLCtrl, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_HTMLCtrl, url_),
  };
  Packet_Ctrl_ViewCtrl_HTMLCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ViewCtrl_HTMLCtrl_descriptor_,
      Packet_Ctrl_ViewCtrl_HTMLCtrl::default_instance_,
      Packet_Ctrl_ViewCtrl_HTMLCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_HTMLCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_HTMLCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ViewCtrl_HTMLCtrl));
  Packet_Ctrl_ViewCtrl_HTMLCtrl_HTMLCtrlType_descriptor_ = Packet_Ctrl_ViewCtrl_HTMLCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_ViewCtrl_LocalMovieCtrl_descriptor_ = Packet_Ctrl_ViewCtrl_descriptor_->nested_type(5);
  static const int Packet_Ctrl_ViewCtrl_LocalMovieCtrl_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_LocalMovieCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_LocalMovieCtrl, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_LocalMovieCtrl, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_LocalMovieCtrl, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_LocalMovieCtrl, timestamp_),
  };
  Packet_Ctrl_ViewCtrl_LocalMovieCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ViewCtrl_LocalMovieCtrl_descriptor_,
      Packet_Ctrl_ViewCtrl_LocalMovieCtrl::default_instance_,
      Packet_Ctrl_ViewCtrl_LocalMovieCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_LocalMovieCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_LocalMovieCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ViewCtrl_LocalMovieCtrl));
  Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType_descriptor_ = Packet_Ctrl_ViewCtrl_LocalMovieCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_ViewCtrl_TextCtrl_descriptor_ = Packet_Ctrl_ViewCtrl_descriptor_->nested_type(6);
  static const int Packet_Ctrl_ViewCtrl_TextCtrl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_TextCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_TextCtrl, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_TextCtrl, text_),
  };
  Packet_Ctrl_ViewCtrl_TextCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ViewCtrl_TextCtrl_descriptor_,
      Packet_Ctrl_ViewCtrl_TextCtrl::default_instance_,
      Packet_Ctrl_ViewCtrl_TextCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_TextCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_TextCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ViewCtrl_TextCtrl));
  Packet_Ctrl_ViewCtrl_TextCtrl_TextCtrlType_descriptor_ = Packet_Ctrl_ViewCtrl_TextCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_ViewCtrl_MapCtrl_descriptor_ = Packet_Ctrl_ViewCtrl_descriptor_->nested_type(7);
  static const int Packet_Ctrl_ViewCtrl_MapCtrl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_MapCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_MapCtrl, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_MapCtrl, url_),
  };
  Packet_Ctrl_ViewCtrl_MapCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ViewCtrl_MapCtrl_descriptor_,
      Packet_Ctrl_ViewCtrl_MapCtrl::default_instance_,
      Packet_Ctrl_ViewCtrl_MapCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_MapCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_MapCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ViewCtrl_MapCtrl));
  Packet_Ctrl_ViewCtrl_MapCtrl_MapCtrlType_descriptor_ = Packet_Ctrl_ViewCtrl_MapCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_ViewCtrl_OthersCtrl_descriptor_ = Packet_Ctrl_ViewCtrl_descriptor_->nested_type(8);
  static const int Packet_Ctrl_ViewCtrl_OthersCtrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_OthersCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_OthersCtrl, winid_),
  };
  Packet_Ctrl_ViewCtrl_OthersCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_ViewCtrl_OthersCtrl_descriptor_,
      Packet_Ctrl_ViewCtrl_OthersCtrl::default_instance_,
      Packet_Ctrl_ViewCtrl_OthersCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_OthersCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_ViewCtrl_OthersCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_ViewCtrl_OthersCtrl));
  Packet_Ctrl_ViewCtrl_OthersCtrl_OthersCtrlType_descriptor_ = Packet_Ctrl_ViewCtrl_OthersCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_CameraCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(2);
  static const int Packet_Ctrl_CameraCtrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CameraCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CameraCtrl, cameraid_),
  };
  Packet_Ctrl_CameraCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_CameraCtrl_descriptor_,
      Packet_Ctrl_CameraCtrl::default_instance_,
      Packet_Ctrl_CameraCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CameraCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CameraCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_CameraCtrl));
  Packet_Ctrl_CameraCtrl_PTZ_TYPE_descriptor_ = Packet_Ctrl_CameraCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_HotPointCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(3);
  static const int Packet_Ctrl_HotPointCtrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_HotPointCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_HotPointCtrl, hotpoint_),
  };
  Packet_Ctrl_HotPointCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_HotPointCtrl_descriptor_,
      Packet_Ctrl_HotPointCtrl::default_instance_,
      Packet_Ctrl_HotPointCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_HotPointCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_HotPointCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_HotPointCtrl));
  Packet_Ctrl_HotPointCtrl_HotPointCtrlType_descriptor_ = Packet_Ctrl_HotPointCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_LayoutCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(4);
  static const int Packet_Ctrl_LayoutCtrl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutCtrl, lyoutname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutCtrl, isalarm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutCtrl, alarminterval_),
  };
  Packet_Ctrl_LayoutCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_LayoutCtrl_descriptor_,
      Packet_Ctrl_LayoutCtrl::default_instance_,
      Packet_Ctrl_LayoutCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_LayoutCtrl));
  Packet_Ctrl_LayoutCtrl_LayoutCtrlType_descriptor_ = Packet_Ctrl_LayoutCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_LayoutLoopCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(5);
  static const int Packet_Ctrl_LayoutLoopCtrl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutLoopCtrl, lyoutloopname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutLoopCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutLoopCtrl, layoutname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutLoopCtrl, loop_),
  };
  Packet_Ctrl_LayoutLoopCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_LayoutLoopCtrl_descriptor_,
      Packet_Ctrl_LayoutLoopCtrl::default_instance_,
      Packet_Ctrl_LayoutLoopCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutLoopCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_LayoutLoopCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_LayoutLoopCtrl));
  Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType_descriptor_ = Packet_Ctrl_LayoutLoopCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_CtrlMaster_descriptor_ = Packet_Ctrl_descriptor_->nested_type(6);
  static const int Packet_Ctrl_CtrlMaster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CtrlMaster, ctrllyout_),
  };
  Packet_Ctrl_CtrlMaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_CtrlMaster_descriptor_,
      Packet_Ctrl_CtrlMaster::default_instance_,
      Packet_Ctrl_CtrlMaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CtrlMaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CtrlMaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_CtrlMaster));
  Packet_Ctrl_CtrlMaster_CtrlMasterLyout_descriptor_ = Packet_Ctrl_CtrlMaster_descriptor_->nested_type(0);
  static const int Packet_Ctrl_CtrlMaster_CtrlMasterLyout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CtrlMaster_CtrlMasterLyout, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CtrlMaster_CtrlMasterLyout, masterlayout_),
  };
  Packet_Ctrl_CtrlMaster_CtrlMasterLyout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_CtrlMaster_CtrlMasterLyout_descriptor_,
      Packet_Ctrl_CtrlMaster_CtrlMasterLyout::default_instance_,
      Packet_Ctrl_CtrlMaster_CtrlMasterLyout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CtrlMaster_CtrlMasterLyout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_CtrlMaster_CtrlMasterLyout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_CtrlMaster_CtrlMasterLyout));
  Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType_descriptor_ = Packet_Ctrl_CtrlMaster_CtrlMasterLyout_descriptor_->enum_type(0);
  Packet_Ctrl_MachineCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(7);
  static const int Packet_Ctrl_MachineCtrl_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_MachineCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_MachineCtrl, screenmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_MachineCtrl, netinterface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_MachineCtrl, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_MachineCtrl, nvr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_MachineCtrl, fmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_MachineCtrl, tvwallindex_),
  };
  Packet_Ctrl_MachineCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_MachineCtrl_descriptor_,
      Packet_Ctrl_MachineCtrl::default_instance_,
      Packet_Ctrl_MachineCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_MachineCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_MachineCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_MachineCtrl));
  Packet_Ctrl_MachineCtrl_MachineCtrlType_descriptor_ = Packet_Ctrl_MachineCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_KeyCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(8);
  static const int Packet_Ctrl_KeyCtrl_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCtrl, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCtrl, modifiers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCtrl, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCtrl, autorepeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCtrl, count_),
  };
  Packet_Ctrl_KeyCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_KeyCtrl_descriptor_,
      Packet_Ctrl_KeyCtrl::default_instance_,
      Packet_Ctrl_KeyCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_KeyCtrl));
  Packet_Ctrl_KeyCtrl_KeyType_descriptor_ = Packet_Ctrl_KeyCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_KeyCmdCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(9);
  static const int Packet_Ctrl_KeyCmdCtrl_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCmdCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCmdCtrl, screenidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCmdCtrl, camposidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCmdCtrl, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCmdCtrl, keytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCmdCtrl, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCmdCtrl, cam_guid_),
  };
  Packet_Ctrl_KeyCmdCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_KeyCmdCtrl_descriptor_,
      Packet_Ctrl_KeyCmdCtrl::default_instance_,
      Packet_Ctrl_KeyCmdCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCmdCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_KeyCmdCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_KeyCmdCtrl));
  Packet_Ctrl_KeyCmdCtrl_KeyCmdType_descriptor_ = Packet_Ctrl_KeyCmdCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_KeyCmdCtrl_KeyType_descriptor_ = Packet_Ctrl_KeyCmdCtrl_descriptor_->enum_type(1);
  Packet_Ctrl_AlarmCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(10);
  static const int Packet_Ctrl_AlarmCtrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_AlarmCtrl, alarmsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_AlarmCtrl, alarmclear_),
  };
  Packet_Ctrl_AlarmCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_AlarmCtrl_descriptor_,
      Packet_Ctrl_AlarmCtrl::default_instance_,
      Packet_Ctrl_AlarmCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_AlarmCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_AlarmCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_AlarmCtrl));
  Packet_Ctrl_SyncClockCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(11);
  static const int Packet_Ctrl_SyncClockCtrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_SyncClockCtrl, clock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_SyncClockCtrl, type_),
  };
  Packet_Ctrl_SyncClockCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_SyncClockCtrl_descriptor_,
      Packet_Ctrl_SyncClockCtrl::default_instance_,
      Packet_Ctrl_SyncClockCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_SyncClockCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_SyncClockCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_SyncClockCtrl));
  Packet_Ctrl_SyncClockCtrl_SyncType_descriptor_ = Packet_Ctrl_SyncClockCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_TextContextCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(12);
  static const int Packet_Ctrl_TextContextCtrl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_TextContextCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_TextContextCtrl, oldtext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_TextContextCtrl, newtext_),
  };
  Packet_Ctrl_TextContextCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_TextContextCtrl_descriptor_,
      Packet_Ctrl_TextContextCtrl::default_instance_,
      Packet_Ctrl_TextContextCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_TextContextCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_TextContextCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_TextContextCtrl));
  Packet_Ctrl_TextContextCtrl_TextContextType_descriptor_ = Packet_Ctrl_TextContextCtrl_descriptor_->enum_type(0);
  Packet_Ctrl_GroupLoopCtrl_descriptor_ = Packet_Ctrl_descriptor_->nested_type(13);
  static const int Packet_Ctrl_GroupLoopCtrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_GroupLoopCtrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_GroupLoopCtrl, grouploop_),
  };
  Packet_Ctrl_GroupLoopCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Ctrl_GroupLoopCtrl_descriptor_,
      Packet_Ctrl_GroupLoopCtrl::default_instance_,
      Packet_Ctrl_GroupLoopCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_GroupLoopCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Ctrl_GroupLoopCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Ctrl_GroupLoopCtrl));
  Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType_descriptor_ = Packet_Ctrl_GroupLoopCtrl_descriptor_->enum_type(0);
  Packet_RequireSession_descriptor_ = Packet_descriptor_->nested_type(4);
  static const int Packet_RequireSession_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession, clientrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession, clientrequireack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession, lms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession, lmsack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession, recordrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession, recordrequireack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession, netrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession, netrequireack_),
  };
  Packet_RequireSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_RequireSession_descriptor_,
      Packet_RequireSession::default_instance_,
      Packet_RequireSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_RequireSession));
  Packet_RequireSession_ClientRequire_descriptor_ = Packet_RequireSession_descriptor_->nested_type(0);
  static const int Packet_RequireSession_ClientRequire_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_ClientRequire, type_),
  };
  Packet_RequireSession_ClientRequire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_RequireSession_ClientRequire_descriptor_,
      Packet_RequireSession_ClientRequire::default_instance_,
      Packet_RequireSession_ClientRequire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_ClientRequire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_ClientRequire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_RequireSession_ClientRequire));
  Packet_RequireSession_ClientRequireAck_descriptor_ = Packet_RequireSession_descriptor_->nested_type(1);
  static const int Packet_RequireSession_ClientRequireAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_ClientRequireAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_ClientRequireAck, elementdata_),
  };
  Packet_RequireSession_ClientRequireAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_RequireSession_ClientRequireAck_descriptor_,
      Packet_RequireSession_ClientRequireAck::default_instance_,
      Packet_RequireSession_ClientRequireAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_ClientRequireAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_ClientRequireAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_RequireSession_ClientRequireAck));
  Packet_RequireSession_LocalMovieSession_descriptor_ = Packet_RequireSession_descriptor_->nested_type(2);
  static const int Packet_RequireSession_LocalMovieSession_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSession, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSession, needalwaysack_),
  };
  Packet_RequireSession_LocalMovieSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_RequireSession_LocalMovieSession_descriptor_,
      Packet_RequireSession_LocalMovieSession::default_instance_,
      Packet_RequireSession_LocalMovieSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_RequireSession_LocalMovieSession));
  Packet_RequireSession_LocalMovieSessionAck_descriptor_ = Packet_RequireSession_descriptor_->nested_type(3);
  static const int Packet_RequireSession_LocalMovieSessionAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSessionAck, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSessionAck, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSessionAck, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSessionAck, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSessionAck, moviestat_),
  };
  Packet_RequireSession_LocalMovieSessionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_RequireSession_LocalMovieSessionAck_descriptor_,
      Packet_RequireSession_LocalMovieSessionAck::default_instance_,
      Packet_RequireSession_LocalMovieSessionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSessionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_LocalMovieSessionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_RequireSession_LocalMovieSessionAck));
  Packet_RequireSession_LocalMovieSessionAck_MovieStat_descriptor_ = Packet_RequireSession_LocalMovieSessionAck_descriptor_->enum_type(0);
  Packet_RequireSession_RecordRequire_descriptor_ = Packet_RequireSession_descriptor_->nested_type(4);
  static const int Packet_RequireSession_RecordRequire_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequire, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequire, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequire, cameraid_),
  };
  Packet_RequireSession_RecordRequire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_RequireSession_RecordRequire_descriptor_,
      Packet_RequireSession_RecordRequire::default_instance_,
      Packet_RequireSession_RecordRequire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_RequireSession_RecordRequire));
  Packet_RequireSession_RecordRequire_RecordRequireType_descriptor_ = Packet_RequireSession_RecordRequire_descriptor_->enum_type(0);
  Packet_RequireSession_RecordRequireAck_descriptor_ = Packet_RequireSession_descriptor_->nested_type(5);
  static const int Packet_RequireSession_RecordRequireAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequireAck, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequireAck, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequireAck, currenttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequireAck, vary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequireAck, ispause_),
  };
  Packet_RequireSession_RecordRequireAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_RequireSession_RecordRequireAck_descriptor_,
      Packet_RequireSession_RecordRequireAck::default_instance_,
      Packet_RequireSession_RecordRequireAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequireAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_RecordRequireAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_RequireSession_RecordRequireAck));
  Packet_RequireSession_NetRequire_descriptor_ = Packet_RequireSession_descriptor_->nested_type(6);
  static const int Packet_RequireSession_NetRequire_offsets_[1] = {
  };
  Packet_RequireSession_NetRequire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_RequireSession_NetRequire_descriptor_,
      Packet_RequireSession_NetRequire::default_instance_,
      Packet_RequireSession_NetRequire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_NetRequire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_NetRequire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_RequireSession_NetRequire));
  Packet_RequireSession_NetRequireAck_descriptor_ = Packet_RequireSession_descriptor_->nested_type(7);
  static const int Packet_RequireSession_NetRequireAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_NetRequireAck, net_),
  };
  Packet_RequireSession_NetRequireAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_RequireSession_NetRequireAck_descriptor_,
      Packet_RequireSession_NetRequireAck::default_instance_,
      Packet_RequireSession_NetRequireAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_NetRequireAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_RequireSession_NetRequireAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_RequireSession_NetRequireAck));
  Packet_RequireSession_ClientRequireType_descriptor_ = Packet_RequireSession_descriptor_->enum_type(0);
  Packet_Notice_descriptor_ = Packet_descriptor_->nested_type(5);
  static const int Packet_Notice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice, screeninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice, statinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice, cameragrpinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice, masterstat_),
  };
  Packet_Notice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_descriptor_,
      Packet_Notice::default_instance_,
      Packet_Notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice));
  Packet_Notice_Stat_descriptor_ = Packet_Notice_descriptor_->nested_type(0);
  static const int Packet_Notice_Stat_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, viewstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, camerastat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, hotpointstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, lyoutstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, screenstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, mapgrpstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, lyoutloopstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, errstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, keyboardselectedstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, alarmstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, grouploopstat_),
  };
  Packet_Notice_Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_descriptor_,
      Packet_Notice_Stat::default_instance_,
      Packet_Notice_Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat));
  Packet_Notice_Stat_ScreenSpliStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(0);
  static const int Packet_Notice_Stat_ScreenSpliStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ScreenSpliStat, screenindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ScreenSpliStat, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ScreenSpliStat, col_),
  };
  Packet_Notice_Stat_ScreenSpliStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ScreenSpliStat_descriptor_,
      Packet_Notice_Stat_ScreenSpliStat::default_instance_,
      Packet_Notice_Stat_ScreenSpliStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ScreenSpliStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ScreenSpliStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ScreenSpliStat));
  Packet_Notice_Stat_ViewStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(1);
  static const int Packet_Notice_Stat_ViewStat_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, videostat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, flashstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, htmlstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, textstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, othersstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, localmoviestat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, viewgeomotrystat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, recordstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, mapstat_),
  };
  Packet_Notice_Stat_ViewStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ViewStat_descriptor_,
      Packet_Notice_Stat_ViewStat::default_instance_,
      Packet_Notice_Stat_ViewStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ViewStat));
  Packet_Notice_Stat_ViewStat_ViewGeomotryStat_descriptor_ = Packet_Notice_Stat_ViewStat_descriptor_->nested_type(0);
  static const int Packet_Notice_Stat_ViewStat_ViewGeomotryStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_ViewGeomotryStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_ViewGeomotryStat, view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_ViewGeomotryStat, url_),
  };
  Packet_Notice_Stat_ViewStat_ViewGeomotryStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ViewStat_ViewGeomotryStat_descriptor_,
      Packet_Notice_Stat_ViewStat_ViewGeomotryStat::default_instance_,
      Packet_Notice_Stat_ViewStat_ViewGeomotryStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_ViewGeomotryStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_ViewGeomotryStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ViewStat_ViewGeomotryStat));
  Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType_descriptor_ = Packet_Notice_Stat_ViewStat_ViewGeomotryStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_ViewStat_VideoStat_descriptor_ = Packet_Notice_Stat_ViewStat_descriptor_->nested_type(1);
  static const int Packet_Notice_Stat_ViewStat_VideoStat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_VideoStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_VideoStat, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_VideoStat, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_VideoStat, pollinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_VideoStat, keepstretch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_VideoStat, cameraiddy_),
  };
  Packet_Notice_Stat_ViewStat_VideoStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ViewStat_VideoStat_descriptor_,
      Packet_Notice_Stat_ViewStat_VideoStat::default_instance_,
      Packet_Notice_Stat_ViewStat_VideoStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_VideoStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_VideoStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ViewStat_VideoStat));
  Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType_descriptor_ = Packet_Notice_Stat_ViewStat_VideoStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_ViewStat_RecordStat_descriptor_ = Packet_Notice_Stat_ViewStat_descriptor_->nested_type(2);
  static const int Packet_Notice_Stat_ViewStat_RecordStat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_RecordStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_RecordStat, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_RecordStat, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_RecordStat, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_RecordStat, keepstretch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_RecordStat, rate_),
  };
  Packet_Notice_Stat_ViewStat_RecordStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ViewStat_RecordStat_descriptor_,
      Packet_Notice_Stat_ViewStat_RecordStat::default_instance_,
      Packet_Notice_Stat_ViewStat_RecordStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_RecordStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_RecordStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ViewStat_RecordStat));
  Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType_descriptor_ = Packet_Notice_Stat_ViewStat_RecordStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_ViewStat_LocalMovieStat_descriptor_ = Packet_Notice_Stat_ViewStat_descriptor_->nested_type(3);
  static const int Packet_Notice_Stat_ViewStat_LocalMovieStat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_LocalMovieStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_LocalMovieStat, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_LocalMovieStat, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_LocalMovieStat, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_LocalMovieStat, timestamp_),
  };
  Packet_Notice_Stat_ViewStat_LocalMovieStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ViewStat_LocalMovieStat_descriptor_,
      Packet_Notice_Stat_ViewStat_LocalMovieStat::default_instance_,
      Packet_Notice_Stat_ViewStat_LocalMovieStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_LocalMovieStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_LocalMovieStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ViewStat_LocalMovieStat));
  Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType_descriptor_ = Packet_Notice_Stat_ViewStat_LocalMovieStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_ViewStat_FlashStat_descriptor_ = Packet_Notice_Stat_ViewStat_descriptor_->nested_type(4);
  static const int Packet_Notice_Stat_ViewStat_FlashStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_FlashStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_FlashStat, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_FlashStat, url_),
  };
  Packet_Notice_Stat_ViewStat_FlashStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ViewStat_FlashStat_descriptor_,
      Packet_Notice_Stat_ViewStat_FlashStat::default_instance_,
      Packet_Notice_Stat_ViewStat_FlashStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_FlashStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_FlashStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ViewStat_FlashStat));
  Packet_Notice_Stat_ViewStat_FlashStat_FlashStatType_descriptor_ = Packet_Notice_Stat_ViewStat_FlashStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_ViewStat_HTMLStat_descriptor_ = Packet_Notice_Stat_ViewStat_descriptor_->nested_type(5);
  static const int Packet_Notice_Stat_ViewStat_HTMLStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_HTMLStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_HTMLStat, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_HTMLStat, url_),
  };
  Packet_Notice_Stat_ViewStat_HTMLStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ViewStat_HTMLStat_descriptor_,
      Packet_Notice_Stat_ViewStat_HTMLStat::default_instance_,
      Packet_Notice_Stat_ViewStat_HTMLStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_HTMLStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_HTMLStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ViewStat_HTMLStat));
  Packet_Notice_Stat_ViewStat_HTMLStat_HTMLStatType_descriptor_ = Packet_Notice_Stat_ViewStat_HTMLStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_ViewStat_TextStat_descriptor_ = Packet_Notice_Stat_ViewStat_descriptor_->nested_type(6);
  static const int Packet_Notice_Stat_ViewStat_TextStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_TextStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_TextStat, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_TextStat, text_),
  };
  Packet_Notice_Stat_ViewStat_TextStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ViewStat_TextStat_descriptor_,
      Packet_Notice_Stat_ViewStat_TextStat::default_instance_,
      Packet_Notice_Stat_ViewStat_TextStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_TextStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_TextStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ViewStat_TextStat));
  Packet_Notice_Stat_ViewStat_TextStat_TextStatType_descriptor_ = Packet_Notice_Stat_ViewStat_TextStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_ViewStat_MapStat_descriptor_ = Packet_Notice_Stat_ViewStat_descriptor_->nested_type(7);
  static const int Packet_Notice_Stat_ViewStat_MapStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_MapStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_MapStat, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_MapStat, url_),
  };
  Packet_Notice_Stat_ViewStat_MapStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ViewStat_MapStat_descriptor_,
      Packet_Notice_Stat_ViewStat_MapStat::default_instance_,
      Packet_Notice_Stat_ViewStat_MapStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_MapStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_MapStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ViewStat_MapStat));
  Packet_Notice_Stat_ViewStat_MapStat_MapCtrlType_descriptor_ = Packet_Notice_Stat_ViewStat_MapStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_ViewStat_OthersStat_descriptor_ = Packet_Notice_Stat_ViewStat_descriptor_->nested_type(8);
  static const int Packet_Notice_Stat_ViewStat_OthersStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_OthersStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_OthersStat, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_OthersStat, sername_),
  };
  Packet_Notice_Stat_ViewStat_OthersStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ViewStat_OthersStat_descriptor_,
      Packet_Notice_Stat_ViewStat_OthersStat::default_instance_,
      Packet_Notice_Stat_ViewStat_OthersStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_OthersStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ViewStat_OthersStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ViewStat_OthersStat));
  Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType_descriptor_ = Packet_Notice_Stat_ViewStat_OthersStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_CameraStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(2);
  static const int Packet_Notice_Stat_CameraStat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_CameraStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_CameraStat, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_CameraStat, camgrp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_CameraStat, cam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_CameraStat, grp_),
  };
  Packet_Notice_Stat_CameraStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_CameraStat_descriptor_,
      Packet_Notice_Stat_CameraStat::default_instance_,
      Packet_Notice_Stat_CameraStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_CameraStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_CameraStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_CameraStat));
  Packet_Notice_Stat_CameraStat_PTZ_TYPE_descriptor_ = Packet_Notice_Stat_CameraStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_HotPointStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(3);
  static const int Packet_Notice_Stat_HotPointStat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_HotPointStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_HotPointStat, hotpoint_),
  };
  Packet_Notice_Stat_HotPointStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_HotPointStat_descriptor_,
      Packet_Notice_Stat_HotPointStat::default_instance_,
      Packet_Notice_Stat_HotPointStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_HotPointStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_HotPointStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_HotPointStat));
  Packet_Notice_Stat_HotPointStat_HotPointStatType_descriptor_ = Packet_Notice_Stat_HotPointStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_LayoutStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(4);
  static const int Packet_Notice_Stat_LayoutStat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutStat, servlayout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutStat, currentlayout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutStat, dy_),
  };
  Packet_Notice_Stat_LayoutStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_LayoutStat_descriptor_,
      Packet_Notice_Stat_LayoutStat::default_instance_,
      Packet_Notice_Stat_LayoutStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_LayoutStat));
  Packet_Notice_Stat_LayoutStat_LayoutStatType_descriptor_ = Packet_Notice_Stat_LayoutStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_LayoutLoopStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(5);
  static const int Packet_Notice_Stat_LayoutLoopStat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutLoopStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutLoopStat, servlayoutloop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutLoopStat, currentlayoutloop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutLoopStat, loop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutLoopStat, dy_),
  };
  Packet_Notice_Stat_LayoutLoopStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_LayoutLoopStat_descriptor_,
      Packet_Notice_Stat_LayoutLoopStat::default_instance_,
      Packet_Notice_Stat_LayoutLoopStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutLoopStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_LayoutLoopStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_LayoutLoopStat));
  Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType_descriptor_ = Packet_Notice_Stat_LayoutLoopStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_MapGrpStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(6);
  static const int Packet_Notice_Stat_MapGrpStat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_MapGrpStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_MapGrpStat, mapgrp_),
  };
  Packet_Notice_Stat_MapGrpStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_MapGrpStat_descriptor_,
      Packet_Notice_Stat_MapGrpStat::default_instance_,
      Packet_Notice_Stat_MapGrpStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_MapGrpStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_MapGrpStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_MapGrpStat));
  Packet_Notice_Stat_MapGrpStat_MapGrpStatType_descriptor_ = Packet_Notice_Stat_MapGrpStat_descriptor_->enum_type(0);
  Packet_Notice_Stat_ErrorStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(7);
  static const int Packet_Notice_Stat_ErrorStat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ErrorStat, error_),
  };
  Packet_Notice_Stat_ErrorStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_ErrorStat_descriptor_,
      Packet_Notice_Stat_ErrorStat::default_instance_,
      Packet_Notice_Stat_ErrorStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ErrorStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_ErrorStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_ErrorStat));
  Packet_Notice_Stat_KeyboardSelectedStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(8);
  static const int Packet_Notice_Stat_KeyboardSelectedStat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_KeyboardSelectedStat, screenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_KeyboardSelectedStat, cameraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_KeyboardSelectedStat, cellid_),
  };
  Packet_Notice_Stat_KeyboardSelectedStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_KeyboardSelectedStat_descriptor_,
      Packet_Notice_Stat_KeyboardSelectedStat::default_instance_,
      Packet_Notice_Stat_KeyboardSelectedStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_KeyboardSelectedStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_KeyboardSelectedStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_KeyboardSelectedStat));
  Packet_Notice_Stat_AlarmStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(9);
  static const int Packet_Notice_Stat_AlarmStat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_AlarmStat, alarmsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_AlarmStat, alarmclear_),
  };
  Packet_Notice_Stat_AlarmStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_AlarmStat_descriptor_,
      Packet_Notice_Stat_AlarmStat::default_instance_,
      Packet_Notice_Stat_AlarmStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_AlarmStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_AlarmStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_AlarmStat));
  Packet_Notice_Stat_GroupLoopStat_descriptor_ = Packet_Notice_Stat_descriptor_->nested_type(10);
  static const int Packet_Notice_Stat_GroupLoopStat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_GroupLoopStat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_GroupLoopStat, grouploop_),
  };
  Packet_Notice_Stat_GroupLoopStat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_Stat_GroupLoopStat_descriptor_,
      Packet_Notice_Stat_GroupLoopStat::default_instance_,
      Packet_Notice_Stat_GroupLoopStat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_GroupLoopStat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_Stat_GroupLoopStat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_Stat_GroupLoopStat));
  Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType_descriptor_ = Packet_Notice_Stat_GroupLoopStat_descriptor_->enum_type(0);
  Packet_Notice_NoticeMaster_descriptor_ = Packet_Notice_descriptor_->nested_type(1);
  static const int Packet_Notice_NoticeMaster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_NoticeMaster, nmlyout_),
  };
  Packet_Notice_NoticeMaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_NoticeMaster_descriptor_,
      Packet_Notice_NoticeMaster::default_instance_,
      Packet_Notice_NoticeMaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_NoticeMaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_NoticeMaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_NoticeMaster));
  Packet_Notice_NoticeMaster_NoticeMasterLyout_descriptor_ = Packet_Notice_NoticeMaster_descriptor_->nested_type(0);
  static const int Packet_Notice_NoticeMaster_NoticeMasterLyout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_NoticeMaster_NoticeMasterLyout, masterlayout_),
  };
  Packet_Notice_NoticeMaster_NoticeMasterLyout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Packet_Notice_NoticeMaster_NoticeMasterLyout_descriptor_,
      Packet_Notice_NoticeMaster_NoticeMasterLyout::default_instance_,
      Packet_Notice_NoticeMaster_NoticeMasterLyout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_NoticeMaster_NoticeMasterLyout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet_Notice_NoticeMaster_NoticeMasterLyout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Packet_Notice_NoticeMaster_NoticeMasterLyout));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobuf_2ftvWall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rect_descriptor_, &Rect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Guid_descriptor_, &Guid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetInterface_descriptor_, &NetInterface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Network_descriptor_, &Network::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NVR_descriptor_, &NVR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMP_descriptor_, &FMP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_descriptor_, &Packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Session_descriptor_, &Packet_Session::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Session_Login_descriptor_, &Packet_Session_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Session_LoginAck_descriptor_, &Packet_Session_LoginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Session_LoginMasterAck_descriptor_, &Packet_Session_LoginMasterAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Session_LoginMasterAck_Server_descriptor_, &Packet_Session_LoginMasterAck_Server::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Session_Logout_descriptor_, &Packet_Session_Logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Session_LogoutAck_descriptor_, &Packet_Session_LogoutAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Session_Ping_descriptor_, &Packet_Session_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Session_PingAck_descriptor_, &Packet_Session_PingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_descriptor_, &Packet_ElementDat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_Screen_descriptor_, &Packet_ElementDat_Screen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_Camera_descriptor_, &Packet_ElementDat_Camera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_Camera_CameraInfo_descriptor_, &Packet_ElementDat_Camera_CameraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_Camera_RecordInfo_descriptor_, &Packet_ElementDat_Camera_RecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_CameraGrp_descriptor_, &Packet_ElementDat_CameraGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_LocalMovie_descriptor_, &Packet_ElementDat_LocalMovie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_Flash_descriptor_, &Packet_ElementDat_Flash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_View_descriptor_, &Packet_ElementDat_View::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_FocusPoint_descriptor_, &Packet_ElementDat_FocusPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_HotPoint_descriptor_, &Packet_ElementDat_HotPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_ServerLayout_descriptor_, &Packet_ElementDat_ServerLayout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_ServerLayoutLoop_descriptor_, &Packet_ElementDat_ServerLayoutLoop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_Map_descriptor_, &Packet_ElementDat_Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementDat_GroupLoop_descriptor_, &Packet_ElementDat_GroupLoop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementMaster_descriptor_, &Packet_ElementMaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementMaster_MasterLayout_descriptor_, &Packet_ElementMaster_MasterLayout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementMaster_MasterLayout_ServerPos_descriptor_, &Packet_ElementMaster_MasterLayout_ServerPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_ElementMaster_MasterLayout_MasLayout_descriptor_, &Packet_ElementMaster_MasterLayout_MasLayout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_descriptor_, &Packet_Ctrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ScreenSplitCtrl_descriptor_, &Packet_Ctrl_ScreenSplitCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ViewCtrl_descriptor_, &Packet_Ctrl_ViewCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_descriptor_, &Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ViewCtrl_VideoCtrl_descriptor_, &Packet_Ctrl_ViewCtrl_VideoCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ViewCtrl_RecordCtrl_descriptor_, &Packet_Ctrl_ViewCtrl_RecordCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ViewCtrl_FlashCtrl_descriptor_, &Packet_Ctrl_ViewCtrl_FlashCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ViewCtrl_HTMLCtrl_descriptor_, &Packet_Ctrl_ViewCtrl_HTMLCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ViewCtrl_LocalMovieCtrl_descriptor_, &Packet_Ctrl_ViewCtrl_LocalMovieCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ViewCtrl_TextCtrl_descriptor_, &Packet_Ctrl_ViewCtrl_TextCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ViewCtrl_MapCtrl_descriptor_, &Packet_Ctrl_ViewCtrl_MapCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_ViewCtrl_OthersCtrl_descriptor_, &Packet_Ctrl_ViewCtrl_OthersCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_CameraCtrl_descriptor_, &Packet_Ctrl_CameraCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_HotPointCtrl_descriptor_, &Packet_Ctrl_HotPointCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_LayoutCtrl_descriptor_, &Packet_Ctrl_LayoutCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_LayoutLoopCtrl_descriptor_, &Packet_Ctrl_LayoutLoopCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_CtrlMaster_descriptor_, &Packet_Ctrl_CtrlMaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_CtrlMaster_CtrlMasterLyout_descriptor_, &Packet_Ctrl_CtrlMaster_CtrlMasterLyout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_MachineCtrl_descriptor_, &Packet_Ctrl_MachineCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_KeyCtrl_descriptor_, &Packet_Ctrl_KeyCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_KeyCmdCtrl_descriptor_, &Packet_Ctrl_KeyCmdCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_AlarmCtrl_descriptor_, &Packet_Ctrl_AlarmCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_SyncClockCtrl_descriptor_, &Packet_Ctrl_SyncClockCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_TextContextCtrl_descriptor_, &Packet_Ctrl_TextContextCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Ctrl_GroupLoopCtrl_descriptor_, &Packet_Ctrl_GroupLoopCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_RequireSession_descriptor_, &Packet_RequireSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_RequireSession_ClientRequire_descriptor_, &Packet_RequireSession_ClientRequire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_RequireSession_ClientRequireAck_descriptor_, &Packet_RequireSession_ClientRequireAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_RequireSession_LocalMovieSession_descriptor_, &Packet_RequireSession_LocalMovieSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_RequireSession_LocalMovieSessionAck_descriptor_, &Packet_RequireSession_LocalMovieSessionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_RequireSession_RecordRequire_descriptor_, &Packet_RequireSession_RecordRequire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_RequireSession_RecordRequireAck_descriptor_, &Packet_RequireSession_RecordRequireAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_RequireSession_NetRequire_descriptor_, &Packet_RequireSession_NetRequire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_RequireSession_NetRequireAck_descriptor_, &Packet_RequireSession_NetRequireAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_descriptor_, &Packet_Notice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_descriptor_, &Packet_Notice_Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ScreenSpliStat_descriptor_, &Packet_Notice_Stat_ScreenSpliStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ViewStat_descriptor_, &Packet_Notice_Stat_ViewStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ViewStat_ViewGeomotryStat_descriptor_, &Packet_Notice_Stat_ViewStat_ViewGeomotryStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ViewStat_VideoStat_descriptor_, &Packet_Notice_Stat_ViewStat_VideoStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ViewStat_RecordStat_descriptor_, &Packet_Notice_Stat_ViewStat_RecordStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ViewStat_LocalMovieStat_descriptor_, &Packet_Notice_Stat_ViewStat_LocalMovieStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ViewStat_FlashStat_descriptor_, &Packet_Notice_Stat_ViewStat_FlashStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ViewStat_HTMLStat_descriptor_, &Packet_Notice_Stat_ViewStat_HTMLStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ViewStat_TextStat_descriptor_, &Packet_Notice_Stat_ViewStat_TextStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ViewStat_MapStat_descriptor_, &Packet_Notice_Stat_ViewStat_MapStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ViewStat_OthersStat_descriptor_, &Packet_Notice_Stat_ViewStat_OthersStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_CameraStat_descriptor_, &Packet_Notice_Stat_CameraStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_HotPointStat_descriptor_, &Packet_Notice_Stat_HotPointStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_LayoutStat_descriptor_, &Packet_Notice_Stat_LayoutStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_LayoutLoopStat_descriptor_, &Packet_Notice_Stat_LayoutLoopStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_MapGrpStat_descriptor_, &Packet_Notice_Stat_MapGrpStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_ErrorStat_descriptor_, &Packet_Notice_Stat_ErrorStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_KeyboardSelectedStat_descriptor_, &Packet_Notice_Stat_KeyboardSelectedStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_AlarmStat_descriptor_, &Packet_Notice_Stat_AlarmStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_Stat_GroupLoopStat_descriptor_, &Packet_Notice_Stat_GroupLoopStat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_NoticeMaster_descriptor_, &Packet_Notice_NoticeMaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Packet_Notice_NoticeMaster_NoticeMasterLyout_descriptor_, &Packet_Notice_NoticeMaster_NoticeMasterLyout::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobuf_2ftvWall_2eproto() {
  delete Rect::default_instance_;
  delete Rect_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Guid::default_instance_;
  delete Guid_reflection_;
  delete NetInterface::default_instance_;
  delete NetInterface_reflection_;
  delete Network::default_instance_;
  delete Network_reflection_;
  delete NVR::default_instance_;
  delete NVR_reflection_;
  delete FMP::default_instance_;
  delete FMP_reflection_;
  delete Packet::default_instance_;
  delete Packet_reflection_;
  delete Packet_Session::default_instance_;
  delete Packet_Session_reflection_;
  delete Packet_Session_Login::default_instance_;
  delete Packet_Session_Login_reflection_;
  delete Packet_Session_Login::_default_version_;
  delete Packet_Session_Login::_default_encryption_;
  delete Packet_Session_LoginAck::default_instance_;
  delete Packet_Session_LoginAck_reflection_;
  delete Packet_Session_LoginAck::_default_version_;
  delete Packet_Session_LoginMasterAck::default_instance_;
  delete Packet_Session_LoginMasterAck_reflection_;
  delete Packet_Session_LoginMasterAck_Server::default_instance_;
  delete Packet_Session_LoginMasterAck_Server_reflection_;
  delete Packet_Session_Logout::default_instance_;
  delete Packet_Session_Logout_reflection_;
  delete Packet_Session_LogoutAck::default_instance_;
  delete Packet_Session_LogoutAck_reflection_;
  delete Packet_Session_Ping::default_instance_;
  delete Packet_Session_Ping_reflection_;
  delete Packet_Session_PingAck::default_instance_;
  delete Packet_Session_PingAck_reflection_;
  delete Packet_ElementDat::default_instance_;
  delete Packet_ElementDat_reflection_;
  delete Packet_ElementDat_Screen::default_instance_;
  delete Packet_ElementDat_Screen_reflection_;
  delete Packet_ElementDat_Camera::default_instance_;
  delete Packet_ElementDat_Camera_reflection_;
  delete Packet_ElementDat_Camera_CameraInfo::default_instance_;
  delete Packet_ElementDat_Camera_CameraInfo_reflection_;
  delete Packet_ElementDat_Camera_RecordInfo::default_instance_;
  delete Packet_ElementDat_Camera_RecordInfo_reflection_;
  delete Packet_ElementDat_CameraGrp::default_instance_;
  delete Packet_ElementDat_CameraGrp_reflection_;
  delete Packet_ElementDat_LocalMovie::default_instance_;
  delete Packet_ElementDat_LocalMovie_reflection_;
  delete Packet_ElementDat_Flash::default_instance_;
  delete Packet_ElementDat_Flash_reflection_;
  delete Packet_ElementDat_View::default_instance_;
  delete Packet_ElementDat_View_reflection_;
  delete Packet_ElementDat_FocusPoint::default_instance_;
  delete Packet_ElementDat_FocusPoint_reflection_;
  delete Packet_ElementDat_HotPoint::default_instance_;
  delete Packet_ElementDat_HotPoint_reflection_;
  delete Packet_ElementDat_ServerLayout::default_instance_;
  delete Packet_ElementDat_ServerLayout_reflection_;
  delete Packet_ElementDat_ServerLayoutLoop::default_instance_;
  delete Packet_ElementDat_ServerLayoutLoop_reflection_;
  delete Packet_ElementDat_Map::default_instance_;
  delete Packet_ElementDat_Map_reflection_;
  delete Packet_ElementDat_GroupLoop::default_instance_;
  delete Packet_ElementDat_GroupLoop_reflection_;
  delete Packet_ElementMaster::default_instance_;
  delete Packet_ElementMaster_reflection_;
  delete Packet_ElementMaster_MasterLayout::default_instance_;
  delete Packet_ElementMaster_MasterLayout_reflection_;
  delete Packet_ElementMaster_MasterLayout_ServerPos::default_instance_;
  delete Packet_ElementMaster_MasterLayout_ServerPos_reflection_;
  delete Packet_ElementMaster_MasterLayout_MasLayout::default_instance_;
  delete Packet_ElementMaster_MasterLayout_MasLayout_reflection_;
  delete Packet_Ctrl::default_instance_;
  delete Packet_Ctrl_reflection_;
  delete Packet_Ctrl_ScreenSplitCtrl::default_instance_;
  delete Packet_Ctrl_ScreenSplitCtrl_reflection_;
  delete Packet_Ctrl_ViewCtrl::default_instance_;
  delete Packet_Ctrl_ViewCtrl_reflection_;
  delete Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::default_instance_;
  delete Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_reflection_;
  delete Packet_Ctrl_ViewCtrl_VideoCtrl::default_instance_;
  delete Packet_Ctrl_ViewCtrl_VideoCtrl_reflection_;
  delete Packet_Ctrl_ViewCtrl_RecordCtrl::default_instance_;
  delete Packet_Ctrl_ViewCtrl_RecordCtrl_reflection_;
  delete Packet_Ctrl_ViewCtrl_FlashCtrl::default_instance_;
  delete Packet_Ctrl_ViewCtrl_FlashCtrl_reflection_;
  delete Packet_Ctrl_ViewCtrl_HTMLCtrl::default_instance_;
  delete Packet_Ctrl_ViewCtrl_HTMLCtrl_reflection_;
  delete Packet_Ctrl_ViewCtrl_LocalMovieCtrl::default_instance_;
  delete Packet_Ctrl_ViewCtrl_LocalMovieCtrl_reflection_;
  delete Packet_Ctrl_ViewCtrl_TextCtrl::default_instance_;
  delete Packet_Ctrl_ViewCtrl_TextCtrl_reflection_;
  delete Packet_Ctrl_ViewCtrl_MapCtrl::default_instance_;
  delete Packet_Ctrl_ViewCtrl_MapCtrl_reflection_;
  delete Packet_Ctrl_ViewCtrl_OthersCtrl::default_instance_;
  delete Packet_Ctrl_ViewCtrl_OthersCtrl_reflection_;
  delete Packet_Ctrl_CameraCtrl::default_instance_;
  delete Packet_Ctrl_CameraCtrl_reflection_;
  delete Packet_Ctrl_HotPointCtrl::default_instance_;
  delete Packet_Ctrl_HotPointCtrl_reflection_;
  delete Packet_Ctrl_LayoutCtrl::default_instance_;
  delete Packet_Ctrl_LayoutCtrl_reflection_;
  delete Packet_Ctrl_LayoutLoopCtrl::default_instance_;
  delete Packet_Ctrl_LayoutLoopCtrl_reflection_;
  delete Packet_Ctrl_CtrlMaster::default_instance_;
  delete Packet_Ctrl_CtrlMaster_reflection_;
  delete Packet_Ctrl_CtrlMaster_CtrlMasterLyout::default_instance_;
  delete Packet_Ctrl_CtrlMaster_CtrlMasterLyout_reflection_;
  delete Packet_Ctrl_MachineCtrl::default_instance_;
  delete Packet_Ctrl_MachineCtrl_reflection_;
  delete Packet_Ctrl_KeyCtrl::default_instance_;
  delete Packet_Ctrl_KeyCtrl_reflection_;
  delete Packet_Ctrl_KeyCmdCtrl::default_instance_;
  delete Packet_Ctrl_KeyCmdCtrl_reflection_;
  delete Packet_Ctrl_AlarmCtrl::default_instance_;
  delete Packet_Ctrl_AlarmCtrl_reflection_;
  delete Packet_Ctrl_SyncClockCtrl::default_instance_;
  delete Packet_Ctrl_SyncClockCtrl_reflection_;
  delete Packet_Ctrl_TextContextCtrl::default_instance_;
  delete Packet_Ctrl_TextContextCtrl_reflection_;
  delete Packet_Ctrl_GroupLoopCtrl::default_instance_;
  delete Packet_Ctrl_GroupLoopCtrl_reflection_;
  delete Packet_RequireSession::default_instance_;
  delete Packet_RequireSession_reflection_;
  delete Packet_RequireSession_ClientRequire::default_instance_;
  delete Packet_RequireSession_ClientRequire_reflection_;
  delete Packet_RequireSession_ClientRequireAck::default_instance_;
  delete Packet_RequireSession_ClientRequireAck_reflection_;
  delete Packet_RequireSession_LocalMovieSession::default_instance_;
  delete Packet_RequireSession_LocalMovieSession_reflection_;
  delete Packet_RequireSession_LocalMovieSessionAck::default_instance_;
  delete Packet_RequireSession_LocalMovieSessionAck_reflection_;
  delete Packet_RequireSession_RecordRequire::default_instance_;
  delete Packet_RequireSession_RecordRequire_reflection_;
  delete Packet_RequireSession_RecordRequireAck::default_instance_;
  delete Packet_RequireSession_RecordRequireAck_reflection_;
  delete Packet_RequireSession_NetRequire::default_instance_;
  delete Packet_RequireSession_NetRequire_reflection_;
  delete Packet_RequireSession_NetRequireAck::default_instance_;
  delete Packet_RequireSession_NetRequireAck_reflection_;
  delete Packet_Notice::default_instance_;
  delete Packet_Notice_reflection_;
  delete Packet_Notice_Stat::default_instance_;
  delete Packet_Notice_Stat_reflection_;
  delete Packet_Notice_Stat_ScreenSpliStat::default_instance_;
  delete Packet_Notice_Stat_ScreenSpliStat_reflection_;
  delete Packet_Notice_Stat_ViewStat::default_instance_;
  delete Packet_Notice_Stat_ViewStat_reflection_;
  delete Packet_Notice_Stat_ViewStat_ViewGeomotryStat::default_instance_;
  delete Packet_Notice_Stat_ViewStat_ViewGeomotryStat_reflection_;
  delete Packet_Notice_Stat_ViewStat_VideoStat::default_instance_;
  delete Packet_Notice_Stat_ViewStat_VideoStat_reflection_;
  delete Packet_Notice_Stat_ViewStat_RecordStat::default_instance_;
  delete Packet_Notice_Stat_ViewStat_RecordStat_reflection_;
  delete Packet_Notice_Stat_ViewStat_LocalMovieStat::default_instance_;
  delete Packet_Notice_Stat_ViewStat_LocalMovieStat_reflection_;
  delete Packet_Notice_Stat_ViewStat_FlashStat::default_instance_;
  delete Packet_Notice_Stat_ViewStat_FlashStat_reflection_;
  delete Packet_Notice_Stat_ViewStat_HTMLStat::default_instance_;
  delete Packet_Notice_Stat_ViewStat_HTMLStat_reflection_;
  delete Packet_Notice_Stat_ViewStat_TextStat::default_instance_;
  delete Packet_Notice_Stat_ViewStat_TextStat_reflection_;
  delete Packet_Notice_Stat_ViewStat_MapStat::default_instance_;
  delete Packet_Notice_Stat_ViewStat_MapStat_reflection_;
  delete Packet_Notice_Stat_ViewStat_OthersStat::default_instance_;
  delete Packet_Notice_Stat_ViewStat_OthersStat_reflection_;
  delete Packet_Notice_Stat_CameraStat::default_instance_;
  delete Packet_Notice_Stat_CameraStat_reflection_;
  delete Packet_Notice_Stat_HotPointStat::default_instance_;
  delete Packet_Notice_Stat_HotPointStat_reflection_;
  delete Packet_Notice_Stat_LayoutStat::default_instance_;
  delete Packet_Notice_Stat_LayoutStat_reflection_;
  delete Packet_Notice_Stat_LayoutLoopStat::default_instance_;
  delete Packet_Notice_Stat_LayoutLoopStat_reflection_;
  delete Packet_Notice_Stat_MapGrpStat::default_instance_;
  delete Packet_Notice_Stat_MapGrpStat_reflection_;
  delete Packet_Notice_Stat_ErrorStat::default_instance_;
  delete Packet_Notice_Stat_ErrorStat_reflection_;
  delete Packet_Notice_Stat_KeyboardSelectedStat::default_instance_;
  delete Packet_Notice_Stat_KeyboardSelectedStat_reflection_;
  delete Packet_Notice_Stat_AlarmStat::default_instance_;
  delete Packet_Notice_Stat_AlarmStat_reflection_;
  delete Packet_Notice_Stat_GroupLoopStat::default_instance_;
  delete Packet_Notice_Stat_GroupLoopStat_reflection_;
  delete Packet_Notice_NoticeMaster::default_instance_;
  delete Packet_Notice_NoticeMaster_reflection_;
  delete Packet_Notice_NoticeMaster_NoticeMasterLyout::default_instance_;
  delete Packet_Notice_NoticeMaster_NoticeMasterLyout_reflection_;
}

void protobuf_AddDesc_protobuf_2ftvWall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025protobuf/tvWall.proto\022\006TvWall\"2\n\004Rect\022"
    "\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\t\n\001w\030\003 \002(\005\022\t\n\001h\030\004 "
    "\002(\005\"\035\n\005Point\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"\024\n\004Gu"
    "id\022\014\n\004data\030\001 \002(\014\"\204\001\n\014NetInterface\022\016\n\006ifn"
    "ame\030\001 \002(\t\022\n\n\002ip\030\002 \002(\t\022\017\n\007netmask\030\003 \002(\t\022\017"
    "\n\007enabled\030\004 \001(\010\022\014\n\004plug\030\005 \001(\010\022\023\n\005speed\030\006"
    " \001(\005:\0041000\022\023\n\004dhcp\030\007 \001(\010:\005false\"\221\001\n\007Netw"
    "ork\022\020\n\010hostName\030\001 \002(\t\022\017\n\007gateway\030\002 \001(\t\022\020"
    "\n\010gateway6\030\003 \001(\t\022\r\n\005gwdev\030\004 \001(\t\022\013\n\003nat\030\005"
    " \001(\t\022\013\n\003dns\030\006 \001(\t\022(\n\ninterfaces\030\007 \003(\0132\024."
    "TvWall.NetInterface\"H\n\003NVR\022\n\n\002ip\030\001 \002(\t\022\020"
    "\n\010userName\030\002 \002(\t\022\020\n\010password\030\003 \002(\t\022\021\n\tco"
    "nnected\030\004 \001(\010\"5\n\003FMP\022\n\n\002ip\030\001 \002(\t\022\020\n\010user"
    "Name\030\002 \002(\t\022\020\n\010password\030\003 \002(\t\"\266\206\001\n\006Packet"
    "\022\'\n\007session\030\002 \001(\0132\026.TvWall.Packet.Sessio"
    "n\022!\n\004ctrl\030\003 \001(\0132\023.TvWall.Packet.Ctrl\0225\n\016"
    "requireSession\030\004 \001(\0132\035.TvWall.Packet.Req"
    "uireSession\022%\n\006notice\030\005 \001(\0132\025.TvWall.Pac"
    "ket.Notice\032\360\007\n\007Session\022+\n\005login\030\001 \001(\0132\034."
    "TvWall.Packet.Session.Login\0221\n\010loginAck\030"
    "\002 \001(\0132\037.TvWall.Packet.Session.LoginAck\022:"
    "\n\013loginMstAck\030\003 \001(\0132%.TvWall.Packet.Sess"
    "ion.LoginMasterAck\022-\n\006logout\030\004 \001(\0132\035.TvW"
    "all.Packet.Session.Logout\0223\n\tlogoutAck\030\005"
    " \001(\0132 .TvWall.Packet.Session.LogoutAck\022)"
    "\n\004ping\030\006 \001(\0132\033.TvWall.Packet.Session.Pin"
    "g\022/\n\007pingAck\030\007 \001(\0132\036.TvWall.Packet.Sessi"
    "on.PingAck\032|\n\005Login\022\027\n\007version\030\001 \002(\t:\006v1"
    ".0.0\022\020\n\010userName\030\002 \001(\t\022\016\n\006passwd\030\003 \001(\t\022\027"
    "\n\nencryption\030\004 \001(\t:\003md5\022\r\n\005token\030\005 \001(\005\022\020"
    "\n\010isMaster\030\006 \001(\010\032F\n\010LoginAck\022\027\n\007version\030"
    "\001 \002(\t:\006v1.0.0\022\016\n\006result\030\002 \002(\005\022\021\n\tsession"
    "Id\030\003 \001(\005\032\240\002\n\016LoginMasterAck\0221\n\010loginAck\030"
    "\001 \002(\0132\037.TvWall.Packet.Session.LoginAck\022\r"
    "\n\005token\030\002 \002(\005\0229\n\003ser\030\003 \003(\0132,.TvWall.Pack"
    "et.Session.LoginMasterAck.Server\0228\n\005lyou"
    "t\030\004 \002(\0132).TvWall.Packet.ElementMaster.Ma"
    "sterLayout\032W\n\006Server\022\014\n\004peer\030\001 \002(\t\022+\n\005lo"
    "gin\030\003 \001(\0132\034.TvWall.Packet.Session.Login\022"
    "\022\n\nserverName\030\004 \001(\t\032A\n\006Logout\0227\n\006reason\030"
    "\001 \002(\0162\'.TvWall.Packet.Session.LogoutReas"
    "onType\032\013\n\tLogoutAck\032\023\n\004Ping\022\013\n\003num\030\001 \002(\005"
    "\032\026\n\007PingAck\022\013\n\003num\030\002 \002(\005\"#\n\020LogoutReason"
    "Type\022\017\n\013USER_LOGOUT\020\000\032\342\024\n\nElementDat\0220\n\006"
    "screen\030\001 \003(\0132 .TvWall.Packet.ElementDat."
    "Screen\022,\n\004view\030\002 \003(\0132\036.TvWall.Packet.Ele"
    "mentDat.View\0223\n\006camGrp\030\003 \003(\0132#.TvWall.Pa"
    "cket.ElementDat.CameraGrp\0224\n\010hotPoint\030\004 "
    "\001(\0132\".TvWall.Packet.ElementDat.HotPoint\022"
    "8\n\nlocalMovie\030\005 \003(\0132$.TvWall.Packet.Elem"
    "entDat.LocalMovie\022.\n\005flash\030\006 \003(\0132\037.TvWal"
    "l.Packet.ElementDat.Flash\022\022\n\nserverName\030"
    "\007 \002(\t\022:\n\nservLayout\030\010 \003(\0132&.TvWall.Packe"
    "t.ElementDat.ServerLayout\022\032\n\004guid\030\t \001(\0132"
    "\014.TvWall.Guid\022*\n\003map\030\n \003(\0132\035.TvWall.Pack"
    "et.ElementDat.Map\022\025\n\rcurrentLayout\030\013 \001(\t"
    "\022B\n\016servLayoutLoop\030\014 \003(\0132*.TvWall.Packet"
    ".ElementDat.ServerLayoutLoop\022\031\n\021currentL"
    "ayoutLoop\030\r \001(\t\022\033\n\006nvrLst\030\016 \003(\0132\013.TvWall"
    ".NVR\0226\n\tgroupLoop\030\017 \001(\0132#.TvWall.Packet."
    "ElementDat.GroupLoop\022\027\n\017maxPlaybackRate\030"
    "\020 \001(\r\022\030\n\003fmp\030\021 \001(\0132\013.TvWall.FMP\022\023\n\013tvwal"
    "lindex\030\022 \001(\005\022\024\n\014anoleVersion\030\023 \001(\t\022\n\n\002SN"
    "\030\024 \001(\t\032W\n\006Screen\022\036\n\010geometry\030\001 \002(\0132\014.TvW"
    "all.Rect\022\023\n\013screenIndex\030\002 \001(\005\022\013\n\003row\030\003 \002"
    "(\005\022\013\n\003col\030\004 \002(\005\032\357\003\n\006Camera\022\036\n\010cameraId\030\001"
    " \002(\0132\014.TvWall.Guid\022\?\n\ncameraInfo\030\002 \002(\0132+"
    ".TvWall.Packet.ElementDat.Camera.CameraI"
    "nfo\022\?\n\nrecordInfo\030\003 \001(\0132+.TvWall.Packet."
    "ElementDat.Camera.RecordInfo\022\030\n\tisPlayin"
    "g\030\004 \001(\010:\005false\022\032\n\013isConnected\030\005 \001(\010:\005fal"
    "se\022\024\n\005isDel\030\006 \001(\010:\005false\022\031\n\nisPlayBack\030\007"
    " \001(\010:\005false\022\036\n\010parentId\030\010 \001(\0132\014.TvWall.G"
    "uid\032\236\001\n\nCameraInfo\022\020\n\010cameraIP\030\001 \002(\t\022\022\n\n"
    "cameraPort\030\002 \002(\005\022\022\n\ncameraName\030\003 \001(\t\022\r\n\005"
    "width\030\004 \001(\005\022\016\n\006height\030\005 \001(\005\022\016\n\006canPtz\030\006 "
    "\001(\010\022\030\n\tcomposite\030\007 \001(\010:\005false\022\r\n\005model\030\010"
    " \001(\r\032\033\n\nRecordInfo\022\r\n\005begin\030\001 \002(\004\032\323\001\n\tCa"
    "meraGrp\022\017\n\007grpName\030\001 \002(\t\022-\n\003cam\030\002 \003(\0132 ."
    "TvWall.Packet.ElementDat.Camera\0223\n\006camGr"
    "p\030\003 \003(\0132#.TvWall.Packet.ElementDat.Camer"
    "aGrp\022\033\n\005grpId\030\004 \002(\0132\014.TvWall.Guid\022\024\n\005isD"
    "el\030\005 \001(\010:\005false\022\036\n\010parentId\030\006 \001(\0132\014.TvWa"
    "ll.Guid\032\036\n\nLocalMovie\022\020\n\010fileName\030\001 \002(\t\032"
    "\024\n\005Flash\022\013\n\003url\030\001 \002(\t\032\305\004\n\004View\022\r\n\005winId\030"
    "\001 \002(\005\022\032\n\004rect\030\002 \002(\0132\014.TvWall.Rect\0229\n\010vie"
    "wType\030\003 \002(\0162\'.TvWall.Packet.ElementDat.V"
    "iew.ViewType\022\013\n\003url\030\004 \001(\t\022\036\n\010cameraId\030\005 "
    "\003(\0132\014.TvWall.Guid\022\021\n\tstartTime\030\006 \001(\004\022\023\n\013"
    "keepStretch\030\007 \001(\010\022\023\n\013borderWidth\030\010 \001(\005\022\021"
    "\n\tshowTitle\030\t \001(\010\022\r\n\005title\030\n \001(\t\022\024\n\014poll"
    "Interval\030\013 \001(\005\022\r\n\005gpuId\030\014 \001(\005\022\026\n\016showFul"
    "lScreen\030\r \001(\010\022\023\n\013windowStack\030\016 \001(\005\022\017\n\007is"
    "Alarm\030\017 \001(\010\022\025\n\ralarmInterval\030\020 \001(\005\022\031\n\021sh"
    "owMaxFullScreen\030\021 \001(\010\022\031\n\021showMinFullScre"
    "en\030\022 \001(\010\022$\n\016fullscreenRect\030\023 \001(\0132\014.TvWal"
    "l.Rect\"u\n\010ViewType\022\t\n\005VIDEO\020\000\022\t\n\005FLASH\020\001"
    "\022\010\n\004HTML\020\002\022\010\n\004TEXT\020\003\022\017\n\013LOCAL_MOVIE\020\004\022\007\n"
    "\003MAP\020\005\022\n\n\006OTHERS\020\006\022\016\n\nRECORDFILE\020\007\022\t\n\005AL"
    "ARM\020\010\032\014\n\nFocusPoint\032j\n\010HotPoint\022\036\n\010geome"
    "try\030\001 \002(\0132\014.TvWall.Rect\022\023\n\013screenIndex\030\003"
    " \002(\005\022\022\n\nlimitedMap\030\004 \002(\010\022\025\n\rlimitedRecor"
    "d\030\005 \002(\010\032J\n\014ServerLayout\022\014\n\004name\030\001 \002(\t\022,\n"
    "\tlayoutDat\030\002 \002(\0132\031.TvWall.Packet.Element"
    "Dat\032J\n\020ServerLayoutLoop\022\014\n\004name\030\001 \002(\t\022\024\n"
    "\014pollInterval\030\002 \002(\r\022\022\n\nlayoutName\030\003 \003(\t\032"
    "A\n\003Map\022\016\n\006mapUrl\030\001 \002(\t\022*\n\003map\030\002 \003(\0132\035.Tv"
    "Wall.Packet.ElementDat.Map\032^\n\tGroupLoop\022"
    "-\n\005views\030\001 \003(\0132\036.TvWall.Packet.ElementDa"
    "t.View\022\024\n\014pollInterval\030\002 \002(\r\022\014\n\004isOn\030\003 \001"
    "(\010\032\303\003\n\rElementMaster\022\r\n\005token\030\001 \002(\005\0229\n\003s"
    "er\030\002 \003(\0132,.TvWall.Packet.Session.LoginMa"
    "sterAck.Server\022>\n\013masterlyout\030\003 \002(\0132).Tv"
    "Wall.Packet.ElementMaster.MasterLayout\032\247"
    "\002\n\014MasterLayout\022I\n\014masterLayout\030\001 \003(\01323."
    "TvWall.Packet.ElementMaster.MasterLayout"
    ".MasLayout\032Y\n\tServerPos\022\022\n\nserverName\030\001 "
    "\001(\t\022\032\n\004guid\030\002 \002(\0132\014.TvWall.Guid\022\034\n\005point"
    "\030\003 \002(\0132\r.TvWall.Point\032q\n\tMasLayout\022\021\n\tly"
    "outName\030\001 \002(\t\022\?\n\002sp\030\002 \003(\01323.TvWall.Packe"
    "t.ElementMaster.MasterLayout.ServerPos\022\020"
    "\n\010serverln\030\003 \003(\t\032\337,\n\004Ctrl\022.\n\010viewCtrl\030\001 "
    "\001(\0132\034.TvWall.Packet.Ctrl.ViewCtrl\0222\n\ncam"
    "eraCtrl\030\002 \001(\0132\036.TvWall.Packet.Ctrl.Camer"
    "aCtrl\0226\n\014hotPointCtrl\030\003 \001(\0132 .TvWall.Pac"
    "ket.Ctrl.HotPointCtrl\0221\n\tlyoutCtrl\030\004 \001(\013"
    "2\036.TvWall.Packet.Ctrl.LayoutCtrl\0222\n\nmast"
    "erCtrl\030\005 \001(\0132\036.TvWall.Packet.Ctrl.CtrlMa"
    "ster\0227\n\nscreenCtrl\030\006 \001(\0132#.TvWall.Packet"
    ".Ctrl.ScreenSplitCtrl\0229\n\rlyoutLoopCtrl\030\007"
    " \001(\0132\".TvWall.Packet.Ctrl.LayoutLoopCtrl"
    "\0224\n\013machineCtrl\030\010 \001(\0132\037.TvWall.Packet.Ct"
    "rl.MachineCtrl\022,\n\007keyCtrl\030\t \001(\0132\033.TvWall"
    ".Packet.Ctrl.KeyCtrl\0222\n\nkeyCmdCtrl\030\n \001(\013"
    "2\036.TvWall.Packet.Ctrl.KeyCmdCtrl\0220\n\talar"
    "mCtrl\030\013 \001(\0132\035.TvWall.Packet.Ctrl.AlarmCt"
    "rl\0223\n\010syncCtrl\030\014 \001(\0132!.TvWall.Packet.Ctr"
    "l.SyncClockCtrl\022;\n\016txtContextCtrl\030\r \001(\0132"
    "#.TvWall.Packet.Ctrl.TextContextCtrl\0228\n\r"
    "groupLoopCtrl\030\016 \001(\0132!.TvWall.Packet.Ctrl"
    ".GroupLoopCtrl\032F\n\017ScreenSplitCtrl\022\023\n\013scr"
    "eenIndex\030\002 \002(\005\022\016\n\003row\030\003 \002(\005:\0011\022\016\n\003col\030\004 "
    "\002(\005:\0011\032\201\022\n\010ViewCtrl\0229\n\tvideoCtrl\030\001 \001(\0132&"
    ".TvWall.Packet.Ctrl.ViewCtrl.VideoCtrl\0229"
    "\n\tflashCtrl\030\002 \001(\0132&.TvWall.Packet.Ctrl.V"
    "iewCtrl.FlashCtrl\0227\n\010htmlCtrl\030\003 \001(\0132%.Tv"
    "Wall.Packet.Ctrl.ViewCtrl.HTMLCtrl\0227\n\010te"
    "xtCtrl\030\004 \001(\0132%.TvWall.Packet.Ctrl.ViewCt"
    "rl.TextCtrl\022;\n\nothersCtrl\030\005 \001(\0132\'.TvWall"
    ".Packet.Ctrl.ViewCtrl.OthersCtrl\022\?\n\nloca"
    "lMovie\030\006 \001(\0132+.TvWall.Packet.Ctrl.ViewCt"
    "rl.LocalMovieCtrl\022G\n\020viewGeomotryCtrl\030\007 "
    "\001(\0132-.TvWall.Packet.Ctrl.ViewCtrl.ViewGe"
    "omotryCtrl\0225\n\007mapCtrl\030\010 \001(\0132$.TvWall.Pac"
    "ket.Ctrl.ViewCtrl.MapCtrl\022;\n\nrecordCtrl\030"
    "\t \001(\0132\'.TvWall.Packet.Ctrl.ViewCtrl.Reco"
    "rdCtrl\032\371\001\n\020ViewGeomotryCtrl\022P\n\004type\030\001 \002("
    "\0162B.TvWall.Packet.Ctrl.ViewCtrl.ViewGeom"
    "otryCtrl.ViewGeomotryCtrlType\022,\n\004view\030\002 "
    "\002(\0132\036.TvWall.Packet.ElementDat.View\"e\n\024V"
    "iewGeomotryCtrlType\022\n\n\006CREATE\020\000\022\017\n\013WINDO"
    "W_CTRL\020\001\022\n\n\006REMOVE\020\002\022\024\n\020SET_BORDER_WIDTH"
    "\020\003\022\016\n\nSHOW_TITLE\020\004\032\202\002\n\tVideoCtrl\022B\n\004type"
    "\030\001 \002(\01624.TvWall.Packet.Ctrl.ViewCtrl.Vid"
    "eoCtrl.VideoCtrlType\022\r\n\005winId\030\002 \002(\005\022\036\n\010c"
    "ameraId\030\003 \003(\0132\014.TvWall.Guid\022\024\n\014pollInter"
    "val\030\004 \001(\005\022\023\n\013keepStretch\030\005 \001(\010\"W\n\rVideoC"
    "trlType\022\016\n\nCAMERA_ADD\020\000\022\021\n\rCAMERA_REMOVE"
    "\020\001\022\021\n\rPOLL_INTERVAL\020\002\022\020\n\014KEEP_STRETCH\020\003\032"
    "\265\002\n\nRecordCtrl\022D\n\004type\030\001 \002(\01626.TvWall.Pa"
    "cket.Ctrl.ViewCtrl.RecordCtrl.RecordCtrl"
    "Type\022\r\n\005winId\030\002 \002(\005\022\036\n\010cameraId\030\003 \002(\0132\014."
    "TvWall.Guid\022\021\n\tstartTime\030\004 \001(\004\022\023\n\013keepSt"
    "retch\030\005 \001(\010\022\014\n\004rate\030\006 \001(\005\"|\n\016RecordCtrlT"
    "ype\022\024\n\020RESET_START_TIME\020\000\022\020\n\014KEEP_STRETC"
    "H\020\001\022\014\n\010SET_RATE\020\002\022\t\n\005PAUSE\020\003\022\010\n\004SLOW\020\004\022\010"
    "\n\004FAST\020\005\022\010\n\004BACK\020\006\022\013\n\007FORWARD\020\007\032\213\001\n\tFlas"
    "hCtrl\022B\n\004type\030\001 \002(\01624.TvWall.Packet.Ctrl"
    ".ViewCtrl.FlashCtrl.FlashCtrlType\022\r\n\005win"
    "Id\030\002 \002(\005\022\013\n\003url\030\003 \002(\t\"\036\n\rFlashCtrlType\022\r"
    "\n\tSET_FLASH\020\000\032\206\001\n\010HTMLCtrl\022@\n\004type\030\001 \002(\016"
    "22.TvWall.Packet.Ctrl.ViewCtrl.HTMLCtrl."
    "HTMLCtrlType\022\r\n\005winId\030\002 \002(\005\022\013\n\003url\030\003 \002(\t"
    "\"\034\n\014HTMLCtrlType\022\014\n\010SET_HTML\020\000\032\356\001\n\016Local"
    "MovieCtrl\022H\n\004type\030\001 \002(\0162:.TvWall.Packet."
    "Ctrl.ViewCtrl.LocalMovieCtrl.LocalMovieT"
    "ype\022\r\n\005winId\030\002 \002(\005\022\013\n\003url\030\003 \001(\t\022\016\n\006volum"
    "e\030\004 \001(\005\022\021\n\ttimeStamp\030\005 \001(\003\"S\n\016LocalMovie"
    "Type\022\014\n\010SET_FILE\020\000\022\016\n\nSET_VOLUME\020\001\022\016\n\nSE"
    "T_SLIDER\020\002\022\t\n\005PAUSE\020\003\022\010\n\004STOP\020\004\032\207\001\n\010Text"
    "Ctrl\022@\n\004type\030\001 \002(\01622.TvWall.Packet.Ctrl."
    "ViewCtrl.TextCtrl.TextCtrlType\022\r\n\005winId\030"
    "\002 \002(\005\022\014\n\004text\030\003 \001(\t\"\034\n\014TextCtrlType\022\014\n\010S"
    "ET_TEXT\020\000\032\201\001\n\007MapCtrl\022>\n\004type\030\001 \002(\01620.Tv"
    "Wall.Packet.Ctrl.ViewCtrl.MapCtrl.MapCtr"
    "lType\022\r\n\005winId\030\002 \002(\005\022\013\n\003url\030\003 \001(\t\"\032\n\013Map"
    "CtrlType\022\013\n\007SET_MAP\020\000\032\202\001\n\nOthersCtrl\022D\n\004"
    "type\030\001 \002(\01626.TvWall.Packet.Ctrl.ViewCtrl"
    ".OthersCtrl.OthersCtrlType\022\r\n\005winId\030\002 \002("
    "\005\"\037\n\016OthersCtrlType\022\r\n\tOTHER_ADD\020\000\032\226\001\n\nC"
    "ameraCtrl\0225\n\004type\030\001 \002(\0162\'.TvWall.Packet."
    "Ctrl.CameraCtrl.PTZ_TYPE\022\036\n\010cameraId\030\002 \002"
    "(\0132\014.TvWall.Guid\"1\n\010PTZ_TYPE\022\010\n\004LEFT\020\000\022\t"
    "\n\005RIGHT\020\001\022\006\n\002UP\020\002\022\010\n\004DOWN\020\003\032\316\001\n\014HotPoint"
    "Ctrl\022\?\n\004type\030\001 \002(\01621.TvWall.Packet.Ctrl."
    "HotPointCtrl.HotPointCtrlType\0224\n\010hotPoin"
    "t\030\002 \001(\0132\".TvWall.Packet.ElementDat.HotPo"
    "int\"G\n\020HotPointCtrlType\022\n\n\006CREATE\020\000\022\n\n\006R"
    "EMOVE\020\001\022\t\n\005RESET\020\002\022\020\n\014RESET_SCREEN\020\003\032\272\001\n"
    "\nLayoutCtrl\022\021\n\tlyoutName\030\001 \002(\t\022;\n\004type\030\003"
    " \002(\0162-.TvWall.Packet.Ctrl.LayoutCtrl.Lay"
    "outCtrlType\022\017\n\007isalarm\030\002 \001(\010\022\025\n\ralarmInt"
    "erval\030\004 \001(\005\"4\n\016LayoutCtrlType\022\020\n\014SAVE_CU"
    "RRENT\020\000\022\007\n\003DEL\020\001\022\007\n\003USE\020\002\032\352\001\n\016LayoutLoop"
    "Ctrl\022\025\n\rlyoutLoopName\030\001 \002(\t\022C\n\004type\030\002 \002("
    "\01625.TvWall.Packet.Ctrl.LayoutLoopCtrl.La"
    "youtLoopCtrlType\022\022\n\nlayoutName\030\003 \003(\t\022\014\n\004"
    "loop\030\004 \001(\r\"Z\n\022LayoutLoopCtrlType\022\007\n\003ADD\020"
    "\000\022\n\n\006REMOVE\020\001\022\016\n\nADD_LAYOUT\020\002\022\007\n\003USE\020\003\022\014"
    "\n\010SET_LOOP\020\004\022\010\n\004STOP\020\005\032\222\002\n\nCtrlMaster\022A\n"
    "\tctrlLyout\030\001 \001(\0132..TvWall.Packet.Ctrl.Ct"
    "rlMaster.CtrlMasterLyout\032\300\001\n\017CtrlMasterL"
    "yout\022D\n\004type\030\001 \002(\01626.TvWall.Packet.Ctrl."
    "CtrlMaster.CtrlMasterLyout.CMLType\022I\n\014ma"
    "sterLayout\030\002 \002(\01323.TvWall.Packet.Element"
    "Master.MasterLayout.MasLayout\"\034\n\007CMLType"
    "\022\010\n\004SAVE\020\000\022\007\n\003DEL\020\001\032\255\003\n\013MachineCtrl\022=\n\004t"
    "ype\030\001 \002(\0162/.TvWall.Packet.Ctrl.MachineCt"
    "rl.MachineCtrlType\022\022\n\nscreenMode\030\002 \001(\t\022*"
    "\n\014netInterface\030\003 \001(\0132\024.TvWall.NetInterfa"
    "ce\022 \n\007network\030\004 \001(\0132\017.TvWall.Network\022\030\n\003"
    "nvr\030\005 \001(\0132\013.TvWall.NVR\022\030\n\003fmp\030\006 \001(\0132\013.Tv"
    "Wall.FMP\022\023\n\013tvwallindex\030\007 \001(\005\"\263\001\n\017Machin"
    "eCtrlType\022\n\n\006REBOOT\020\000\022\017\n\013SOFT_REBOOT\020\001\022\016"
    "\n\nSET_SCREEN\020\002\022\014\n\010POWEROFF\020\003\022\014\n\010NET_HOST"
    "\020\004\022\017\n\013NET_GATEWAY\020\005\022\021\n\rNET_INTERFACE\020\006\022\013"
    "\n\007NVR_ADD\020\007\022\013\n\007NVR_DEL\020\010\022\007\n\003FMP\020\t\022\020\n\014TVW"
    "ALL_INDEX\020\n\032\314\001\n\007KeyCtrl\0221\n\004type\030\001 \002(\0162#."
    "TvWall.Packet.Ctrl.KeyCtrl.KeyType\022\013\n\003ke"
    "y\030\002 \002(\005\022\021\n\tmodifiers\030\003 \002(\005\022\014\n\004text\030\004 \001(\t"
    "\022\022\n\nautoRepeat\030\005 \001(\010\022\r\n\005count\030\006 \001(\005\"=\n\007K"
    "eyType\022\014\n\010KeyPress\020\000\022\016\n\nKeyRelease\020\001\022\024\n\020"
    "ShortcutOverride\020\002\032\262\002\n\nKeyCmdCtrl\0227\n\004typ"
    "e\030\001 \001(\0162).TvWall.Packet.Ctrl.KeyCmdCtrl."
    "KeyCmdType\022\021\n\tscreenIdx\030\002 \001(\005\022\021\n\tcamPosI"
    "dx\030\003 \001(\005\022\013\n\003key\030\004 \001(\005\0227\n\007keyType\030\005 \001(\0162&"
    ".TvWall.Packet.Ctrl.KeyCmdCtrl.KeyType\022\014"
    "\n\004text\030\006 \001(\t\022\020\n\010cam_guid\030\007 \001(\t\"6\n\nKeyCmd"
    "Type\022\t\n\005Media\020\000\022\007\n\003Ptz\020\001\022\n\n\006Preset\020\002\022\010\n\004"
    "tour\020\003\"\'\n\007KeyType\022\014\n\010KeyPress\020\000\022\016\n\nKeyRe"
    "lease\020\001\0324\n\tAlarmCtrl\022\023\n\013alarmSource\030\001 \002("
    "\t\022\022\n\nalarmClear\030\002 \002(\010\032\205\001\n\rSyncClockCtrl\022"
    "\r\n\005clock\030\001 \001(\005\0228\n\004type\030\002 \001(\0162*.TvWall.Pa"
    "cket.Ctrl.SyncClockCtrl.SyncType\"+\n\010Sync"
    "Type\022\r\n\tSyncClock\020\000\022\020\n\014SyncFirstCam\020\001\032\232\001"
    "\n\017TextContextCtrl\022A\n\004type\030\001 \002(\01623.TvWall"
    ".Packet.Ctrl.TextContextCtrl.TextContext"
    "Type\022\017\n\007oldText\030\002 \002(\t\022\017\n\007newText\030\003 \002(\t\"\""
    "\n\017TextContextType\022\017\n\013TextChanged\020\000\032\345\001\n\rG"
    "roupLoopCtrl\022A\n\004type\030\001 \002(\01623.TvWall.Pack"
    "et.Ctrl.GroupLoopCtrl.GroupLoopCtrlType\022"
    "6\n\tgroupLoop\030\002 \002(\0132#.TvWall.Packet.Eleme"
    "ntDat.GroupLoop\"Y\n\021GroupLoopCtrlType\022\007\n\003"
    "ALL\020\000\022\016\n\nFOCUS_AREA\020\001\022\017\n\013RESET_VIEWS\020\002\022\r"
    "\n\tLOOP_TIME\020\004\022\013\n\007ACTIVED\020\010\032\322\014\n\016RequireSe"
    "ssion\022B\n\rclientRequire\030\001 \001(\0132+.TvWall.Pa"
    "cket.RequireSession.ClientRequire\022H\n\020cli"
    "entRequireAck\030\002 \001(\0132..TvWall.Packet.Requ"
    "ireSession.ClientRequireAck\022<\n\003lms\030\003 \001(\013"
    "2/.TvWall.Packet.RequireSession.LocalMov"
    "ieSession\022B\n\006lmsAck\030\004 \001(\01322.TvWall.Packe"
    "t.RequireSession.LocalMovieSessionAck\022B\n"
    "\rrecordRequire\030\005 \001(\0132+.TvWall.Packet.Req"
    "uireSession.RecordRequire\022H\n\020recordRequi"
    "reAck\030\006 \001(\0132..TvWall.Packet.RequireSessi"
    "on.RecordRequireAck\022<\n\nnetRequire\030\007 \001(\0132"
    "(.TvWall.Packet.RequireSession.NetRequir"
    "e\022B\n\rnetRequireAck\030\010 \001(\0132+.TvWall.Packet"
    ".RequireSession.NetRequireAck\032N\n\rClientR"
    "equire\022=\n\004type\030\001 \002(\0162/.TvWall.Packet.Req"
    "uireSession.ClientRequireType\032\201\001\n\020Client"
    "RequireAck\022=\n\004type\030\001 \002(\0162/.TvWall.Packet"
    ".RequireSession.ClientRequireType\022.\n\013ele"
    "mentData\030\002 \002(\0132\031.TvWall.Packet.ElementDa"
    "t\0329\n\021LocalMovieSession\022\r\n\005winId\030\001 \002(\005\022\025\n"
    "\rneedAlwaysAck\030\002 \002(\010\032\322\001\n\024LocalMovieSessi"
    "onAck\022\r\n\005winId\030\001 \002(\005\022\013\n\003url\030\002 \001(\t\022\016\n\006vol"
    "ume\030\003 \001(\005\022\021\n\ttimeStamp\030\004 \001(\003\022O\n\tmovieSta"
    "t\030\005 \002(\0162<.TvWall.Packet.RequireSession.L"
    "ocalMovieSessionAck.MovieStat\"*\n\tMovieSt"
    "at\022\010\n\004STOP\020\000\022\010\n\004PLAY\020\001\022\t\n\005PAUSE\020\002\032\262\001\n\rRe"
    "cordRequire\022K\n\004type\030\001 \002(\0162=.TvWall.Packe"
    "t.RequireSession.RecordRequire.RecordReq"
    "uireType\022\r\n\005winId\030\002 \002(\005\022\036\n\010CameraId\030\003 \002("
    "\0132\014.TvWall.Guid\"%\n\021RecordRequireType\022\020\n\014"
    "CURRENT_TIME\020\000\032u\n\020RecordRequireAck\022\r\n\005wi"
    "nId\030\001 \002(\005\022\036\n\010CameraId\030\002 \002(\0132\014.TvWall.Gui"
    "d\022\023\n\013currentTime\030\003 \001(\004\022\014\n\004vary\030\004 \001(\005\022\017\n\007"
    "isPause\030\005 \001(\010\032\014\n\nNetRequire\032-\n\rNetRequir"
    "eAck\022\034\n\003net\030\001 \001(\0132\017.TvWall.Network\"\322\001\n\021C"
    "lientRequireType\022\n\n\006SCREEN\020\001\022\010\n\004VIEW\020\002\022\n"
    "\n\006CAMERA\020\004\022\r\n\tHOT_POINT\020\010\022\017\n\013FOCUS_POINT"
    "\020\020\022\017\n\013LOCAL_MOVIE\020 \022\t\n\005FLASH\020@\022\013\n\006LAYOUT"
    "\020\200\001\022\017\n\nRECORDINFO\020\200\002\022\014\n\007MAPINFO\020\200\004\022\017\n\nLA"
    "YOUTLOOP\020\200\010\022\r\n\010NVR_LIST\020\200\020\022\010\n\003FMP\020\200 \022\t\n\003"
    "ALL\020\377\377\003\032\254+\n\006Notice\0224\n\nscreenInfo\030\001 \003(\0132 "
    ".TvWall.Packet.ElementDat.Screen\022,\n\010stat"
    "Info\030\002 \001(\0132\032.TvWall.Packet.Notice.Stat\022:"
    "\n\rcameraGrpInfo\030\003 \003(\0132#.TvWall.Packet.El"
    "ementDat.CameraGrp\0226\n\nmasterStat\030\004 \001(\0132\""
    ".TvWall.Packet.Notice.NoticeMaster\032\233(\n\004S"
    "tat\0225\n\010viewStat\030\001 \001(\0132#.TvWall.Packet.No"
    "tice.Stat.ViewStat\0229\n\ncameraStat\030\002 \001(\0132%"
    ".TvWall.Packet.Notice.Stat.CameraStat\022=\n"
    "\014hotPointStat\030\003 \001(\0132\'.TvWall.Packet.Noti"
    "ce.Stat.HotPointStat\0228\n\tlyoutStat\030\004 \001(\0132"
    "%.TvWall.Packet.Notice.Stat.LayoutStat\022="
    "\n\nscreenStat\030\005 \001(\0132).TvWall.Packet.Notic"
    "e.Stat.ScreenSpliStat\0229\n\nmapGrpStat\030\006 \001("
    "\0132%.TvWall.Packet.Notice.Stat.MapGrpStat"
    "\022@\n\rlyoutLoopStat\030\007 \001(\0132).TvWall.Packet."
    "Notice.Stat.LayoutLoopStat\0225\n\007errStat\030\010 "
    "\001(\0132$.TvWall.Packet.Notice.Stat.ErrorSta"
    "t\022M\n\024keyboardSelectedStat\030\t \001(\0132/.TvWall"
    ".Packet.Notice.Stat.KeyboardSelectedStat"
    "\0227\n\talarmStat\030\n \001(\0132$.TvWall.Packet.Noti"
    "ce.Stat.AlarmStat\022\?\n\rgroupLoopStat\030\013 \001(\013"
    "2(.TvWall.Packet.Notice.Stat.GroupLoopSt"
    "at\032\?\n\016ScreenSpliStat\022\023\n\013screenIndex\030\002 \002("
    "\005\022\013\n\003row\030\003 \002(\005\022\013\n\003col\030\004 \002(\005\032\324\023\n\010ViewStat"
    "\022@\n\tvideoStat\030\001 \001(\0132-.TvWall.Packet.Noti"
    "ce.Stat.ViewStat.VideoStat\022@\n\tflashStat\030"
    "\002 \001(\0132-.TvWall.Packet.Notice.Stat.ViewSt"
    "at.FlashStat\022>\n\010htmlStat\030\003 \001(\0132,.TvWall."
    "Packet.Notice.Stat.ViewStat.HTMLStat\022>\n\010"
    "textStat\030\004 \001(\0132,.TvWall.Packet.Notice.St"
    "at.ViewStat.TextStat\022B\n\nothersStat\030\005 \001(\013"
    "2..TvWall.Packet.Notice.Stat.ViewStat.Ot"
    "hersStat\022J\n\016localMovieStat\030\006 \001(\01322.TvWal"
    "l.Packet.Notice.Stat.ViewStat.LocalMovie"
    "Stat\022N\n\020viewGeomotryStat\030\007 \001(\01324.TvWall."
    "Packet.Notice.Stat.ViewStat.ViewGeomotry"
    "Stat\022B\n\nrecordStat\030\010 \001(\0132..TvWall.Packet"
    ".Notice.Stat.ViewStat.RecordStat\022<\n\007mapS"
    "tat\030\t \001(\0132+.TvWall.Packet.Notice.Stat.Vi"
    "ewStat.MapStat\032\215\002\n\020ViewGeomotryStat\022W\n\004t"
    "ype\030\001 \002(\0162I.TvWall.Packet.Notice.Stat.Vi"
    "ewStat.ViewGeomotryStat.ViewGeomotryStat"
    "Type\022,\n\004view\030\002 \002(\0132\036.TvWall.Packet.Eleme"
    "ntDat.View\022\013\n\003url\030\003 \001(\t\"e\n\024ViewGeomotryS"
    "tatType\022\n\n\006CREATE\020\000\022\017\n\013WINDOW_CTRL\020\001\022\n\n\006"
    "REMOVE\020\002\022\024\n\020SET_BORDER_WIDTH\020\003\022\016\n\nSHOW_T"
    "ITLE\020\004\032\253\002\n\tVideoStat\022I\n\004type\030\001 \002(\0162;.TvW"
    "all.Packet.Notice.Stat.ViewStat.VideoSta"
    "t.VideoStatType\022\r\n\005winId\030\002 \002(\005\022\036\n\010camera"
    "Id\030\003 \003(\0132\014.TvWall.Guid\022\024\n\014pollInterval\030\004"
    " \001(\005\022\023\n\013keepStretch\030\005 \001(\010\022 \n\ncameraIddy\030"
    "\006 \003(\0132\014.TvWall.Guid\"W\n\rVideoStatType\022\016\n\n"
    "CAMERA_ADD\020\000\022\021\n\rCAMERA_REMOVE\020\001\022\021\n\rPOLL_"
    "INTERVAL\020\002\022\020\n\014KEEP_STRETCH\020\003\032\274\002\n\nRecordS"
    "tat\022K\n\004type\030\001 \002(\0162=.TvWall.Packet.Notice"
    ".Stat.ViewStat.RecordStat.RecordStatType"
    "\022\r\n\005winId\030\002 \002(\005\022\036\n\010cameraId\030\003 \002(\0132\014.TvWa"
    "ll.Guid\022\021\n\tstartTime\030\004 \001(\004\022\023\n\013keepStretc"
    "h\030\005 \001(\010\022\014\n\004rate\030\006 \001(\005\"|\n\016RecordStatType\022"
    "\024\n\020RESET_START_TIME\020\000\022\020\n\014KEEP_STRETCH\020\001\022"
    "\014\n\010SET_RATE\020\002\022\t\n\005PAUSE\020\003\022\010\n\004SLOW\020\004\022\010\n\004FA"
    "ST\020\005\022\010\n\004BACK\020\006\022\013\n\007FORWARD\020\007\032\365\001\n\016LocalMov"
    "ieStat\022O\n\004type\030\001 \002(\0162A.TvWall.Packet.Not"
    "ice.Stat.ViewStat.LocalMovieStat.LocalMo"
    "vieType\022\r\n\005winId\030\002 \002(\005\022\013\n\003url\030\003 \001(\t\022\016\n\006v"
    "olume\030\004 \001(\005\022\021\n\ttimeStamp\030\005 \001(\003\"S\n\016LocalM"
    "ovieType\022\014\n\010SET_FILE\020\000\022\016\n\nSET_VOLUME\020\001\022\016"
    "\n\nSET_SLIDER\020\002\022\t\n\005PAUSE\020\003\022\010\n\004STOP\020\004\032\222\001\n\t"
    "FlashStat\022I\n\004type\030\001 \002(\0162;.TvWall.Packet."
    "Notice.Stat.ViewStat.FlashStat.FlashStat"
    "Type\022\r\n\005winId\030\002 \002(\005\022\013\n\003url\030\003 \002(\t\"\036\n\rFlas"
    "hStatType\022\r\n\tSET_FLASH\020\000\032\215\001\n\010HTMLStat\022G\n"
    "\004type\030\001 \002(\01629.TvWall.Packet.Notice.Stat."
    "ViewStat.HTMLStat.HTMLStatType\022\r\n\005winId\030"
    "\002 \002(\005\022\013\n\003url\030\003 \002(\t\"\034\n\014HTMLStatType\022\014\n\010SE"
    "T_HTML\020\000\032\216\001\n\010TextStat\022G\n\004type\030\001 \002(\01629.Tv"
    "Wall.Packet.Notice.Stat.ViewStat.TextSta"
    "t.TextStatType\022\r\n\005winId\030\002 \002(\005\022\014\n\004text\030\003 "
    "\001(\t\"\034\n\014TextStatType\022\014\n\010SET_TEXT\020\000\032\210\001\n\007Ma"
    "pStat\022E\n\004type\030\001 \002(\01627.TvWall.Packet.Noti"
    "ce.Stat.ViewStat.MapStat.MapCtrlType\022\r\n\005"
    "winId\030\002 \002(\005\022\013\n\003url\030\003 \001(\t\"\032\n\013MapCtrlType\022"
    "\013\n\007SET_MAP\020\000\032\253\001\n\nOthersStat\022K\n\004type\030\001 \002("
    "\0162=.TvWall.Packet.Notice.Stat.ViewStat.O"
    "thersStat.OthersStatType\022\r\n\005winId\030\002 \002(\005\022"
    "\017\n\007serName\030\003 \001(\t\"0\n\016OthersStatType\022\r\n\tOT"
    "HER_ADD\020\000\022\017\n\013SERVER_NAME\020\001\032\327\003\n\nCameraSta"
    "t\022<\n\004type\030\001 \002(\0162..TvWall.Packet.Notice.S"
    "tat.CameraStat.PTZ_TYPE\022\036\n\010cameraId\030\002 \001("
    "\0132\014.TvWall.Guid\0223\n\006camGrp\030\003 \003(\0132#.TvWall"
    ".Packet.ElementDat.CameraGrp\022-\n\003cam\030\004 \001("
    "\0132 .TvWall.Packet.ElementDat.Camera\0220\n\003g"
    "rp\030\005 \001(\0132#.TvWall.Packet.ElementDat.Came"
    "raGrp\"\324\001\n\010PTZ_TYPE\022\010\n\004LEFT\020\000\022\t\n\005RIGHT\020\001\022"
    "\006\n\002UP\020\002\022\010\n\004DOWN\020\003\022\016\n\nADD_CAMERA\020\004\022\021\n\rREM"
    "OVE_CAMERA\020\005\022\013\n\007NETSTAT\020\006\022\020\n\014PLAYING_STA"
    "T\020\007\022\021\n\rPLAYBACK_STAT\020\010\022\n\n\006UPDATE\020\t\022\007\n\003AD"
    "D\020\n\022\n\n\006REMOVE\020\013\022\013\n\007ADD_GRP\020\014\022\016\n\nREMOVE_G"
    "RP\020\r\022\016\n\nUPDATE_GRP\020\016\032\325\001\n\014HotPointStat\022F\n"
    "\004type\030\001 \002(\01628.TvWall.Packet.Notice.Stat."
    "HotPointStat.HotPointStatType\0224\n\010hotPoin"
    "t\030\002 \001(\0132\".TvWall.Packet.ElementDat.HotPo"
    "int\"G\n\020HotPointStatType\022\n\n\006CREATE\020\000\022\n\n\006R"
    "EMOVE\020\001\022\t\n\005RESET\020\002\022\020\n\014RESET_SCREEN\020\003\032\207\002\n"
    "\nLayoutStat\022B\n\004type\030\001 \002(\01624.TvWall.Packe"
    "t.Notice.Stat.LayoutStat.LayoutStatType\022"
    ":\n\nservLayout\030\002 \003(\0132&.TvWall.Packet.Elem"
    "entDat.ServerLayout\022\025\n\rcurrentLayout\030\003 \001"
    "(\t\0222\n\002dy\030\004 \001(\0132&.TvWall.Packet.ElementDa"
    "t.ServerLayout\".\n\016LayoutStatType\022\007\n\003ADD\020"
    "\000\022\n\n\006REMOVE\020\001\022\007\n\003USE\020\002\032\335\002\n\016LayoutLoopSta"
    "t\022J\n\004type\030\001 \002(\0162<.TvWall.Packet.Notice.S"
    "tat.LayoutLoopStat.LayoutLoopStatType\022B\n"
    "\016servLayoutLoop\030\002 \003(\0132*.TvWall.Packet.El"
    "ementDat.ServerLayoutLoop\022\031\n\021currentLayo"
    "utLoop\030\004 \001(\t\022\014\n\004loop\030\005 \001(\r\0226\n\002dy\030\006 \001(\0132*"
    ".TvWall.Packet.ElementDat.ServerLayoutLo"
    "op\"Z\n\022LayoutLoopStatType\022\007\n\003ADD\020\000\022\n\n\006REM"
    "OVE\020\001\022\016\n\nADD_LAYOUT\020\002\022\007\n\003USE\020\003\022\014\n\010SET_LO"
    "OP\020\004\022\010\n\004STOP\020\005\032\234\001\n\nMapGrpStat\022B\n\004type\030\001 "
    "\002(\01624.TvWall.Packet.Notice.Stat.MapGrpSt"
    "at.MapGrpStatType\022-\n\006mapGrp\030\002 \003(\0132\035.TvWa"
    "ll.Packet.ElementDat.Map\"\033\n\016MapGrpStatTy"
    "pe\022\t\n\005RESET\020\000\032\032\n\tErrorStat\022\r\n\005error\030\001 \002("
    "\t\032X\n\024KeyboardSelectedStat\022\020\n\010screenId\030\001 "
    "\002(\005\022\036\n\010cameraId\030\002 \002(\0132\014.TvWall.Guid\022\016\n\006c"
    "ellid\030\003 \002(\005\0324\n\tAlarmStat\022\023\n\013alarmSource\030"
    "\001 \002(\t\022\022\n\nalarmClear\030\002 \002(\010\032\354\001\n\rGroupLoopS"
    "tat\022H\n\004type\030\001 \002(\0162:.TvWall.Packet.Notice"
    ".Stat.GroupLoopStat.GroupLoopStatType\0226\n"
    "\tgroupLoop\030\002 \002(\0132#.TvWall.Packet.Element"
    "Dat.GroupLoop\"Y\n\021GroupLoopStatType\022\007\n\003AL"
    "L\020\000\022\016\n\nFOCUS_AREA\020\001\022\017\n\013RESET_VIEWS\020\002\022\r\n\t"
    "LOOP_TIME\020\004\022\013\n\007ACTIVED\020\010\032\253\001\n\014NoticeMaste"
    "r\022E\n\007nmlyout\030\001 \002(\01324.TvWall.Packet.Notic"
    "e.NoticeMaster.NoticeMasterLyout\032T\n\021Noti"
    "ceMasterLyout\022\?\n\014masterLayout\030\001 \002(\0132).Tv"
    "Wall.Packet.ElementMaster.MasterLayout", 17758);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf/tvWall.proto", &protobuf_RegisterTypes);
  Rect::default_instance_ = new Rect();
  Point::default_instance_ = new Point();
  Guid::default_instance_ = new Guid();
  NetInterface::default_instance_ = new NetInterface();
  Network::default_instance_ = new Network();
  NVR::default_instance_ = new NVR();
  FMP::default_instance_ = new FMP();
  Packet::default_instance_ = new Packet();
  Packet_Session::default_instance_ = new Packet_Session();
  Packet_Session_Login::_default_version_ =
      new ::std::string("v1.0.0", 6);
  Packet_Session_Login::_default_encryption_ =
      new ::std::string("md5", 3);
  Packet_Session_Login::default_instance_ = new Packet_Session_Login();
  Packet_Session_LoginAck::_default_version_ =
      new ::std::string("v1.0.0", 6);
  Packet_Session_LoginAck::default_instance_ = new Packet_Session_LoginAck();
  Packet_Session_LoginMasterAck::default_instance_ = new Packet_Session_LoginMasterAck();
  Packet_Session_LoginMasterAck_Server::default_instance_ = new Packet_Session_LoginMasterAck_Server();
  Packet_Session_Logout::default_instance_ = new Packet_Session_Logout();
  Packet_Session_LogoutAck::default_instance_ = new Packet_Session_LogoutAck();
  Packet_Session_Ping::default_instance_ = new Packet_Session_Ping();
  Packet_Session_PingAck::default_instance_ = new Packet_Session_PingAck();
  Packet_ElementDat::default_instance_ = new Packet_ElementDat();
  Packet_ElementDat_Screen::default_instance_ = new Packet_ElementDat_Screen();
  Packet_ElementDat_Camera::default_instance_ = new Packet_ElementDat_Camera();
  Packet_ElementDat_Camera_CameraInfo::default_instance_ = new Packet_ElementDat_Camera_CameraInfo();
  Packet_ElementDat_Camera_RecordInfo::default_instance_ = new Packet_ElementDat_Camera_RecordInfo();
  Packet_ElementDat_CameraGrp::default_instance_ = new Packet_ElementDat_CameraGrp();
  Packet_ElementDat_LocalMovie::default_instance_ = new Packet_ElementDat_LocalMovie();
  Packet_ElementDat_Flash::default_instance_ = new Packet_ElementDat_Flash();
  Packet_ElementDat_View::default_instance_ = new Packet_ElementDat_View();
  Packet_ElementDat_FocusPoint::default_instance_ = new Packet_ElementDat_FocusPoint();
  Packet_ElementDat_HotPoint::default_instance_ = new Packet_ElementDat_HotPoint();
  Packet_ElementDat_ServerLayout::default_instance_ = new Packet_ElementDat_ServerLayout();
  Packet_ElementDat_ServerLayoutLoop::default_instance_ = new Packet_ElementDat_ServerLayoutLoop();
  Packet_ElementDat_Map::default_instance_ = new Packet_ElementDat_Map();
  Packet_ElementDat_GroupLoop::default_instance_ = new Packet_ElementDat_GroupLoop();
  Packet_ElementMaster::default_instance_ = new Packet_ElementMaster();
  Packet_ElementMaster_MasterLayout::default_instance_ = new Packet_ElementMaster_MasterLayout();
  Packet_ElementMaster_MasterLayout_ServerPos::default_instance_ = new Packet_ElementMaster_MasterLayout_ServerPos();
  Packet_ElementMaster_MasterLayout_MasLayout::default_instance_ = new Packet_ElementMaster_MasterLayout_MasLayout();
  Packet_Ctrl::default_instance_ = new Packet_Ctrl();
  Packet_Ctrl_ScreenSplitCtrl::default_instance_ = new Packet_Ctrl_ScreenSplitCtrl();
  Packet_Ctrl_ViewCtrl::default_instance_ = new Packet_Ctrl_ViewCtrl();
  Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::default_instance_ = new Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl();
  Packet_Ctrl_ViewCtrl_VideoCtrl::default_instance_ = new Packet_Ctrl_ViewCtrl_VideoCtrl();
  Packet_Ctrl_ViewCtrl_RecordCtrl::default_instance_ = new Packet_Ctrl_ViewCtrl_RecordCtrl();
  Packet_Ctrl_ViewCtrl_FlashCtrl::default_instance_ = new Packet_Ctrl_ViewCtrl_FlashCtrl();
  Packet_Ctrl_ViewCtrl_HTMLCtrl::default_instance_ = new Packet_Ctrl_ViewCtrl_HTMLCtrl();
  Packet_Ctrl_ViewCtrl_LocalMovieCtrl::default_instance_ = new Packet_Ctrl_ViewCtrl_LocalMovieCtrl();
  Packet_Ctrl_ViewCtrl_TextCtrl::default_instance_ = new Packet_Ctrl_ViewCtrl_TextCtrl();
  Packet_Ctrl_ViewCtrl_MapCtrl::default_instance_ = new Packet_Ctrl_ViewCtrl_MapCtrl();
  Packet_Ctrl_ViewCtrl_OthersCtrl::default_instance_ = new Packet_Ctrl_ViewCtrl_OthersCtrl();
  Packet_Ctrl_CameraCtrl::default_instance_ = new Packet_Ctrl_CameraCtrl();
  Packet_Ctrl_HotPointCtrl::default_instance_ = new Packet_Ctrl_HotPointCtrl();
  Packet_Ctrl_LayoutCtrl::default_instance_ = new Packet_Ctrl_LayoutCtrl();
  Packet_Ctrl_LayoutLoopCtrl::default_instance_ = new Packet_Ctrl_LayoutLoopCtrl();
  Packet_Ctrl_CtrlMaster::default_instance_ = new Packet_Ctrl_CtrlMaster();
  Packet_Ctrl_CtrlMaster_CtrlMasterLyout::default_instance_ = new Packet_Ctrl_CtrlMaster_CtrlMasterLyout();
  Packet_Ctrl_MachineCtrl::default_instance_ = new Packet_Ctrl_MachineCtrl();
  Packet_Ctrl_KeyCtrl::default_instance_ = new Packet_Ctrl_KeyCtrl();
  Packet_Ctrl_KeyCmdCtrl::default_instance_ = new Packet_Ctrl_KeyCmdCtrl();
  Packet_Ctrl_AlarmCtrl::default_instance_ = new Packet_Ctrl_AlarmCtrl();
  Packet_Ctrl_SyncClockCtrl::default_instance_ = new Packet_Ctrl_SyncClockCtrl();
  Packet_Ctrl_TextContextCtrl::default_instance_ = new Packet_Ctrl_TextContextCtrl();
  Packet_Ctrl_GroupLoopCtrl::default_instance_ = new Packet_Ctrl_GroupLoopCtrl();
  Packet_RequireSession::default_instance_ = new Packet_RequireSession();
  Packet_RequireSession_ClientRequire::default_instance_ = new Packet_RequireSession_ClientRequire();
  Packet_RequireSession_ClientRequireAck::default_instance_ = new Packet_RequireSession_ClientRequireAck();
  Packet_RequireSession_LocalMovieSession::default_instance_ = new Packet_RequireSession_LocalMovieSession();
  Packet_RequireSession_LocalMovieSessionAck::default_instance_ = new Packet_RequireSession_LocalMovieSessionAck();
  Packet_RequireSession_RecordRequire::default_instance_ = new Packet_RequireSession_RecordRequire();
  Packet_RequireSession_RecordRequireAck::default_instance_ = new Packet_RequireSession_RecordRequireAck();
  Packet_RequireSession_NetRequire::default_instance_ = new Packet_RequireSession_NetRequire();
  Packet_RequireSession_NetRequireAck::default_instance_ = new Packet_RequireSession_NetRequireAck();
  Packet_Notice::default_instance_ = new Packet_Notice();
  Packet_Notice_Stat::default_instance_ = new Packet_Notice_Stat();
  Packet_Notice_Stat_ScreenSpliStat::default_instance_ = new Packet_Notice_Stat_ScreenSpliStat();
  Packet_Notice_Stat_ViewStat::default_instance_ = new Packet_Notice_Stat_ViewStat();
  Packet_Notice_Stat_ViewStat_ViewGeomotryStat::default_instance_ = new Packet_Notice_Stat_ViewStat_ViewGeomotryStat();
  Packet_Notice_Stat_ViewStat_VideoStat::default_instance_ = new Packet_Notice_Stat_ViewStat_VideoStat();
  Packet_Notice_Stat_ViewStat_RecordStat::default_instance_ = new Packet_Notice_Stat_ViewStat_RecordStat();
  Packet_Notice_Stat_ViewStat_LocalMovieStat::default_instance_ = new Packet_Notice_Stat_ViewStat_LocalMovieStat();
  Packet_Notice_Stat_ViewStat_FlashStat::default_instance_ = new Packet_Notice_Stat_ViewStat_FlashStat();
  Packet_Notice_Stat_ViewStat_HTMLStat::default_instance_ = new Packet_Notice_Stat_ViewStat_HTMLStat();
  Packet_Notice_Stat_ViewStat_TextStat::default_instance_ = new Packet_Notice_Stat_ViewStat_TextStat();
  Packet_Notice_Stat_ViewStat_MapStat::default_instance_ = new Packet_Notice_Stat_ViewStat_MapStat();
  Packet_Notice_Stat_ViewStat_OthersStat::default_instance_ = new Packet_Notice_Stat_ViewStat_OthersStat();
  Packet_Notice_Stat_CameraStat::default_instance_ = new Packet_Notice_Stat_CameraStat();
  Packet_Notice_Stat_HotPointStat::default_instance_ = new Packet_Notice_Stat_HotPointStat();
  Packet_Notice_Stat_LayoutStat::default_instance_ = new Packet_Notice_Stat_LayoutStat();
  Packet_Notice_Stat_LayoutLoopStat::default_instance_ = new Packet_Notice_Stat_LayoutLoopStat();
  Packet_Notice_Stat_MapGrpStat::default_instance_ = new Packet_Notice_Stat_MapGrpStat();
  Packet_Notice_Stat_ErrorStat::default_instance_ = new Packet_Notice_Stat_ErrorStat();
  Packet_Notice_Stat_KeyboardSelectedStat::default_instance_ = new Packet_Notice_Stat_KeyboardSelectedStat();
  Packet_Notice_Stat_AlarmStat::default_instance_ = new Packet_Notice_Stat_AlarmStat();
  Packet_Notice_Stat_GroupLoopStat::default_instance_ = new Packet_Notice_Stat_GroupLoopStat();
  Packet_Notice_NoticeMaster::default_instance_ = new Packet_Notice_NoticeMaster();
  Packet_Notice_NoticeMaster_NoticeMasterLyout::default_instance_ = new Packet_Notice_NoticeMaster_NoticeMasterLyout();
  Rect::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Guid::default_instance_->InitAsDefaultInstance();
  NetInterface::default_instance_->InitAsDefaultInstance();
  Network::default_instance_->InitAsDefaultInstance();
  NVR::default_instance_->InitAsDefaultInstance();
  FMP::default_instance_->InitAsDefaultInstance();
  Packet::default_instance_->InitAsDefaultInstance();
  Packet_Session::default_instance_->InitAsDefaultInstance();
  Packet_Session_Login::default_instance_->InitAsDefaultInstance();
  Packet_Session_LoginAck::default_instance_->InitAsDefaultInstance();
  Packet_Session_LoginMasterAck::default_instance_->InitAsDefaultInstance();
  Packet_Session_LoginMasterAck_Server::default_instance_->InitAsDefaultInstance();
  Packet_Session_Logout::default_instance_->InitAsDefaultInstance();
  Packet_Session_LogoutAck::default_instance_->InitAsDefaultInstance();
  Packet_Session_Ping::default_instance_->InitAsDefaultInstance();
  Packet_Session_PingAck::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_Screen::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_Camera::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_Camera_CameraInfo::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_Camera_RecordInfo::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_CameraGrp::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_LocalMovie::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_Flash::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_View::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_FocusPoint::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_HotPoint::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_ServerLayout::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_ServerLayoutLoop::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_Map::default_instance_->InitAsDefaultInstance();
  Packet_ElementDat_GroupLoop::default_instance_->InitAsDefaultInstance();
  Packet_ElementMaster::default_instance_->InitAsDefaultInstance();
  Packet_ElementMaster_MasterLayout::default_instance_->InitAsDefaultInstance();
  Packet_ElementMaster_MasterLayout_ServerPos::default_instance_->InitAsDefaultInstance();
  Packet_ElementMaster_MasterLayout_MasLayout::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ScreenSplitCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ViewCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ViewCtrl_VideoCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ViewCtrl_RecordCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ViewCtrl_FlashCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ViewCtrl_HTMLCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ViewCtrl_LocalMovieCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ViewCtrl_TextCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ViewCtrl_MapCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_ViewCtrl_OthersCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_CameraCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_HotPointCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_LayoutCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_LayoutLoopCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_CtrlMaster::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_CtrlMaster_CtrlMasterLyout::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_MachineCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_KeyCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_KeyCmdCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_AlarmCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_SyncClockCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_TextContextCtrl::default_instance_->InitAsDefaultInstance();
  Packet_Ctrl_GroupLoopCtrl::default_instance_->InitAsDefaultInstance();
  Packet_RequireSession::default_instance_->InitAsDefaultInstance();
  Packet_RequireSession_ClientRequire::default_instance_->InitAsDefaultInstance();
  Packet_RequireSession_ClientRequireAck::default_instance_->InitAsDefaultInstance();
  Packet_RequireSession_LocalMovieSession::default_instance_->InitAsDefaultInstance();
  Packet_RequireSession_LocalMovieSessionAck::default_instance_->InitAsDefaultInstance();
  Packet_RequireSession_RecordRequire::default_instance_->InitAsDefaultInstance();
  Packet_RequireSession_RecordRequireAck::default_instance_->InitAsDefaultInstance();
  Packet_RequireSession_NetRequire::default_instance_->InitAsDefaultInstance();
  Packet_RequireSession_NetRequireAck::default_instance_->InitAsDefaultInstance();
  Packet_Notice::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ScreenSpliStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ViewStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ViewStat_ViewGeomotryStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ViewStat_VideoStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ViewStat_RecordStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ViewStat_LocalMovieStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ViewStat_FlashStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ViewStat_HTMLStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ViewStat_TextStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ViewStat_MapStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ViewStat_OthersStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_CameraStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_HotPointStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_LayoutStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_LayoutLoopStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_MapGrpStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_ErrorStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_KeyboardSelectedStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_AlarmStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_Stat_GroupLoopStat::default_instance_->InitAsDefaultInstance();
  Packet_Notice_NoticeMaster::default_instance_->InitAsDefaultInstance();
  Packet_Notice_NoticeMaster_NoticeMasterLyout::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobuf_2ftvWall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobuf_2ftvWall_2eproto {
  StaticDescriptorInitializer_protobuf_2ftvWall_2eproto() {
    protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  }
} static_descriptor_initializer_protobuf_2ftvWall_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Rect::kXFieldNumber;
const int Rect::kYFieldNumber;
const int Rect::kWFieldNumber;
const int Rect::kHFieldNumber;
#endif  // !_MSC_VER

Rect::Rect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rect::InitAsDefaultInstance() {
}

Rect::Rect(const Rect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rect::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  w_ = 0;
  h_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rect::~Rect() {
  SharedDtor();
}

void Rect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect_descriptor_;
}

const Rect& Rect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Rect* Rect::default_instance_ = NULL;

Rect* Rect::New() const {
  return new Rect;
}

void Rect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    w_ = 0;
    h_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_w;
        break;
      }

      // required int32 w = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_h;
        break;
      }

      // required int32 h = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 w = 3;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->w(), output);
  }

  // required int32 h = 4;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->h(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 w = 3;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->w(), target);
  }

  // required int32 h = 4;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->h(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 w = 3;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 4;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Rect::Swap(Rect* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect_descriptor_;
  metadata.reflection = Rect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Guid::kDataFieldNumber;
#endif  // !_MSC_VER

Guid::Guid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Guid::InitAsDefaultInstance() {
}

Guid::Guid(const Guid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Guid::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Guid::~Guid() {
  SharedDtor();
}

void Guid::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Guid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Guid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Guid_descriptor_;
}

const Guid& Guid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Guid* Guid::default_instance_ = NULL;

Guid* Guid::New() const {
  return new Guid;
}

void Guid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Guid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Guid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Guid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Guid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Guid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Guid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Guid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Guid::MergeFrom(const Guid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Guid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Guid::CopyFrom(const Guid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Guid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Guid::Swap(Guid* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Guid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Guid_descriptor_;
  metadata.reflection = Guid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetInterface::kIfnameFieldNumber;
const int NetInterface::kIpFieldNumber;
const int NetInterface::kNetmaskFieldNumber;
const int NetInterface::kEnabledFieldNumber;
const int NetInterface::kPlugFieldNumber;
const int NetInterface::kSpeedFieldNumber;
const int NetInterface::kDhcpFieldNumber;
#endif  // !_MSC_VER

NetInterface::NetInterface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetInterface::InitAsDefaultInstance() {
}

NetInterface::NetInterface(const NetInterface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetInterface::SharedCtor() {
  _cached_size_ = 0;
  ifname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netmask_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabled_ = false;
  plug_ = false;
  speed_ = 1000;
  dhcp_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetInterface::~NetInterface() {
  SharedDtor();
}

void NetInterface::SharedDtor() {
  if (ifname_ != &::google::protobuf::internal::kEmptyString) {
    delete ifname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (netmask_ != &::google::protobuf::internal::kEmptyString) {
    delete netmask_;
  }
  if (this != default_instance_) {
  }
}

void NetInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetInterface_descriptor_;
}

const NetInterface& NetInterface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

NetInterface* NetInterface::default_instance_ = NULL;

NetInterface* NetInterface::New() const {
  return new NetInterface;
}

void NetInterface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ifname()) {
      if (ifname_ != &::google::protobuf::internal::kEmptyString) {
        ifname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_netmask()) {
      if (netmask_ != &::google::protobuf::internal::kEmptyString) {
        netmask_->clear();
      }
    }
    enabled_ = false;
    plug_ = false;
    speed_ = 1000;
    dhcp_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ifname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ifname().data(), this->ifname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_netmask;
        break;
      }

      // required string netmask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netmask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netmask()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->netmask().data(), this->netmask().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_plug;
        break;
      }

      // optional bool plug = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &plug_)));
          set_has_plug();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional int32 speed = 6 [default = 1000];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dhcp;
        break;
      }

      // optional bool dhcp = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dhcp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dhcp_)));
          set_has_dhcp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ifname = 1;
  if (has_ifname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ifname().data(), this->ifname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ifname(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required string netmask = 3;
  if (has_netmask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netmask().data(), this->netmask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->netmask(), output);
  }

  // optional bool enabled = 4;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enabled(), output);
  }

  // optional bool plug = 5;
  if (has_plug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->plug(), output);
  }

  // optional int32 speed = 6 [default = 1000];
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  // optional bool dhcp = 7 [default = false];
  if (has_dhcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->dhcp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetInterface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ifname = 1;
  if (has_ifname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ifname().data(), this->ifname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ifname(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required string netmask = 3;
  if (has_netmask()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netmask().data(), this->netmask().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->netmask(), target);
  }

  // optional bool enabled = 4;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enabled(), target);
  }

  // optional bool plug = 5;
  if (has_plug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->plug(), target);
  }

  // optional int32 speed = 6 [default = 1000];
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  // optional bool dhcp = 7 [default = false];
  if (has_dhcp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->dhcp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetInterface::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ifname = 1;
    if (has_ifname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifname());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string netmask = 3;
    if (has_netmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netmask());
    }

    // optional bool enabled = 4;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool plug = 5;
    if (has_plug()) {
      total_size += 1 + 1;
    }

    // optional int32 speed = 6 [default = 1000];
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional bool dhcp = 7 [default = false];
    if (has_dhcp()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetInterface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetInterface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetInterface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetInterface::MergeFrom(const NetInterface& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ifname()) {
      set_ifname(from.ifname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_netmask()) {
      set_netmask(from.netmask());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_plug()) {
      set_plug(from.plug());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_dhcp()) {
      set_dhcp(from.dhcp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetInterface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetInterface::CopyFrom(const NetInterface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInterface::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NetInterface::Swap(NetInterface* other) {
  if (other != this) {
    std::swap(ifname_, other->ifname_);
    std::swap(ip_, other->ip_);
    std::swap(netmask_, other->netmask_);
    std::swap(enabled_, other->enabled_);
    std::swap(plug_, other->plug_);
    std::swap(speed_, other->speed_);
    std::swap(dhcp_, other->dhcp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetInterface_descriptor_;
  metadata.reflection = NetInterface_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Network::kHostNameFieldNumber;
const int Network::kGatewayFieldNumber;
const int Network::kGateway6FieldNumber;
const int Network::kGwdevFieldNumber;
const int Network::kNatFieldNumber;
const int Network::kDnsFieldNumber;
const int Network::kInterfacesFieldNumber;
#endif  // !_MSC_VER

Network::Network()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Network::InitAsDefaultInstance() {
}

Network::Network(const Network& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Network::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateway6_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gwdev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dns_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Network::~Network() {
  SharedDtor();
}

void Network::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (gateway_ != &::google::protobuf::internal::kEmptyString) {
    delete gateway_;
  }
  if (gateway6_ != &::google::protobuf::internal::kEmptyString) {
    delete gateway6_;
  }
  if (gwdev_ != &::google::protobuf::internal::kEmptyString) {
    delete gwdev_;
  }
  if (nat_ != &::google::protobuf::internal::kEmptyString) {
    delete nat_;
  }
  if (dns_ != &::google::protobuf::internal::kEmptyString) {
    delete dns_;
  }
  if (this != default_instance_) {
  }
}

void Network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Network::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Network_descriptor_;
}

const Network& Network::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Network* Network::default_instance_ = NULL;

Network* Network::New() const {
  return new Network;
}

void Network::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_gateway()) {
      if (gateway_ != &::google::protobuf::internal::kEmptyString) {
        gateway_->clear();
      }
    }
    if (has_gateway6()) {
      if (gateway6_ != &::google::protobuf::internal::kEmptyString) {
        gateway6_->clear();
      }
    }
    if (has_gwdev()) {
      if (gwdev_ != &::google::protobuf::internal::kEmptyString) {
        gwdev_->clear();
      }
    }
    if (has_nat()) {
      if (nat_ != &::google::protobuf::internal::kEmptyString) {
        nat_->clear();
      }
    }
    if (has_dns()) {
      if (dns_ != &::google::protobuf::internal::kEmptyString) {
        dns_->clear();
      }
    }
  }
  interfaces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gateway;
        break;
      }

      // optional string gateway = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateway:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateway().data(), this->gateway().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gateway6;
        break;
      }

      // optional string gateway6 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateway6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway6()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateway6().data(), this->gateway6().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gwdev;
        break;
      }

      // optional string gwdev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gwdev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gwdev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gwdev().data(), this->gwdev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nat;
        break;
      }

      // optional string nat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nat().data(), this->nat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dns;
        break;
      }

      // optional string dns = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dns()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dns().data(), this->dns().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_interfaces;
        break;
      }

      // repeated .TvWall.NetInterface interfaces = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interfaces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_interfaces;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostName = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // optional string gateway = 2;
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gateway(), output);
  }

  // optional string gateway6 = 3;
  if (has_gateway6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateway6().data(), this->gateway6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gateway6(), output);
  }

  // optional string gwdev = 4;
  if (has_gwdev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gwdev().data(), this->gwdev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gwdev(), output);
  }

  // optional string nat = 5;
  if (has_nat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nat().data(), this->nat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nat(), output);
  }

  // optional string dns = 6;
  if (has_dns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dns().data(), this->dns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dns(), output);
  }

  // repeated .TvWall.NetInterface interfaces = 7;
  for (int i = 0; i < this->interfaces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->interfaces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Network::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostName = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional string gateway = 2;
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gateway(), target);
  }

  // optional string gateway6 = 3;
  if (has_gateway6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateway6().data(), this->gateway6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gateway6(), target);
  }

  // optional string gwdev = 4;
  if (has_gwdev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gwdev().data(), this->gwdev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gwdev(), target);
  }

  // optional string nat = 5;
  if (has_nat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nat().data(), this->nat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nat(), target);
  }

  // optional string dns = 6;
  if (has_dns()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dns().data(), this->dns().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dns(), target);
  }

  // repeated .TvWall.NetInterface interfaces = 7;
  for (int i = 0; i < this->interfaces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->interfaces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Network::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostName = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string gateway = 2;
    if (has_gateway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateway());
    }

    // optional string gateway6 = 3;
    if (has_gateway6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateway6());
    }

    // optional string gwdev = 4;
    if (has_gwdev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gwdev());
    }

    // optional string nat = 5;
    if (has_nat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nat());
    }

    // optional string dns = 6;
    if (has_dns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dns());
    }

  }
  // repeated .TvWall.NetInterface interfaces = 7;
  total_size += 1 * this->interfaces_size();
  for (int i = 0; i < this->interfaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interfaces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Network::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Network* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Network*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Network::MergeFrom(const Network& from) {
  GOOGLE_CHECK_NE(&from, this);
  interfaces_.MergeFrom(from.interfaces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_gateway()) {
      set_gateway(from.gateway());
    }
    if (from.has_gateway6()) {
      set_gateway6(from.gateway6());
    }
    if (from.has_gwdev()) {
      set_gwdev(from.gwdev());
    }
    if (from.has_nat()) {
      set_nat(from.nat());
    }
    if (from.has_dns()) {
      set_dns(from.dns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Network::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Network::CopyFrom(const Network& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < interfaces_size(); i++) {
    if (!this->interfaces(i).IsInitialized()) return false;
  }
  return true;
}

void Network::Swap(Network* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(gateway_, other->gateway_);
    std::swap(gateway6_, other->gateway6_);
    std::swap(gwdev_, other->gwdev_);
    std::swap(nat_, other->nat_);
    std::swap(dns_, other->dns_);
    interfaces_.Swap(&other->interfaces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Network::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Network_descriptor_;
  metadata.reflection = Network_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NVR::kIpFieldNumber;
const int NVR::kUserNameFieldNumber;
const int NVR::kPasswordFieldNumber;
const int NVR::kConnectedFieldNumber;
#endif  // !_MSC_VER

NVR::NVR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NVR::InitAsDefaultInstance() {
}

NVR::NVR(const NVR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NVR::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connected_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NVR::~NVR() {
  SharedDtor();
}

void NVR::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void NVR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NVR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NVR_descriptor_;
}

const NVR& NVR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

NVR* NVR::default_instance_ = NULL;

NVR* NVR::New() const {
  return new NVR;
}

void NVR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    connected_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NVR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }

      // required string userName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_connected;
        break;
      }

      // optional bool connected = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
          set_has_connected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NVR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional bool connected = 4;
  if (has_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->connected(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NVR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional bool connected = 4;
  if (has_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->connected(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NVR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string userName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bool connected = 4;
    if (has_connected()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NVR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NVR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NVR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NVR::MergeFrom(const NVR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_connected()) {
      set_connected(from.connected());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NVR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NVR::CopyFrom(const NVR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NVR::Swap(NVR* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(connected_, other->connected_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NVR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NVR_descriptor_;
  metadata.reflection = NVR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMP::kIpFieldNumber;
const int FMP::kUserNameFieldNumber;
const int FMP::kPasswordFieldNumber;
#endif  // !_MSC_VER

FMP::FMP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMP::InitAsDefaultInstance() {
}

FMP::FMP(const FMP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMP::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMP::~FMP() {
  SharedDtor();
}

void FMP::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void FMP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMP_descriptor_;
}

const FMP& FMP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

FMP* FMP::default_instance_ = NULL;

FMP* FMP::New() const {
  return new FMP;
}

void FMP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }

      // required string userName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string userName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMP::MergeFrom(const FMP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMP::CopyFrom(const FMP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FMP::Swap(FMP* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMP_descriptor_;
  metadata.reflection = FMP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Packet_Session_LogoutReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Session_LogoutReasonType_descriptor_;
}
bool Packet_Session_LogoutReasonType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Session_LogoutReasonType Packet_Session::USER_LOGOUT;
const Packet_Session_LogoutReasonType Packet_Session::LogoutReasonType_MIN;
const Packet_Session_LogoutReasonType Packet_Session::LogoutReasonType_MAX;
const int Packet_Session::LogoutReasonType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Packet_Session_Login::_default_version_ = NULL;
::std::string* Packet_Session_Login::_default_encryption_ = NULL;
#ifndef _MSC_VER
const int Packet_Session_Login::kVersionFieldNumber;
const int Packet_Session_Login::kUserNameFieldNumber;
const int Packet_Session_Login::kPasswdFieldNumber;
const int Packet_Session_Login::kEncryptionFieldNumber;
const int Packet_Session_Login::kTokenFieldNumber;
const int Packet_Session_Login::kIsMasterFieldNumber;
#endif  // !_MSC_VER

Packet_Session_Login::Packet_Session_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Session_Login::InitAsDefaultInstance() {
}

Packet_Session_Login::Packet_Session_Login(const Packet_Session_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Session_Login::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(_default_version_);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encryption_ = const_cast< ::std::string*>(_default_encryption_);
  token_ = 0;
  ismaster_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Session_Login::~Packet_Session_Login() {
  SharedDtor();
}

void Packet_Session_Login::SharedDtor() {
  if (version_ != _default_version_) {
    delete version_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (encryption_ != _default_encryption_) {
    delete encryption_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Session_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Session_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Session_Login_descriptor_;
}

const Packet_Session_Login& Packet_Session_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Session_Login* Packet_Session_Login::default_instance_ = NULL;

Packet_Session_Login* Packet_Session_Login::New() const {
  return new Packet_Session_Login;
}

void Packet_Session_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != _default_version_) {
        version_->assign(*_default_version_);
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    if (has_encryption()) {
      if (encryption_ != _default_encryption_) {
        encryption_->assign(*_default_encryption_);
      }
    }
    token_ = 0;
    ismaster_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Session_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1 [default = "v1.0.0"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userName;
        break;
      }

      // optional string userName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }

      // optional string passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_encryption;
        break;
      }

      // optional string encryption = 4 [default = "md5"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encryption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryption()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->encryption().data(), this->encryption().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_token;
        break;
      }

      // optional int32 token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isMaster;
        break;
      }

      // optional bool isMaster = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismaster_)));
          set_has_ismaster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Session_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1 [default = "v1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  // optional string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passwd(), output);
  }

  // optional string encryption = 4 [default = "md5"];
  if (has_encryption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encryption().data(), this->encryption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->encryption(), output);
  }

  // optional int32 token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->token(), output);
  }

  // optional bool isMaster = 6;
  if (has_ismaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ismaster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Session_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1 [default = "v1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string userName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }

  // optional string encryption = 4 [default = "md5"];
  if (has_encryption()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encryption().data(), this->encryption().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->encryption(), target);
  }

  // optional int32 token = 5;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->token(), target);
  }

  // optional bool isMaster = 6;
  if (has_ismaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ismaster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Session_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1 [default = "v1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string userName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // optional string encryption = 4 [default = "md5"];
    if (has_encryption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryption());
    }

    // optional int32 token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token());
    }

    // optional bool isMaster = 6;
    if (has_ismaster()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Session_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Session_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Session_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Session_Login::MergeFrom(const Packet_Session_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_encryption()) {
      set_encryption(from.encryption());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_ismaster()) {
      set_ismaster(from.ismaster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Session_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Session_Login::CopyFrom(const Packet_Session_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Session_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_Session_Login::Swap(Packet_Session_Login* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(username_, other->username_);
    std::swap(passwd_, other->passwd_);
    std::swap(encryption_, other->encryption_);
    std::swap(token_, other->token_);
    std::swap(ismaster_, other->ismaster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Session_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Session_Login_descriptor_;
  metadata.reflection = Packet_Session_Login_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Packet_Session_LoginAck::_default_version_ = NULL;
#ifndef _MSC_VER
const int Packet_Session_LoginAck::kVersionFieldNumber;
const int Packet_Session_LoginAck::kResultFieldNumber;
const int Packet_Session_LoginAck::kSessionIdFieldNumber;
#endif  // !_MSC_VER

Packet_Session_LoginAck::Packet_Session_LoginAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Session_LoginAck::InitAsDefaultInstance() {
}

Packet_Session_LoginAck::Packet_Session_LoginAck(const Packet_Session_LoginAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Session_LoginAck::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(_default_version_);
  result_ = 0;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Session_LoginAck::~Packet_Session_LoginAck() {
  SharedDtor();
}

void Packet_Session_LoginAck::SharedDtor() {
  if (version_ != _default_version_) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Session_LoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Session_LoginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Session_LoginAck_descriptor_;
}

const Packet_Session_LoginAck& Packet_Session_LoginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Session_LoginAck* Packet_Session_LoginAck::default_instance_ = NULL;

Packet_Session_LoginAck* Packet_Session_LoginAck::New() const {
  return new Packet_Session_LoginAck;
}

void Packet_Session_LoginAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != _default_version_) {
        version_->assign(*_default_version_);
      }
    }
    result_ = 0;
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Session_LoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1 [default = "v1.0.0"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sessionId;
        break;
      }

      // optional int32 sessionId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Session_LoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1 [default = "v1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 sessionId = 3;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Session_LoginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1 [default = "v1.0.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 sessionId = 3;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Session_LoginAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1 [default = "v1.0.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 sessionId = 3;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Session_LoginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Session_LoginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Session_LoginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Session_LoginAck::MergeFrom(const Packet_Session_LoginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Session_LoginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Session_LoginAck::CopyFrom(const Packet_Session_LoginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Session_LoginAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Session_LoginAck::Swap(Packet_Session_LoginAck* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(result_, other->result_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Session_LoginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Session_LoginAck_descriptor_;
  metadata.reflection = Packet_Session_LoginAck_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Session_LoginMasterAck_Server::kPeerFieldNumber;
const int Packet_Session_LoginMasterAck_Server::kLoginFieldNumber;
const int Packet_Session_LoginMasterAck_Server::kServerNameFieldNumber;
#endif  // !_MSC_VER

Packet_Session_LoginMasterAck_Server::Packet_Session_LoginMasterAck_Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Session_LoginMasterAck_Server::InitAsDefaultInstance() {
  login_ = const_cast< ::TvWall::Packet_Session_Login*>(&::TvWall::Packet_Session_Login::default_instance());
}

Packet_Session_LoginMasterAck_Server::Packet_Session_LoginMasterAck_Server(const Packet_Session_LoginMasterAck_Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Session_LoginMasterAck_Server::SharedCtor() {
  _cached_size_ = 0;
  peer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  login_ = NULL;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Session_LoginMasterAck_Server::~Packet_Session_LoginMasterAck_Server() {
  SharedDtor();
}

void Packet_Session_LoginMasterAck_Server::SharedDtor() {
  if (peer_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
    delete login_;
  }
}

void Packet_Session_LoginMasterAck_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Session_LoginMasterAck_Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Session_LoginMasterAck_Server_descriptor_;
}

const Packet_Session_LoginMasterAck_Server& Packet_Session_LoginMasterAck_Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Session_LoginMasterAck_Server* Packet_Session_LoginMasterAck_Server::default_instance_ = NULL;

Packet_Session_LoginMasterAck_Server* Packet_Session_LoginMasterAck_Server::New() const {
  return new Packet_Session_LoginMasterAck_Server;
}

void Packet_Session_LoginMasterAck_Server::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_peer()) {
      if (peer_ != &::google::protobuf::internal::kEmptyString) {
        peer_->clear();
      }
    }
    if (has_login()) {
      if (login_ != NULL) login_->::TvWall::Packet_Session_Login::Clear();
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Session_LoginMasterAck_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string peer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer().data(), this->peer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_login;
        break;
      }

      // optional .TvWall.Packet.Session.Login login = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_serverName;
        break;
      }

      // optional string serverName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Session_LoginMasterAck_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string peer = 1;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer().data(), this->peer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->peer(), output);
  }

  // optional .TvWall.Packet.Session.Login login = 3;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->login(), output);
  }

  // optional string serverName = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Session_LoginMasterAck_Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string peer = 1;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer().data(), this->peer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->peer(), target);
  }

  // optional .TvWall.Packet.Session.Login login = 3;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->login(), target);
  }

  // optional string serverName = 4;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Session_LoginMasterAck_Server::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string peer = 1;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer());
    }

    // optional .TvWall.Packet.Session.Login login = 3;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional string serverName = 4;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Session_LoginMasterAck_Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Session_LoginMasterAck_Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Session_LoginMasterAck_Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Session_LoginMasterAck_Server::MergeFrom(const Packet_Session_LoginMasterAck_Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peer()) {
      set_peer(from.peer());
    }
    if (from.has_login()) {
      mutable_login()->::TvWall::Packet_Session_Login::MergeFrom(from.login());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Session_LoginMasterAck_Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Session_LoginMasterAck_Server::CopyFrom(const Packet_Session_LoginMasterAck_Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Session_LoginMasterAck_Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  return true;
}

void Packet_Session_LoginMasterAck_Server::Swap(Packet_Session_LoginMasterAck_Server* other) {
  if (other != this) {
    std::swap(peer_, other->peer_);
    std::swap(login_, other->login_);
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Session_LoginMasterAck_Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Session_LoginMasterAck_Server_descriptor_;
  metadata.reflection = Packet_Session_LoginMasterAck_Server_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Session_LoginMasterAck::kLoginAckFieldNumber;
const int Packet_Session_LoginMasterAck::kTokenFieldNumber;
const int Packet_Session_LoginMasterAck::kSerFieldNumber;
const int Packet_Session_LoginMasterAck::kLyoutFieldNumber;
#endif  // !_MSC_VER

Packet_Session_LoginMasterAck::Packet_Session_LoginMasterAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Session_LoginMasterAck::InitAsDefaultInstance() {
  loginack_ = const_cast< ::TvWall::Packet_Session_LoginAck*>(&::TvWall::Packet_Session_LoginAck::default_instance());
  lyout_ = const_cast< ::TvWall::Packet_ElementMaster_MasterLayout*>(&::TvWall::Packet_ElementMaster_MasterLayout::default_instance());
}

Packet_Session_LoginMasterAck::Packet_Session_LoginMasterAck(const Packet_Session_LoginMasterAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Session_LoginMasterAck::SharedCtor() {
  _cached_size_ = 0;
  loginack_ = NULL;
  token_ = 0;
  lyout_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Session_LoginMasterAck::~Packet_Session_LoginMasterAck() {
  SharedDtor();
}

void Packet_Session_LoginMasterAck::SharedDtor() {
  if (this != default_instance_) {
    delete loginack_;
    delete lyout_;
  }
}

void Packet_Session_LoginMasterAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Session_LoginMasterAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Session_LoginMasterAck_descriptor_;
}

const Packet_Session_LoginMasterAck& Packet_Session_LoginMasterAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Session_LoginMasterAck* Packet_Session_LoginMasterAck::default_instance_ = NULL;

Packet_Session_LoginMasterAck* Packet_Session_LoginMasterAck::New() const {
  return new Packet_Session_LoginMasterAck;
}

void Packet_Session_LoginMasterAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loginack()) {
      if (loginack_ != NULL) loginack_->::TvWall::Packet_Session_LoginAck::Clear();
    }
    token_ = 0;
    if (has_lyout()) {
      if (lyout_ != NULL) lyout_->::TvWall::Packet_ElementMaster_MasterLayout::Clear();
    }
  }
  ser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Session_LoginMasterAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Session.LoginAck loginAck = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_token;
        break;
      }

      // required int32 token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ser;
        break;
      }

      // repeated .TvWall.Packet.Session.LoginMasterAck.Server ser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ser;
        if (input->ExpectTag(34)) goto parse_lyout;
        break;
      }

      // required .TvWall.Packet.ElementMaster.MasterLayout lyout = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lyout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lyout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Session_LoginMasterAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Session.LoginAck loginAck = 1;
  if (has_loginack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loginack(), output);
  }

  // required int32 token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->token(), output);
  }

  // repeated .TvWall.Packet.Session.LoginMasterAck.Server ser = 3;
  for (int i = 0; i < this->ser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ser(i), output);
  }

  // required .TvWall.Packet.ElementMaster.MasterLayout lyout = 4;
  if (has_lyout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lyout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Session_LoginMasterAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Session.LoginAck loginAck = 1;
  if (has_loginack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loginack(), target);
  }

  // required int32 token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->token(), target);
  }

  // repeated .TvWall.Packet.Session.LoginMasterAck.Server ser = 3;
  for (int i = 0; i < this->ser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ser(i), target);
  }

  // required .TvWall.Packet.ElementMaster.MasterLayout lyout = 4;
  if (has_lyout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lyout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Session_LoginMasterAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Session.LoginAck loginAck = 1;
    if (has_loginack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginack());
    }

    // required int32 token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token());
    }

    // required .TvWall.Packet.ElementMaster.MasterLayout lyout = 4;
    if (has_lyout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lyout());
    }

  }
  // repeated .TvWall.Packet.Session.LoginMasterAck.Server ser = 3;
  total_size += 1 * this->ser_size();
  for (int i = 0; i < this->ser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ser(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Session_LoginMasterAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Session_LoginMasterAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Session_LoginMasterAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Session_LoginMasterAck::MergeFrom(const Packet_Session_LoginMasterAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  ser_.MergeFrom(from.ser_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginack()) {
      mutable_loginack()->::TvWall::Packet_Session_LoginAck::MergeFrom(from.loginack());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_lyout()) {
      mutable_lyout()->::TvWall::Packet_ElementMaster_MasterLayout::MergeFrom(from.lyout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Session_LoginMasterAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Session_LoginMasterAck::CopyFrom(const Packet_Session_LoginMasterAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Session_LoginMasterAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_loginack()) {
    if (!this->loginack().IsInitialized()) return false;
  }
  for (int i = 0; i < ser_size(); i++) {
    if (!this->ser(i).IsInitialized()) return false;
  }
  if (has_lyout()) {
    if (!this->lyout().IsInitialized()) return false;
  }
  return true;
}

void Packet_Session_LoginMasterAck::Swap(Packet_Session_LoginMasterAck* other) {
  if (other != this) {
    std::swap(loginack_, other->loginack_);
    std::swap(token_, other->token_);
    ser_.Swap(&other->ser_);
    std::swap(lyout_, other->lyout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Session_LoginMasterAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Session_LoginMasterAck_descriptor_;
  metadata.reflection = Packet_Session_LoginMasterAck_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Session_Logout::kReasonFieldNumber;
#endif  // !_MSC_VER

Packet_Session_Logout::Packet_Session_Logout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Session_Logout::InitAsDefaultInstance() {
}

Packet_Session_Logout::Packet_Session_Logout(const Packet_Session_Logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Session_Logout::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Session_Logout::~Packet_Session_Logout() {
  SharedDtor();
}

void Packet_Session_Logout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Session_Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Session_Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Session_Logout_descriptor_;
}

const Packet_Session_Logout& Packet_Session_Logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Session_Logout* Packet_Session_Logout::default_instance_ = NULL;

Packet_Session_Logout* Packet_Session_Logout::New() const {
  return new Packet_Session_Logout;
}

void Packet_Session_Logout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Session_Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Session.LogoutReasonType reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Session_LogoutReasonType_IsValid(value)) {
            set_reason(static_cast< ::TvWall::Packet_Session_LogoutReasonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Session_Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Session.LogoutReasonType reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Session_Logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Session.LogoutReasonType reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Session_Logout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Session.LogoutReasonType reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Session_Logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Session_Logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Session_Logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Session_Logout::MergeFrom(const Packet_Session_Logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Session_Logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Session_Logout::CopyFrom(const Packet_Session_Logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Session_Logout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_Session_Logout::Swap(Packet_Session_Logout* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Session_Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Session_Logout_descriptor_;
  metadata.reflection = Packet_Session_Logout_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Packet_Session_LogoutAck::Packet_Session_LogoutAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Session_LogoutAck::InitAsDefaultInstance() {
}

Packet_Session_LogoutAck::Packet_Session_LogoutAck(const Packet_Session_LogoutAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Session_LogoutAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Session_LogoutAck::~Packet_Session_LogoutAck() {
  SharedDtor();
}

void Packet_Session_LogoutAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Session_LogoutAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Session_LogoutAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Session_LogoutAck_descriptor_;
}

const Packet_Session_LogoutAck& Packet_Session_LogoutAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Session_LogoutAck* Packet_Session_LogoutAck::default_instance_ = NULL;

Packet_Session_LogoutAck* Packet_Session_LogoutAck::New() const {
  return new Packet_Session_LogoutAck;
}

void Packet_Session_LogoutAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Session_LogoutAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Packet_Session_LogoutAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Session_LogoutAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Session_LogoutAck::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Session_LogoutAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Session_LogoutAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Session_LogoutAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Session_LogoutAck::MergeFrom(const Packet_Session_LogoutAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Session_LogoutAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Session_LogoutAck::CopyFrom(const Packet_Session_LogoutAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Session_LogoutAck::IsInitialized() const {

  return true;
}

void Packet_Session_LogoutAck::Swap(Packet_Session_LogoutAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Session_LogoutAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Session_LogoutAck_descriptor_;
  metadata.reflection = Packet_Session_LogoutAck_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Session_Ping::kNumFieldNumber;
#endif  // !_MSC_VER

Packet_Session_Ping::Packet_Session_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Session_Ping::InitAsDefaultInstance() {
}

Packet_Session_Ping::Packet_Session_Ping(const Packet_Session_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Session_Ping::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Session_Ping::~Packet_Session_Ping() {
  SharedDtor();
}

void Packet_Session_Ping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Session_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Session_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Session_Ping_descriptor_;
}

const Packet_Session_Ping& Packet_Session_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Session_Ping* Packet_Session_Ping::default_instance_ = NULL;

Packet_Session_Ping* Packet_Session_Ping::New() const {
  return new Packet_Session_Ping;
}

void Packet_Session_Ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Session_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Session_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Session_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Session_Ping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Session_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Session_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Session_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Session_Ping::MergeFrom(const Packet_Session_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Session_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Session_Ping::CopyFrom(const Packet_Session_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Session_Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_Session_Ping::Swap(Packet_Session_Ping* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Session_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Session_Ping_descriptor_;
  metadata.reflection = Packet_Session_Ping_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Session_PingAck::kNumFieldNumber;
#endif  // !_MSC_VER

Packet_Session_PingAck::Packet_Session_PingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Session_PingAck::InitAsDefaultInstance() {
}

Packet_Session_PingAck::Packet_Session_PingAck(const Packet_Session_PingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Session_PingAck::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Session_PingAck::~Packet_Session_PingAck() {
  SharedDtor();
}

void Packet_Session_PingAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Session_PingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Session_PingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Session_PingAck_descriptor_;
}

const Packet_Session_PingAck& Packet_Session_PingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Session_PingAck* Packet_Session_PingAck::default_instance_ = NULL;

Packet_Session_PingAck* Packet_Session_PingAck::New() const {
  return new Packet_Session_PingAck;
}

void Packet_Session_PingAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Session_PingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Session_PingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Session_PingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Session_PingAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Session_PingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Session_PingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Session_PingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Session_PingAck::MergeFrom(const Packet_Session_PingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Session_PingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Session_PingAck::CopyFrom(const Packet_Session_PingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Session_PingAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_Session_PingAck::Swap(Packet_Session_PingAck* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Session_PingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Session_PingAck_descriptor_;
  metadata.reflection = Packet_Session_PingAck_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Session::kLoginFieldNumber;
const int Packet_Session::kLoginAckFieldNumber;
const int Packet_Session::kLoginMstAckFieldNumber;
const int Packet_Session::kLogoutFieldNumber;
const int Packet_Session::kLogoutAckFieldNumber;
const int Packet_Session::kPingFieldNumber;
const int Packet_Session::kPingAckFieldNumber;
#endif  // !_MSC_VER

Packet_Session::Packet_Session()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Session::InitAsDefaultInstance() {
  login_ = const_cast< ::TvWall::Packet_Session_Login*>(&::TvWall::Packet_Session_Login::default_instance());
  loginack_ = const_cast< ::TvWall::Packet_Session_LoginAck*>(&::TvWall::Packet_Session_LoginAck::default_instance());
  loginmstack_ = const_cast< ::TvWall::Packet_Session_LoginMasterAck*>(&::TvWall::Packet_Session_LoginMasterAck::default_instance());
  logout_ = const_cast< ::TvWall::Packet_Session_Logout*>(&::TvWall::Packet_Session_Logout::default_instance());
  logoutack_ = const_cast< ::TvWall::Packet_Session_LogoutAck*>(&::TvWall::Packet_Session_LogoutAck::default_instance());
  ping_ = const_cast< ::TvWall::Packet_Session_Ping*>(&::TvWall::Packet_Session_Ping::default_instance());
  pingack_ = const_cast< ::TvWall::Packet_Session_PingAck*>(&::TvWall::Packet_Session_PingAck::default_instance());
}

Packet_Session::Packet_Session(const Packet_Session& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Session::SharedCtor() {
  _cached_size_ = 0;
  login_ = NULL;
  loginack_ = NULL;
  loginmstack_ = NULL;
  logout_ = NULL;
  logoutack_ = NULL;
  ping_ = NULL;
  pingack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Session::~Packet_Session() {
  SharedDtor();
}

void Packet_Session::SharedDtor() {
  if (this != default_instance_) {
    delete login_;
    delete loginack_;
    delete loginmstack_;
    delete logout_;
    delete logoutack_;
    delete ping_;
    delete pingack_;
  }
}

void Packet_Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Session_descriptor_;
}

const Packet_Session& Packet_Session::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Session* Packet_Session::default_instance_ = NULL;

Packet_Session* Packet_Session::New() const {
  return new Packet_Session;
}

void Packet_Session::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_login()) {
      if (login_ != NULL) login_->::TvWall::Packet_Session_Login::Clear();
    }
    if (has_loginack()) {
      if (loginack_ != NULL) loginack_->::TvWall::Packet_Session_LoginAck::Clear();
    }
    if (has_loginmstack()) {
      if (loginmstack_ != NULL) loginmstack_->::TvWall::Packet_Session_LoginMasterAck::Clear();
    }
    if (has_logout()) {
      if (logout_ != NULL) logout_->::TvWall::Packet_Session_Logout::Clear();
    }
    if (has_logoutack()) {
      if (logoutack_ != NULL) logoutack_->::TvWall::Packet_Session_LogoutAck::Clear();
    }
    if (has_ping()) {
      if (ping_ != NULL) ping_->::TvWall::Packet_Session_Ping::Clear();
    }
    if (has_pingack()) {
      if (pingack_ != NULL) pingack_->::TvWall::Packet_Session_PingAck::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TvWall.Packet.Session.Login login = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginAck;
        break;
      }

      // optional .TvWall.Packet.Session.LoginAck loginAck = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_loginMstAck;
        break;
      }

      // optional .TvWall.Packet.Session.LoginMasterAck loginMstAck = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginMstAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginmstack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_logout;
        break;
      }

      // optional .TvWall.Packet.Session.Logout logout = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_logoutAck;
        break;
      }

      // optional .TvWall.Packet.Session.LogoutAck logoutAck = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logoutAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logoutack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ping;
        break;
      }

      // optional .TvWall.Packet.Session.Ping ping = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pingAck;
        break;
      }

      // optional .TvWall.Packet.Session.PingAck pingAck = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pingAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pingack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TvWall.Packet.Session.Login login = 1;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->login(), output);
  }

  // optional .TvWall.Packet.Session.LoginAck loginAck = 2;
  if (has_loginack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loginack(), output);
  }

  // optional .TvWall.Packet.Session.LoginMasterAck loginMstAck = 3;
  if (has_loginmstack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->loginmstack(), output);
  }

  // optional .TvWall.Packet.Session.Logout logout = 4;
  if (has_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->logout(), output);
  }

  // optional .TvWall.Packet.Session.LogoutAck logoutAck = 5;
  if (has_logoutack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->logoutack(), output);
  }

  // optional .TvWall.Packet.Session.Ping ping = 6;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ping(), output);
  }

  // optional .TvWall.Packet.Session.PingAck pingAck = 7;
  if (has_pingack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pingack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Session::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TvWall.Packet.Session.Login login = 1;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->login(), target);
  }

  // optional .TvWall.Packet.Session.LoginAck loginAck = 2;
  if (has_loginack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loginack(), target);
  }

  // optional .TvWall.Packet.Session.LoginMasterAck loginMstAck = 3;
  if (has_loginmstack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->loginmstack(), target);
  }

  // optional .TvWall.Packet.Session.Logout logout = 4;
  if (has_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->logout(), target);
  }

  // optional .TvWall.Packet.Session.LogoutAck logoutAck = 5;
  if (has_logoutack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->logoutack(), target);
  }

  // optional .TvWall.Packet.Session.Ping ping = 6;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ping(), target);
  }

  // optional .TvWall.Packet.Session.PingAck pingAck = 7;
  if (has_pingack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pingack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Session::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TvWall.Packet.Session.Login login = 1;
    if (has_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

    // optional .TvWall.Packet.Session.LoginAck loginAck = 2;
    if (has_loginack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginack());
    }

    // optional .TvWall.Packet.Session.LoginMasterAck loginMstAck = 3;
    if (has_loginmstack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginmstack());
    }

    // optional .TvWall.Packet.Session.Logout logout = 4;
    if (has_logout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logout());
    }

    // optional .TvWall.Packet.Session.LogoutAck logoutAck = 5;
    if (has_logoutack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logoutack());
    }

    // optional .TvWall.Packet.Session.Ping ping = 6;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ping());
    }

    // optional .TvWall.Packet.Session.PingAck pingAck = 7;
    if (has_pingack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pingack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Session::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Session* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Session*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Session::MergeFrom(const Packet_Session& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login()) {
      mutable_login()->::TvWall::Packet_Session_Login::MergeFrom(from.login());
    }
    if (from.has_loginack()) {
      mutable_loginack()->::TvWall::Packet_Session_LoginAck::MergeFrom(from.loginack());
    }
    if (from.has_loginmstack()) {
      mutable_loginmstack()->::TvWall::Packet_Session_LoginMasterAck::MergeFrom(from.loginmstack());
    }
    if (from.has_logout()) {
      mutable_logout()->::TvWall::Packet_Session_Logout::MergeFrom(from.logout());
    }
    if (from.has_logoutack()) {
      mutable_logoutack()->::TvWall::Packet_Session_LogoutAck::MergeFrom(from.logoutack());
    }
    if (from.has_ping()) {
      mutable_ping()->::TvWall::Packet_Session_Ping::MergeFrom(from.ping());
    }
    if (from.has_pingack()) {
      mutable_pingack()->::TvWall::Packet_Session_PingAck::MergeFrom(from.pingack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Session::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Session::CopyFrom(const Packet_Session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Session::IsInitialized() const {

  if (has_login()) {
    if (!this->login().IsInitialized()) return false;
  }
  if (has_loginack()) {
    if (!this->loginack().IsInitialized()) return false;
  }
  if (has_loginmstack()) {
    if (!this->loginmstack().IsInitialized()) return false;
  }
  if (has_logout()) {
    if (!this->logout().IsInitialized()) return false;
  }
  if (has_ping()) {
    if (!this->ping().IsInitialized()) return false;
  }
  if (has_pingack()) {
    if (!this->pingack().IsInitialized()) return false;
  }
  return true;
}

void Packet_Session::Swap(Packet_Session* other) {
  if (other != this) {
    std::swap(login_, other->login_);
    std::swap(loginack_, other->loginack_);
    std::swap(loginmstack_, other->loginmstack_);
    std::swap(logout_, other->logout_);
    std::swap(logoutack_, other->logoutack_);
    std::swap(ping_, other->ping_);
    std::swap(pingack_, other->pingack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Session_descriptor_;
  metadata.reflection = Packet_Session_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_Screen::kGeometryFieldNumber;
const int Packet_ElementDat_Screen::kScreenIndexFieldNumber;
const int Packet_ElementDat_Screen::kRowFieldNumber;
const int Packet_ElementDat_Screen::kColFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_Screen::Packet_ElementDat_Screen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_Screen::InitAsDefaultInstance() {
  geometry_ = const_cast< ::TvWall::Rect*>(&::TvWall::Rect::default_instance());
}

Packet_ElementDat_Screen::Packet_ElementDat_Screen(const Packet_ElementDat_Screen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_Screen::SharedCtor() {
  _cached_size_ = 0;
  geometry_ = NULL;
  screenindex_ = 0;
  row_ = 0;
  col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_Screen::~Packet_ElementDat_Screen() {
  SharedDtor();
}

void Packet_ElementDat_Screen::SharedDtor() {
  if (this != default_instance_) {
    delete geometry_;
  }
}

void Packet_ElementDat_Screen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_Screen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_Screen_descriptor_;
}

const Packet_ElementDat_Screen& Packet_ElementDat_Screen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_Screen* Packet_ElementDat_Screen::default_instance_ = NULL;

Packet_ElementDat_Screen* Packet_ElementDat_Screen::New() const {
  return new Packet_ElementDat_Screen;
}

void Packet_ElementDat_Screen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::TvWall::Rect::Clear();
    }
    screenindex_ = 0;
    row_ = 0;
    col_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_Screen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Rect geometry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_screenIndex;
        break;
      }

      // optional int32 screenIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screenIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenindex_)));
          set_has_screenindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_row;
        break;
      }

      // required int32 row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_col;
        break;
      }

      // required int32 col = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_Screen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Rect geometry = 1;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geometry(), output);
  }

  // optional int32 screenIndex = 2;
  if (has_screenindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->screenindex(), output);
  }

  // required int32 row = 3;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->row(), output);
  }

  // required int32 col = 4;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_Screen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Rect geometry = 1;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->geometry(), target);
  }

  // optional int32 screenIndex = 2;
  if (has_screenindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->screenindex(), target);
  }

  // required int32 row = 3;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->row(), target);
  }

  // required int32 col = 4;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_Screen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Rect geometry = 1;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional int32 screenIndex = 2;
    if (has_screenindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenindex());
    }

    // required int32 row = 3;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 4;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_Screen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_Screen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_Screen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_Screen::MergeFrom(const Packet_ElementDat_Screen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geometry()) {
      mutable_geometry()->::TvWall::Rect::MergeFrom(from.geometry());
    }
    if (from.has_screenindex()) {
      set_screenindex(from.screenindex());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_Screen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_Screen::CopyFrom(const Packet_ElementDat_Screen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_Screen::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementDat_Screen::Swap(Packet_ElementDat_Screen* other) {
  if (other != this) {
    std::swap(geometry_, other->geometry_);
    std::swap(screenindex_, other->screenindex_);
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_Screen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_Screen_descriptor_;
  metadata.reflection = Packet_ElementDat_Screen_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_Camera_CameraInfo::kCameraIPFieldNumber;
const int Packet_ElementDat_Camera_CameraInfo::kCameraPortFieldNumber;
const int Packet_ElementDat_Camera_CameraInfo::kCameraNameFieldNumber;
const int Packet_ElementDat_Camera_CameraInfo::kWidthFieldNumber;
const int Packet_ElementDat_Camera_CameraInfo::kHeightFieldNumber;
const int Packet_ElementDat_Camera_CameraInfo::kCanPtzFieldNumber;
const int Packet_ElementDat_Camera_CameraInfo::kCompositeFieldNumber;
const int Packet_ElementDat_Camera_CameraInfo::kModelFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_Camera_CameraInfo::Packet_ElementDat_Camera_CameraInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_Camera_CameraInfo::InitAsDefaultInstance() {
}

Packet_ElementDat_Camera_CameraInfo::Packet_ElementDat_Camera_CameraInfo(const Packet_ElementDat_Camera_CameraInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_Camera_CameraInfo::SharedCtor() {
  _cached_size_ = 0;
  cameraip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cameraport_ = 0;
  cameraname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 0;
  height_ = 0;
  canptz_ = false;
  composite_ = false;
  model_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_Camera_CameraInfo::~Packet_ElementDat_Camera_CameraInfo() {
  SharedDtor();
}

void Packet_ElementDat_Camera_CameraInfo::SharedDtor() {
  if (cameraip_ != &::google::protobuf::internal::kEmptyString) {
    delete cameraip_;
  }
  if (cameraname_ != &::google::protobuf::internal::kEmptyString) {
    delete cameraname_;
  }
  if (this != default_instance_) {
  }
}

void Packet_ElementDat_Camera_CameraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_Camera_CameraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_Camera_CameraInfo_descriptor_;
}

const Packet_ElementDat_Camera_CameraInfo& Packet_ElementDat_Camera_CameraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_Camera_CameraInfo* Packet_ElementDat_Camera_CameraInfo::default_instance_ = NULL;

Packet_ElementDat_Camera_CameraInfo* Packet_ElementDat_Camera_CameraInfo::New() const {
  return new Packet_ElementDat_Camera_CameraInfo;
}

void Packet_ElementDat_Camera_CameraInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cameraip()) {
      if (cameraip_ != &::google::protobuf::internal::kEmptyString) {
        cameraip_->clear();
      }
    }
    cameraport_ = 0;
    if (has_cameraname()) {
      if (cameraname_ != &::google::protobuf::internal::kEmptyString) {
        cameraname_->clear();
      }
    }
    width_ = 0;
    height_ = 0;
    canptz_ = false;
    composite_ = false;
    model_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_Camera_CameraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cameraIP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cameraip().data(), this->cameraip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cameraPort;
        break;
      }

      // required int32 cameraPort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cameraPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cameraport_)));
          set_has_cameraport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cameraName;
        break;
      }

      // optional string cameraName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cameraname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cameraname().data(), this->cameraname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_height;
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_canPtz;
        break;
      }

      // optional bool canPtz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canPtz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canptz_)));
          set_has_canptz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_composite;
        break;
      }

      // optional bool composite = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_composite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &composite_)));
          set_has_composite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_model;
        break;
      }

      // optional uint32 model = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_Camera_CameraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cameraIP = 1;
  if (has_cameraip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cameraip().data(), this->cameraip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cameraip(), output);
  }

  // required int32 cameraPort = 2;
  if (has_cameraport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cameraport(), output);
  }

  // optional string cameraName = 3;
  if (has_cameraname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cameraname().data(), this->cameraname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cameraname(), output);
  }

  // optional int32 width = 4;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // optional bool canPtz = 6;
  if (has_canptz()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->canptz(), output);
  }

  // optional bool composite = 7 [default = false];
  if (has_composite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->composite(), output);
  }

  // optional uint32 model = 8;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->model(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_Camera_CameraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cameraIP = 1;
  if (has_cameraip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cameraip().data(), this->cameraip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cameraip(), target);
  }

  // required int32 cameraPort = 2;
  if (has_cameraport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cameraport(), target);
  }

  // optional string cameraName = 3;
  if (has_cameraname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cameraname().data(), this->cameraname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cameraname(), target);
  }

  // optional int32 width = 4;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional int32 height = 5;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  // optional bool canPtz = 6;
  if (has_canptz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->canptz(), target);
  }

  // optional bool composite = 7 [default = false];
  if (has_composite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->composite(), target);
  }

  // optional uint32 model = 8;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->model(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_Camera_CameraInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cameraIP = 1;
    if (has_cameraip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cameraip());
    }

    // required int32 cameraPort = 2;
    if (has_cameraport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cameraport());
    }

    // optional string cameraName = 3;
    if (has_cameraname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cameraname());
    }

    // optional int32 width = 4;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional bool canPtz = 6;
    if (has_canptz()) {
      total_size += 1 + 1;
    }

    // optional bool composite = 7 [default = false];
    if (has_composite()) {
      total_size += 1 + 1;
    }

    // optional uint32 model = 8;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->model());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_Camera_CameraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_Camera_CameraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_Camera_CameraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_Camera_CameraInfo::MergeFrom(const Packet_ElementDat_Camera_CameraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cameraip()) {
      set_cameraip(from.cameraip());
    }
    if (from.has_cameraport()) {
      set_cameraport(from.cameraport());
    }
    if (from.has_cameraname()) {
      set_cameraname(from.cameraname());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_canptz()) {
      set_canptz(from.canptz());
    }
    if (from.has_composite()) {
      set_composite(from.composite());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_Camera_CameraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_Camera_CameraInfo::CopyFrom(const Packet_ElementDat_Camera_CameraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_Camera_CameraInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_ElementDat_Camera_CameraInfo::Swap(Packet_ElementDat_Camera_CameraInfo* other) {
  if (other != this) {
    std::swap(cameraip_, other->cameraip_);
    std::swap(cameraport_, other->cameraport_);
    std::swap(cameraname_, other->cameraname_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(canptz_, other->canptz_);
    std::swap(composite_, other->composite_);
    std::swap(model_, other->model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_Camera_CameraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_Camera_CameraInfo_descriptor_;
  metadata.reflection = Packet_ElementDat_Camera_CameraInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_Camera_RecordInfo::kBeginFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_Camera_RecordInfo::Packet_ElementDat_Camera_RecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_Camera_RecordInfo::InitAsDefaultInstance() {
}

Packet_ElementDat_Camera_RecordInfo::Packet_ElementDat_Camera_RecordInfo(const Packet_ElementDat_Camera_RecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_Camera_RecordInfo::SharedCtor() {
  _cached_size_ = 0;
  begin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_Camera_RecordInfo::~Packet_ElementDat_Camera_RecordInfo() {
  SharedDtor();
}

void Packet_ElementDat_Camera_RecordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_ElementDat_Camera_RecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_Camera_RecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_Camera_RecordInfo_descriptor_;
}

const Packet_ElementDat_Camera_RecordInfo& Packet_ElementDat_Camera_RecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_Camera_RecordInfo* Packet_ElementDat_Camera_RecordInfo::default_instance_ = NULL;

Packet_ElementDat_Camera_RecordInfo* Packet_ElementDat_Camera_RecordInfo::New() const {
  return new Packet_ElementDat_Camera_RecordInfo;
}

void Packet_ElementDat_Camera_RecordInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_Camera_RecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_Camera_RecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->begin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_Camera_RecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->begin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_Camera_RecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_Camera_RecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_Camera_RecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_Camera_RecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_Camera_RecordInfo::MergeFrom(const Packet_ElementDat_Camera_RecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_Camera_RecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_Camera_RecordInfo::CopyFrom(const Packet_ElementDat_Camera_RecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_Camera_RecordInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_ElementDat_Camera_RecordInfo::Swap(Packet_ElementDat_Camera_RecordInfo* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_Camera_RecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_Camera_RecordInfo_descriptor_;
  metadata.reflection = Packet_ElementDat_Camera_RecordInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_Camera::kCameraIdFieldNumber;
const int Packet_ElementDat_Camera::kCameraInfoFieldNumber;
const int Packet_ElementDat_Camera::kRecordInfoFieldNumber;
const int Packet_ElementDat_Camera::kIsPlayingFieldNumber;
const int Packet_ElementDat_Camera::kIsConnectedFieldNumber;
const int Packet_ElementDat_Camera::kIsDelFieldNumber;
const int Packet_ElementDat_Camera::kIsPlayBackFieldNumber;
const int Packet_ElementDat_Camera::kParentIdFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_Camera::Packet_ElementDat_Camera()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_Camera::InitAsDefaultInstance() {
  cameraid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
  camerainfo_ = const_cast< ::TvWall::Packet_ElementDat_Camera_CameraInfo*>(&::TvWall::Packet_ElementDat_Camera_CameraInfo::default_instance());
  recordinfo_ = const_cast< ::TvWall::Packet_ElementDat_Camera_RecordInfo*>(&::TvWall::Packet_ElementDat_Camera_RecordInfo::default_instance());
  parentid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
}

Packet_ElementDat_Camera::Packet_ElementDat_Camera(const Packet_ElementDat_Camera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_Camera::SharedCtor() {
  _cached_size_ = 0;
  cameraid_ = NULL;
  camerainfo_ = NULL;
  recordinfo_ = NULL;
  isplaying_ = false;
  isconnected_ = false;
  isdel_ = false;
  isplayback_ = false;
  parentid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_Camera::~Packet_ElementDat_Camera() {
  SharedDtor();
}

void Packet_ElementDat_Camera::SharedDtor() {
  if (this != default_instance_) {
    delete cameraid_;
    delete camerainfo_;
    delete recordinfo_;
    delete parentid_;
  }
}

void Packet_ElementDat_Camera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_Camera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_Camera_descriptor_;
}

const Packet_ElementDat_Camera& Packet_ElementDat_Camera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_Camera* Packet_ElementDat_Camera::default_instance_ = NULL;

Packet_ElementDat_Camera* Packet_ElementDat_Camera::New() const {
  return new Packet_ElementDat_Camera;
}

void Packet_ElementDat_Camera::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cameraid()) {
      if (cameraid_ != NULL) cameraid_->::TvWall::Guid::Clear();
    }
    if (has_camerainfo()) {
      if (camerainfo_ != NULL) camerainfo_->::TvWall::Packet_ElementDat_Camera_CameraInfo::Clear();
    }
    if (has_recordinfo()) {
      if (recordinfo_ != NULL) recordinfo_->::TvWall::Packet_ElementDat_Camera_RecordInfo::Clear();
    }
    isplaying_ = false;
    isconnected_ = false;
    isdel_ = false;
    isplayback_ = false;
    if (has_parentid()) {
      if (parentid_ != NULL) parentid_->::TvWall::Guid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_Camera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Guid cameraId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cameraInfo;
        break;
      }

      // required .TvWall.Packet.ElementDat.Camera.CameraInfo cameraInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camerainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_recordInfo;
        break;
      }

      // optional .TvWall.Packet.ElementDat.Camera.RecordInfo recordInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isPlaying;
        break;
      }

      // optional bool isPlaying = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPlaying:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplaying_)));
          set_has_isplaying();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isConnected;
        break;
      }

      // optional bool isConnected = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isConnected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconnected_)));
          set_has_isconnected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isDel;
        break;
      }

      // optional bool isDel = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isPlayBack;
        break;
      }

      // optional bool isPlayBack = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPlayBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplayback_)));
          set_has_isplayback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_parentId;
        break;
      }

      // optional .TvWall.Guid parentId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parentid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_Camera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Guid cameraId = 1;
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cameraid(), output);
  }

  // required .TvWall.Packet.ElementDat.Camera.CameraInfo cameraInfo = 2;
  if (has_camerainfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->camerainfo(), output);
  }

  // optional .TvWall.Packet.ElementDat.Camera.RecordInfo recordInfo = 3;
  if (has_recordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recordinfo(), output);
  }

  // optional bool isPlaying = 4 [default = false];
  if (has_isplaying()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isplaying(), output);
  }

  // optional bool isConnected = 5 [default = false];
  if (has_isconnected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isconnected(), output);
  }

  // optional bool isDel = 6 [default = false];
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdel(), output);
  }

  // optional bool isPlayBack = 7 [default = false];
  if (has_isplayback()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isplayback(), output);
  }

  // optional .TvWall.Guid parentId = 8;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->parentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_Camera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Guid cameraId = 1;
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cameraid(), target);
  }

  // required .TvWall.Packet.ElementDat.Camera.CameraInfo cameraInfo = 2;
  if (has_camerainfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->camerainfo(), target);
  }

  // optional .TvWall.Packet.ElementDat.Camera.RecordInfo recordInfo = 3;
  if (has_recordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recordinfo(), target);
  }

  // optional bool isPlaying = 4 [default = false];
  if (has_isplaying()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isplaying(), target);
  }

  // optional bool isConnected = 5 [default = false];
  if (has_isconnected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isconnected(), target);
  }

  // optional bool isDel = 6 [default = false];
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdel(), target);
  }

  // optional bool isPlayBack = 7 [default = false];
  if (has_isplayback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isplayback(), target);
  }

  // optional .TvWall.Guid parentId = 8;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->parentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_Camera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Guid cameraId = 1;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameraid());
    }

    // required .TvWall.Packet.ElementDat.Camera.CameraInfo cameraInfo = 2;
    if (has_camerainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camerainfo());
    }

    // optional .TvWall.Packet.ElementDat.Camera.RecordInfo recordInfo = 3;
    if (has_recordinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordinfo());
    }

    // optional bool isPlaying = 4 [default = false];
    if (has_isplaying()) {
      total_size += 1 + 1;
    }

    // optional bool isConnected = 5 [default = false];
    if (has_isconnected()) {
      total_size += 1 + 1;
    }

    // optional bool isDel = 6 [default = false];
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // optional bool isPlayBack = 7 [default = false];
    if (has_isplayback()) {
      total_size += 1 + 1;
    }

    // optional .TvWall.Guid parentId = 8;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_Camera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_Camera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_Camera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_Camera::MergeFrom(const Packet_ElementDat_Camera& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cameraid()) {
      mutable_cameraid()->::TvWall::Guid::MergeFrom(from.cameraid());
    }
    if (from.has_camerainfo()) {
      mutable_camerainfo()->::TvWall::Packet_ElementDat_Camera_CameraInfo::MergeFrom(from.camerainfo());
    }
    if (from.has_recordinfo()) {
      mutable_recordinfo()->::TvWall::Packet_ElementDat_Camera_RecordInfo::MergeFrom(from.recordinfo());
    }
    if (from.has_isplaying()) {
      set_isplaying(from.isplaying());
    }
    if (from.has_isconnected()) {
      set_isconnected(from.isconnected());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_isplayback()) {
      set_isplayback(from.isplayback());
    }
    if (from.has_parentid()) {
      mutable_parentid()->::TvWall::Guid::MergeFrom(from.parentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_Camera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_Camera::CopyFrom(const Packet_ElementDat_Camera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_Camera::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cameraid()) {
    if (!this->cameraid().IsInitialized()) return false;
  }
  if (has_camerainfo()) {
    if (!this->camerainfo().IsInitialized()) return false;
  }
  if (has_recordinfo()) {
    if (!this->recordinfo().IsInitialized()) return false;
  }
  if (has_parentid()) {
    if (!this->parentid().IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementDat_Camera::Swap(Packet_ElementDat_Camera* other) {
  if (other != this) {
    std::swap(cameraid_, other->cameraid_);
    std::swap(camerainfo_, other->camerainfo_);
    std::swap(recordinfo_, other->recordinfo_);
    std::swap(isplaying_, other->isplaying_);
    std::swap(isconnected_, other->isconnected_);
    std::swap(isdel_, other->isdel_);
    std::swap(isplayback_, other->isplayback_);
    std::swap(parentid_, other->parentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_Camera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_Camera_descriptor_;
  metadata.reflection = Packet_ElementDat_Camera_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_CameraGrp::kGrpNameFieldNumber;
const int Packet_ElementDat_CameraGrp::kCamFieldNumber;
const int Packet_ElementDat_CameraGrp::kCamGrpFieldNumber;
const int Packet_ElementDat_CameraGrp::kGrpIdFieldNumber;
const int Packet_ElementDat_CameraGrp::kIsDelFieldNumber;
const int Packet_ElementDat_CameraGrp::kParentIdFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_CameraGrp::Packet_ElementDat_CameraGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_CameraGrp::InitAsDefaultInstance() {
  grpid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
  parentid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
}

Packet_ElementDat_CameraGrp::Packet_ElementDat_CameraGrp(const Packet_ElementDat_CameraGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_CameraGrp::SharedCtor() {
  _cached_size_ = 0;
  grpname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grpid_ = NULL;
  isdel_ = false;
  parentid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_CameraGrp::~Packet_ElementDat_CameraGrp() {
  SharedDtor();
}

void Packet_ElementDat_CameraGrp::SharedDtor() {
  if (grpname_ != &::google::protobuf::internal::kEmptyString) {
    delete grpname_;
  }
  if (this != default_instance_) {
    delete grpid_;
    delete parentid_;
  }
}

void Packet_ElementDat_CameraGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_CameraGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_CameraGrp_descriptor_;
}

const Packet_ElementDat_CameraGrp& Packet_ElementDat_CameraGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_CameraGrp* Packet_ElementDat_CameraGrp::default_instance_ = NULL;

Packet_ElementDat_CameraGrp* Packet_ElementDat_CameraGrp::New() const {
  return new Packet_ElementDat_CameraGrp;
}

void Packet_ElementDat_CameraGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_grpname()) {
      if (grpname_ != &::google::protobuf::internal::kEmptyString) {
        grpname_->clear();
      }
    }
    if (has_grpid()) {
      if (grpid_ != NULL) grpid_->::TvWall::Guid::Clear();
    }
    isdel_ = false;
    if (has_parentid()) {
      if (parentid_ != NULL) parentid_->::TvWall::Guid::Clear();
    }
  }
  cam_.Clear();
  camgrp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_CameraGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string grpName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grpname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grpname().data(), this->grpname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cam;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.Camera cam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cam;
        if (input->ExpectTag(26)) goto parse_camGrp;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camGrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camgrp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_camGrp;
        if (input->ExpectTag(34)) goto parse_grpId;
        break;
      }

      // required .TvWall.Guid grpId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grpId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grpid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isDel;
        break;
      }

      // optional bool isDel = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_parentId;
        break;
      }

      // optional .TvWall.Guid parentId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parentid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_CameraGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string grpName = 1;
  if (has_grpname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grpname().data(), this->grpname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->grpname(), output);
  }

  // repeated .TvWall.Packet.ElementDat.Camera cam = 2;
  for (int i = 0; i < this->cam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cam(i), output);
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
  for (int i = 0; i < this->camgrp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camgrp(i), output);
  }

  // required .TvWall.Guid grpId = 4;
  if (has_grpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->grpid(), output);
  }

  // optional bool isDel = 5 [default = false];
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdel(), output);
  }

  // optional .TvWall.Guid parentId = 6;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->parentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_CameraGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string grpName = 1;
  if (has_grpname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grpname().data(), this->grpname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->grpname(), target);
  }

  // repeated .TvWall.Packet.ElementDat.Camera cam = 2;
  for (int i = 0; i < this->cam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cam(i), target);
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
  for (int i = 0; i < this->camgrp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->camgrp(i), target);
  }

  // required .TvWall.Guid grpId = 4;
  if (has_grpid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->grpid(), target);
  }

  // optional bool isDel = 5 [default = false];
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdel(), target);
  }

  // optional .TvWall.Guid parentId = 6;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->parentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_CameraGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string grpName = 1;
    if (has_grpname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grpname());
    }

    // required .TvWall.Guid grpId = 4;
    if (has_grpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grpid());
    }

    // optional bool isDel = 5 [default = false];
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // optional .TvWall.Guid parentId = 6;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parentid());
    }

  }
  // repeated .TvWall.Packet.ElementDat.Camera cam = 2;
  total_size += 1 * this->cam_size();
  for (int i = 0; i < this->cam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cam(i));
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
  total_size += 1 * this->camgrp_size();
  for (int i = 0; i < this->camgrp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camgrp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_CameraGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_CameraGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_CameraGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_CameraGrp::MergeFrom(const Packet_ElementDat_CameraGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cam_.MergeFrom(from.cam_);
  camgrp_.MergeFrom(from.camgrp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grpname()) {
      set_grpname(from.grpname());
    }
    if (from.has_grpid()) {
      mutable_grpid()->::TvWall::Guid::MergeFrom(from.grpid());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_parentid()) {
      mutable_parentid()->::TvWall::Guid::MergeFrom(from.parentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_CameraGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_CameraGrp::CopyFrom(const Packet_ElementDat_CameraGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_CameraGrp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  for (int i = 0; i < cam_size(); i++) {
    if (!this->cam(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camgrp_size(); i++) {
    if (!this->camgrp(i).IsInitialized()) return false;
  }
  if (has_grpid()) {
    if (!this->grpid().IsInitialized()) return false;
  }
  if (has_parentid()) {
    if (!this->parentid().IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementDat_CameraGrp::Swap(Packet_ElementDat_CameraGrp* other) {
  if (other != this) {
    std::swap(grpname_, other->grpname_);
    cam_.Swap(&other->cam_);
    camgrp_.Swap(&other->camgrp_);
    std::swap(grpid_, other->grpid_);
    std::swap(isdel_, other->isdel_);
    std::swap(parentid_, other->parentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_CameraGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_CameraGrp_descriptor_;
  metadata.reflection = Packet_ElementDat_CameraGrp_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_LocalMovie::kFileNameFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_LocalMovie::Packet_ElementDat_LocalMovie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_LocalMovie::InitAsDefaultInstance() {
}

Packet_ElementDat_LocalMovie::Packet_ElementDat_LocalMovie(const Packet_ElementDat_LocalMovie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_LocalMovie::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_LocalMovie::~Packet_ElementDat_LocalMovie() {
  SharedDtor();
}

void Packet_ElementDat_LocalMovie::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void Packet_ElementDat_LocalMovie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_LocalMovie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_LocalMovie_descriptor_;
}

const Packet_ElementDat_LocalMovie& Packet_ElementDat_LocalMovie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_LocalMovie* Packet_ElementDat_LocalMovie::default_instance_ = NULL;

Packet_ElementDat_LocalMovie* Packet_ElementDat_LocalMovie::New() const {
  return new Packet_ElementDat_LocalMovie;
}

void Packet_ElementDat_LocalMovie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_LocalMovie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_LocalMovie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_LocalMovie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_LocalMovie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_LocalMovie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_LocalMovie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_LocalMovie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_LocalMovie::MergeFrom(const Packet_ElementDat_LocalMovie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_LocalMovie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_LocalMovie::CopyFrom(const Packet_ElementDat_LocalMovie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_LocalMovie::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_ElementDat_LocalMovie::Swap(Packet_ElementDat_LocalMovie* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_LocalMovie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_LocalMovie_descriptor_;
  metadata.reflection = Packet_ElementDat_LocalMovie_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_Flash::kUrlFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_Flash::Packet_ElementDat_Flash()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_Flash::InitAsDefaultInstance() {
}

Packet_ElementDat_Flash::Packet_ElementDat_Flash(const Packet_ElementDat_Flash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_Flash::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_Flash::~Packet_ElementDat_Flash() {
  SharedDtor();
}

void Packet_ElementDat_Flash::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Packet_ElementDat_Flash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_Flash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_Flash_descriptor_;
}

const Packet_ElementDat_Flash& Packet_ElementDat_Flash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_Flash* Packet_ElementDat_Flash::default_instance_ = NULL;

Packet_ElementDat_Flash* Packet_ElementDat_Flash::New() const {
  return new Packet_ElementDat_Flash;
}

void Packet_ElementDat_Flash::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_Flash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_Flash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_Flash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_Flash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_Flash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_Flash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_Flash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_Flash::MergeFrom(const Packet_ElementDat_Flash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_Flash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_Flash::CopyFrom(const Packet_ElementDat_Flash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_Flash::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_ElementDat_Flash::Swap(Packet_ElementDat_Flash* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_Flash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_Flash_descriptor_;
  metadata.reflection = Packet_ElementDat_Flash_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_ElementDat_View_ViewType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_View_ViewType_descriptor_;
}
bool Packet_ElementDat_View_ViewType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::VIDEO;
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::FLASH;
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::HTML;
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::TEXT;
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::LOCAL_MOVIE;
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::MAP;
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::OTHERS;
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::RECORDFILE;
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::ALARM;
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::ViewType_MIN;
const Packet_ElementDat_View_ViewType Packet_ElementDat_View::ViewType_MAX;
const int Packet_ElementDat_View::ViewType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_ElementDat_View::kWinIdFieldNumber;
const int Packet_ElementDat_View::kRectFieldNumber;
const int Packet_ElementDat_View::kViewTypeFieldNumber;
const int Packet_ElementDat_View::kUrlFieldNumber;
const int Packet_ElementDat_View::kCameraIdFieldNumber;
const int Packet_ElementDat_View::kStartTimeFieldNumber;
const int Packet_ElementDat_View::kKeepStretchFieldNumber;
const int Packet_ElementDat_View::kBorderWidthFieldNumber;
const int Packet_ElementDat_View::kShowTitleFieldNumber;
const int Packet_ElementDat_View::kTitleFieldNumber;
const int Packet_ElementDat_View::kPollIntervalFieldNumber;
const int Packet_ElementDat_View::kGpuIdFieldNumber;
const int Packet_ElementDat_View::kShowFullScreenFieldNumber;
const int Packet_ElementDat_View::kWindowStackFieldNumber;
const int Packet_ElementDat_View::kIsAlarmFieldNumber;
const int Packet_ElementDat_View::kAlarmIntervalFieldNumber;
const int Packet_ElementDat_View::kShowMaxFullScreenFieldNumber;
const int Packet_ElementDat_View::kShowMinFullScreenFieldNumber;
const int Packet_ElementDat_View::kFullscreenRectFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_View::Packet_ElementDat_View()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_View::InitAsDefaultInstance() {
  rect_ = const_cast< ::TvWall::Rect*>(&::TvWall::Rect::default_instance());
  fullscreenrect_ = const_cast< ::TvWall::Rect*>(&::TvWall::Rect::default_instance());
}

Packet_ElementDat_View::Packet_ElementDat_View(const Packet_ElementDat_View& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_View::SharedCtor() {
  _cached_size_ = 0;
  winid_ = 0;
  rect_ = NULL;
  viewtype_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = GOOGLE_ULONGLONG(0);
  keepstretch_ = false;
  borderwidth_ = 0;
  showtitle_ = false;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pollinterval_ = 0;
  gpuid_ = 0;
  showfullscreen_ = false;
  windowstack_ = 0;
  isalarm_ = false;
  alarminterval_ = 0;
  showmaxfullscreen_ = false;
  showminfullscreen_ = false;
  fullscreenrect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_View::~Packet_ElementDat_View() {
  SharedDtor();
}

void Packet_ElementDat_View::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
    delete rect_;
    delete fullscreenrect_;
  }
}

void Packet_ElementDat_View::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_View::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_View_descriptor_;
}

const Packet_ElementDat_View& Packet_ElementDat_View::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_View* Packet_ElementDat_View::default_instance_ = NULL;

Packet_ElementDat_View* Packet_ElementDat_View::New() const {
  return new Packet_ElementDat_View;
}

void Packet_ElementDat_View::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winid_ = 0;
    if (has_rect()) {
      if (rect_ != NULL) rect_->::TvWall::Rect::Clear();
    }
    viewtype_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    starttime_ = GOOGLE_ULONGLONG(0);
    keepstretch_ = false;
    borderwidth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    showtitle_ = false;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    pollinterval_ = 0;
    gpuid_ = 0;
    showfullscreen_ = false;
    windowstack_ = 0;
    isalarm_ = false;
    alarminterval_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    showmaxfullscreen_ = false;
    showminfullscreen_ = false;
    if (has_fullscreenrect()) {
      if (fullscreenrect_ != NULL) fullscreenrect_->::TvWall::Rect::Clear();
    }
  }
  cameraid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_View::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rect;
        break;
      }

      // required .TvWall.Rect rect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_viewType;
        break;
      }

      // required .TvWall.Packet.ElementDat.View.ViewType viewType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_ElementDat_View_ViewType_IsValid(value)) {
            set_viewtype(static_cast< ::TvWall::Packet_ElementDat_View_ViewType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional string url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cameraId;
        break;
      }

      // repeated .TvWall.Guid cameraId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cameraId;
        if (input->ExpectTag(48)) goto parse_startTime;
        break;
      }

      // optional uint64 startTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_keepStretch;
        break;
      }

      // optional bool keepStretch = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepStretch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepstretch_)));
          set_has_keepstretch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_borderWidth;
        break;
      }

      // optional int32 borderWidth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_borderWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &borderwidth_)));
          set_has_borderwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_showTitle;
        break;
      }

      // optional bool showTitle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showtitle_)));
          set_has_showtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_title;
        break;
      }

      // optional string title = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pollInterval;
        break;
      }

      // optional int32 pollInterval = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pollInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pollinterval_)));
          set_has_pollinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gpuId;
        break;
      }

      // optional int32 gpuId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpuid_)));
          set_has_gpuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_showFullScreen;
        break;
      }

      // optional bool showFullScreen = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showFullScreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showfullscreen_)));
          set_has_showfullscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_windowStack;
        break;
      }

      // optional int32 windowStack = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_windowStack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windowstack_)));
          set_has_windowstack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isAlarm;
        break;
      }

      // optional bool isAlarm = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAlarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isalarm_)));
          set_has_isalarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_alarmInterval;
        break;
      }

      // optional int32 alarmInterval = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarminterval_)));
          set_has_alarminterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_showMaxFullScreen;
        break;
      }

      // optional bool showMaxFullScreen = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showMaxFullScreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showmaxfullscreen_)));
          set_has_showmaxfullscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_showMinFullScreen;
        break;
      }

      // optional bool showMinFullScreen = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showMinFullScreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showminfullscreen_)));
          set_has_showminfullscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_fullscreenRect;
        break;
      }

      // optional .TvWall.Rect fullscreenRect = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fullscreenRect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fullscreenrect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_View::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winId = 1;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winid(), output);
  }

  // required .TvWall.Rect rect = 2;
  if (has_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rect(), output);
  }

  // required .TvWall.Packet.ElementDat.View.ViewType viewType = 3;
  if (has_viewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->viewtype(), output);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->url(), output);
  }

  // repeated .TvWall.Guid cameraId = 5;
  for (int i = 0; i < this->cameraid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cameraid(i), output);
  }

  // optional uint64 startTime = 6;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->starttime(), output);
  }

  // optional bool keepStretch = 7;
  if (has_keepstretch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->keepstretch(), output);
  }

  // optional int32 borderWidth = 8;
  if (has_borderwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->borderwidth(), output);
  }

  // optional bool showTitle = 9;
  if (has_showtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->showtitle(), output);
  }

  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->title(), output);
  }

  // optional int32 pollInterval = 11;
  if (has_pollinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pollinterval(), output);
  }

  // optional int32 gpuId = 12;
  if (has_gpuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gpuid(), output);
  }

  // optional bool showFullScreen = 13;
  if (has_showfullscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->showfullscreen(), output);
  }

  // optional int32 windowStack = 14;
  if (has_windowstack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->windowstack(), output);
  }

  // optional bool isAlarm = 15;
  if (has_isalarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isalarm(), output);
  }

  // optional int32 alarmInterval = 16;
  if (has_alarminterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->alarminterval(), output);
  }

  // optional bool showMaxFullScreen = 17;
  if (has_showmaxfullscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->showmaxfullscreen(), output);
  }

  // optional bool showMinFullScreen = 18;
  if (has_showminfullscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->showminfullscreen(), output);
  }

  // optional .TvWall.Rect fullscreenRect = 19;
  if (has_fullscreenrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->fullscreenrect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_View::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winId = 1;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winid(), target);
  }

  // required .TvWall.Rect rect = 2;
  if (has_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rect(), target);
  }

  // required .TvWall.Packet.ElementDat.View.ViewType viewType = 3;
  if (has_viewtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->viewtype(), target);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // repeated .TvWall.Guid cameraId = 5;
  for (int i = 0; i < this->cameraid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cameraid(i), target);
  }

  // optional uint64 startTime = 6;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->starttime(), target);
  }

  // optional bool keepStretch = 7;
  if (has_keepstretch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->keepstretch(), target);
  }

  // optional int32 borderWidth = 8;
  if (has_borderwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->borderwidth(), target);
  }

  // optional bool showTitle = 9;
  if (has_showtitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->showtitle(), target);
  }

  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->title(), target);
  }

  // optional int32 pollInterval = 11;
  if (has_pollinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pollinterval(), target);
  }

  // optional int32 gpuId = 12;
  if (has_gpuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gpuid(), target);
  }

  // optional bool showFullScreen = 13;
  if (has_showfullscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->showfullscreen(), target);
  }

  // optional int32 windowStack = 14;
  if (has_windowstack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->windowstack(), target);
  }

  // optional bool isAlarm = 15;
  if (has_isalarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isalarm(), target);
  }

  // optional int32 alarmInterval = 16;
  if (has_alarminterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->alarminterval(), target);
  }

  // optional bool showMaxFullScreen = 17;
  if (has_showmaxfullscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->showmaxfullscreen(), target);
  }

  // optional bool showMinFullScreen = 18;
  if (has_showminfullscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->showminfullscreen(), target);
  }

  // optional .TvWall.Rect fullscreenRect = 19;
  if (has_fullscreenrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->fullscreenrect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_View::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winId = 1;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required .TvWall.Rect rect = 2;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect());
    }

    // required .TvWall.Packet.ElementDat.View.ViewType viewType = 3;
    if (has_viewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->viewtype());
    }

    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 startTime = 6;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional bool keepStretch = 7;
    if (has_keepstretch()) {
      total_size += 1 + 1;
    }

    // optional int32 borderWidth = 8;
    if (has_borderwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->borderwidth());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool showTitle = 9;
    if (has_showtitle()) {
      total_size += 1 + 1;
    }

    // optional string title = 10;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 pollInterval = 11;
    if (has_pollinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pollinterval());
    }

    // optional int32 gpuId = 12;
    if (has_gpuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpuid());
    }

    // optional bool showFullScreen = 13;
    if (has_showfullscreen()) {
      total_size += 1 + 1;
    }

    // optional int32 windowStack = 14;
    if (has_windowstack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->windowstack());
    }

    // optional bool isAlarm = 15;
    if (has_isalarm()) {
      total_size += 1 + 1;
    }

    // optional int32 alarmInterval = 16;
    if (has_alarminterval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarminterval());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool showMaxFullScreen = 17;
    if (has_showmaxfullscreen()) {
      total_size += 2 + 1;
    }

    // optional bool showMinFullScreen = 18;
    if (has_showminfullscreen()) {
      total_size += 2 + 1;
    }

    // optional .TvWall.Rect fullscreenRect = 19;
    if (has_fullscreenrect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fullscreenrect());
    }

  }
  // repeated .TvWall.Guid cameraId = 5;
  total_size += 1 * this->cameraid_size();
  for (int i = 0; i < this->cameraid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameraid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_View::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_View* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_View*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_View::MergeFrom(const Packet_ElementDat_View& from) {
  GOOGLE_CHECK_NE(&from, this);
  cameraid_.MergeFrom(from.cameraid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_rect()) {
      mutable_rect()->::TvWall::Rect::MergeFrom(from.rect());
    }
    if (from.has_viewtype()) {
      set_viewtype(from.viewtype());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_keepstretch()) {
      set_keepstretch(from.keepstretch());
    }
    if (from.has_borderwidth()) {
      set_borderwidth(from.borderwidth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_showtitle()) {
      set_showtitle(from.showtitle());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_pollinterval()) {
      set_pollinterval(from.pollinterval());
    }
    if (from.has_gpuid()) {
      set_gpuid(from.gpuid());
    }
    if (from.has_showfullscreen()) {
      set_showfullscreen(from.showfullscreen());
    }
    if (from.has_windowstack()) {
      set_windowstack(from.windowstack());
    }
    if (from.has_isalarm()) {
      set_isalarm(from.isalarm());
    }
    if (from.has_alarminterval()) {
      set_alarminterval(from.alarminterval());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_showmaxfullscreen()) {
      set_showmaxfullscreen(from.showmaxfullscreen());
    }
    if (from.has_showminfullscreen()) {
      set_showminfullscreen(from.showminfullscreen());
    }
    if (from.has_fullscreenrect()) {
      mutable_fullscreenrect()->::TvWall::Rect::MergeFrom(from.fullscreenrect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_View::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_View::CopyFrom(const Packet_ElementDat_View& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_View::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_rect()) {
    if (!this->rect().IsInitialized()) return false;
  }
  for (int i = 0; i < cameraid_size(); i++) {
    if (!this->cameraid(i).IsInitialized()) return false;
  }
  if (has_fullscreenrect()) {
    if (!this->fullscreenrect().IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementDat_View::Swap(Packet_ElementDat_View* other) {
  if (other != this) {
    std::swap(winid_, other->winid_);
    std::swap(rect_, other->rect_);
    std::swap(viewtype_, other->viewtype_);
    std::swap(url_, other->url_);
    cameraid_.Swap(&other->cameraid_);
    std::swap(starttime_, other->starttime_);
    std::swap(keepstretch_, other->keepstretch_);
    std::swap(borderwidth_, other->borderwidth_);
    std::swap(showtitle_, other->showtitle_);
    std::swap(title_, other->title_);
    std::swap(pollinterval_, other->pollinterval_);
    std::swap(gpuid_, other->gpuid_);
    std::swap(showfullscreen_, other->showfullscreen_);
    std::swap(windowstack_, other->windowstack_);
    std::swap(isalarm_, other->isalarm_);
    std::swap(alarminterval_, other->alarminterval_);
    std::swap(showmaxfullscreen_, other->showmaxfullscreen_);
    std::swap(showminfullscreen_, other->showminfullscreen_);
    std::swap(fullscreenrect_, other->fullscreenrect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_View::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_View_descriptor_;
  metadata.reflection = Packet_ElementDat_View_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Packet_ElementDat_FocusPoint::Packet_ElementDat_FocusPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_FocusPoint::InitAsDefaultInstance() {
}

Packet_ElementDat_FocusPoint::Packet_ElementDat_FocusPoint(const Packet_ElementDat_FocusPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_FocusPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_FocusPoint::~Packet_ElementDat_FocusPoint() {
  SharedDtor();
}

void Packet_ElementDat_FocusPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_ElementDat_FocusPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_FocusPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_FocusPoint_descriptor_;
}

const Packet_ElementDat_FocusPoint& Packet_ElementDat_FocusPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_FocusPoint* Packet_ElementDat_FocusPoint::default_instance_ = NULL;

Packet_ElementDat_FocusPoint* Packet_ElementDat_FocusPoint::New() const {
  return new Packet_ElementDat_FocusPoint;
}

void Packet_ElementDat_FocusPoint::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_FocusPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Packet_ElementDat_FocusPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_FocusPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_FocusPoint::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_FocusPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_FocusPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_FocusPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_FocusPoint::MergeFrom(const Packet_ElementDat_FocusPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_FocusPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_FocusPoint::CopyFrom(const Packet_ElementDat_FocusPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_FocusPoint::IsInitialized() const {

  return true;
}

void Packet_ElementDat_FocusPoint::Swap(Packet_ElementDat_FocusPoint* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_FocusPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_FocusPoint_descriptor_;
  metadata.reflection = Packet_ElementDat_FocusPoint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_HotPoint::kGeometryFieldNumber;
const int Packet_ElementDat_HotPoint::kScreenIndexFieldNumber;
const int Packet_ElementDat_HotPoint::kLimitedMapFieldNumber;
const int Packet_ElementDat_HotPoint::kLimitedRecordFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_HotPoint::Packet_ElementDat_HotPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_HotPoint::InitAsDefaultInstance() {
  geometry_ = const_cast< ::TvWall::Rect*>(&::TvWall::Rect::default_instance());
}

Packet_ElementDat_HotPoint::Packet_ElementDat_HotPoint(const Packet_ElementDat_HotPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_HotPoint::SharedCtor() {
  _cached_size_ = 0;
  geometry_ = NULL;
  screenindex_ = 0;
  limitedmap_ = false;
  limitedrecord_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_HotPoint::~Packet_ElementDat_HotPoint() {
  SharedDtor();
}

void Packet_ElementDat_HotPoint::SharedDtor() {
  if (this != default_instance_) {
    delete geometry_;
  }
}

void Packet_ElementDat_HotPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_HotPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_HotPoint_descriptor_;
}

const Packet_ElementDat_HotPoint& Packet_ElementDat_HotPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_HotPoint* Packet_ElementDat_HotPoint::default_instance_ = NULL;

Packet_ElementDat_HotPoint* Packet_ElementDat_HotPoint::New() const {
  return new Packet_ElementDat_HotPoint;
}

void Packet_ElementDat_HotPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::TvWall::Rect::Clear();
    }
    screenindex_ = 0;
    limitedmap_ = false;
    limitedrecord_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_HotPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Rect geometry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_screenIndex;
        break;
      }

      // required int32 screenIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screenIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenindex_)));
          set_has_screenindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_limitedMap;
        break;
      }

      // required bool limitedMap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitedMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limitedmap_)));
          set_has_limitedmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limitedRecord;
        break;
      }

      // required bool limitedRecord = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitedRecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limitedrecord_)));
          set_has_limitedrecord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_HotPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Rect geometry = 1;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geometry(), output);
  }

  // required int32 screenIndex = 3;
  if (has_screenindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->screenindex(), output);
  }

  // required bool limitedMap = 4;
  if (has_limitedmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->limitedmap(), output);
  }

  // required bool limitedRecord = 5;
  if (has_limitedrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->limitedrecord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_HotPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Rect geometry = 1;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->geometry(), target);
  }

  // required int32 screenIndex = 3;
  if (has_screenindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->screenindex(), target);
  }

  // required bool limitedMap = 4;
  if (has_limitedmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->limitedmap(), target);
  }

  // required bool limitedRecord = 5;
  if (has_limitedrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->limitedrecord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_HotPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Rect geometry = 1;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // required int32 screenIndex = 3;
    if (has_screenindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenindex());
    }

    // required bool limitedMap = 4;
    if (has_limitedmap()) {
      total_size += 1 + 1;
    }

    // required bool limitedRecord = 5;
    if (has_limitedrecord()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_HotPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_HotPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_HotPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_HotPoint::MergeFrom(const Packet_ElementDat_HotPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geometry()) {
      mutable_geometry()->::TvWall::Rect::MergeFrom(from.geometry());
    }
    if (from.has_screenindex()) {
      set_screenindex(from.screenindex());
    }
    if (from.has_limitedmap()) {
      set_limitedmap(from.limitedmap());
    }
    if (from.has_limitedrecord()) {
      set_limitedrecord(from.limitedrecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_HotPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_HotPoint::CopyFrom(const Packet_ElementDat_HotPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_HotPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementDat_HotPoint::Swap(Packet_ElementDat_HotPoint* other) {
  if (other != this) {
    std::swap(geometry_, other->geometry_);
    std::swap(screenindex_, other->screenindex_);
    std::swap(limitedmap_, other->limitedmap_);
    std::swap(limitedrecord_, other->limitedrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_HotPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_HotPoint_descriptor_;
  metadata.reflection = Packet_ElementDat_HotPoint_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_ServerLayout::kNameFieldNumber;
const int Packet_ElementDat_ServerLayout::kLayoutDatFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_ServerLayout::Packet_ElementDat_ServerLayout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_ServerLayout::InitAsDefaultInstance() {
  layoutdat_ = const_cast< ::TvWall::Packet_ElementDat*>(&::TvWall::Packet_ElementDat::default_instance());
}

Packet_ElementDat_ServerLayout::Packet_ElementDat_ServerLayout(const Packet_ElementDat_ServerLayout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_ServerLayout::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  layoutdat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_ServerLayout::~Packet_ElementDat_ServerLayout() {
  SharedDtor();
}

void Packet_ElementDat_ServerLayout::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete layoutdat_;
  }
}

void Packet_ElementDat_ServerLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_ServerLayout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_ServerLayout_descriptor_;
}

const Packet_ElementDat_ServerLayout& Packet_ElementDat_ServerLayout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_ServerLayout* Packet_ElementDat_ServerLayout::default_instance_ = NULL;

Packet_ElementDat_ServerLayout* Packet_ElementDat_ServerLayout::New() const {
  return new Packet_ElementDat_ServerLayout;
}

void Packet_ElementDat_ServerLayout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_layoutdat()) {
      if (layoutdat_ != NULL) layoutdat_->::TvWall::Packet_ElementDat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_ServerLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layoutDat;
        break;
      }

      // required .TvWall.Packet.ElementDat layoutDat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layoutDat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layoutdat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_ServerLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .TvWall.Packet.ElementDat layoutDat = 2;
  if (has_layoutdat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layoutdat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_ServerLayout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .TvWall.Packet.ElementDat layoutDat = 2;
  if (has_layoutdat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layoutdat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_ServerLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .TvWall.Packet.ElementDat layoutDat = 2;
    if (has_layoutdat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layoutdat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_ServerLayout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_ServerLayout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_ServerLayout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_ServerLayout::MergeFrom(const Packet_ElementDat_ServerLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_layoutdat()) {
      mutable_layoutdat()->::TvWall::Packet_ElementDat::MergeFrom(from.layoutdat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_ServerLayout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_ServerLayout::CopyFrom(const Packet_ElementDat_ServerLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_ServerLayout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_layoutdat()) {
    if (!this->layoutdat().IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementDat_ServerLayout::Swap(Packet_ElementDat_ServerLayout* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(layoutdat_, other->layoutdat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_ServerLayout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_ServerLayout_descriptor_;
  metadata.reflection = Packet_ElementDat_ServerLayout_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_ServerLayoutLoop::kNameFieldNumber;
const int Packet_ElementDat_ServerLayoutLoop::kPollIntervalFieldNumber;
const int Packet_ElementDat_ServerLayoutLoop::kLayoutNameFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_ServerLayoutLoop::Packet_ElementDat_ServerLayoutLoop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_ServerLayoutLoop::InitAsDefaultInstance() {
}

Packet_ElementDat_ServerLayoutLoop::Packet_ElementDat_ServerLayoutLoop(const Packet_ElementDat_ServerLayoutLoop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_ServerLayoutLoop::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pollinterval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_ServerLayoutLoop::~Packet_ElementDat_ServerLayoutLoop() {
  SharedDtor();
}

void Packet_ElementDat_ServerLayoutLoop::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Packet_ElementDat_ServerLayoutLoop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_ServerLayoutLoop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_ServerLayoutLoop_descriptor_;
}

const Packet_ElementDat_ServerLayoutLoop& Packet_ElementDat_ServerLayoutLoop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_ServerLayoutLoop* Packet_ElementDat_ServerLayoutLoop::default_instance_ = NULL;

Packet_ElementDat_ServerLayoutLoop* Packet_ElementDat_ServerLayoutLoop::New() const {
  return new Packet_ElementDat_ServerLayoutLoop;
}

void Packet_ElementDat_ServerLayoutLoop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    pollinterval_ = 0u;
  }
  layoutname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_ServerLayoutLoop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pollInterval;
        break;
      }

      // required uint32 pollInterval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pollInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pollinterval_)));
          set_has_pollinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_layoutName;
        break;
      }

      // repeated string layoutName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layoutName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_layoutname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->layoutname(this->layoutname_size() - 1).data(),
            this->layoutname(this->layoutname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_layoutName;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_ServerLayoutLoop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 pollInterval = 2;
  if (has_pollinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pollinterval(), output);
  }

  // repeated string layoutName = 3;
  for (int i = 0; i < this->layoutname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->layoutname(i).data(), this->layoutname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->layoutname(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_ServerLayoutLoop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 pollInterval = 2;
  if (has_pollinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pollinterval(), target);
  }

  // repeated string layoutName = 3;
  for (int i = 0; i < this->layoutname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layoutname(i).data(), this->layoutname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->layoutname(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_ServerLayoutLoop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 pollInterval = 2;
    if (has_pollinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pollinterval());
    }

  }
  // repeated string layoutName = 3;
  total_size += 1 * this->layoutname_size();
  for (int i = 0; i < this->layoutname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->layoutname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_ServerLayoutLoop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_ServerLayoutLoop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_ServerLayoutLoop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_ServerLayoutLoop::MergeFrom(const Packet_ElementDat_ServerLayoutLoop& from) {
  GOOGLE_CHECK_NE(&from, this);
  layoutname_.MergeFrom(from.layoutname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pollinterval()) {
      set_pollinterval(from.pollinterval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_ServerLayoutLoop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_ServerLayoutLoop::CopyFrom(const Packet_ElementDat_ServerLayoutLoop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_ServerLayoutLoop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_ElementDat_ServerLayoutLoop::Swap(Packet_ElementDat_ServerLayoutLoop* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pollinterval_, other->pollinterval_);
    layoutname_.Swap(&other->layoutname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_ServerLayoutLoop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_ServerLayoutLoop_descriptor_;
  metadata.reflection = Packet_ElementDat_ServerLayoutLoop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_Map::kMapUrlFieldNumber;
const int Packet_ElementDat_Map::kMapFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_Map::Packet_ElementDat_Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_Map::InitAsDefaultInstance() {
}

Packet_ElementDat_Map::Packet_ElementDat_Map(const Packet_ElementDat_Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_Map::SharedCtor() {
  _cached_size_ = 0;
  mapurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_Map::~Packet_ElementDat_Map() {
  SharedDtor();
}

void Packet_ElementDat_Map::SharedDtor() {
  if (mapurl_ != &::google::protobuf::internal::kEmptyString) {
    delete mapurl_;
  }
  if (this != default_instance_) {
  }
}

void Packet_ElementDat_Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_Map_descriptor_;
}

const Packet_ElementDat_Map& Packet_ElementDat_Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_Map* Packet_ElementDat_Map::default_instance_ = NULL;

Packet_ElementDat_Map* Packet_ElementDat_Map::New() const {
  return new Packet_ElementDat_Map;
}

void Packet_ElementDat_Map::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mapurl()) {
      if (mapurl_ != &::google::protobuf::internal::kEmptyString) {
        mapurl_->clear();
      }
    }
  }
  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mapUrl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mapurl().data(), this->mapurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_map;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.Map map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_map;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mapUrl = 1;
  if (has_mapurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapurl().data(), this->mapurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mapurl(), output);
  }

  // repeated .TvWall.Packet.ElementDat.Map map = 2;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string mapUrl = 1;
  if (has_mapurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mapurl().data(), this->mapurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapurl(), target);
  }

  // repeated .TvWall.Packet.ElementDat.Map map = 2;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_Map::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mapUrl = 1;
    if (has_mapurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapurl());
    }

  }
  // repeated .TvWall.Packet.ElementDat.Map map = 2;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_Map::MergeFrom(const Packet_ElementDat_Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_.MergeFrom(from.map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapurl()) {
      set_mapurl(from.mapurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_Map::CopyFrom(const Packet_ElementDat_Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_Map::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < map_size(); i++) {
    if (!this->map(i).IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementDat_Map::Swap(Packet_ElementDat_Map* other) {
  if (other != this) {
    std::swap(mapurl_, other->mapurl_);
    map_.Swap(&other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_Map_descriptor_;
  metadata.reflection = Packet_ElementDat_Map_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat_GroupLoop::kViewsFieldNumber;
const int Packet_ElementDat_GroupLoop::kPollIntervalFieldNumber;
const int Packet_ElementDat_GroupLoop::kIsOnFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat_GroupLoop::Packet_ElementDat_GroupLoop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat_GroupLoop::InitAsDefaultInstance() {
}

Packet_ElementDat_GroupLoop::Packet_ElementDat_GroupLoop(const Packet_ElementDat_GroupLoop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat_GroupLoop::SharedCtor() {
  _cached_size_ = 0;
  pollinterval_ = 0u;
  ison_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat_GroupLoop::~Packet_ElementDat_GroupLoop() {
  SharedDtor();
}

void Packet_ElementDat_GroupLoop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_ElementDat_GroupLoop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat_GroupLoop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_GroupLoop_descriptor_;
}

const Packet_ElementDat_GroupLoop& Packet_ElementDat_GroupLoop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat_GroupLoop* Packet_ElementDat_GroupLoop::default_instance_ = NULL;

Packet_ElementDat_GroupLoop* Packet_ElementDat_GroupLoop::New() const {
  return new Packet_ElementDat_GroupLoop;
}

void Packet_ElementDat_GroupLoop::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    pollinterval_ = 0u;
    ison_ = false;
  }
  views_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat_GroupLoop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TvWall.Packet.ElementDat.View views = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_views:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_views()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_views;
        if (input->ExpectTag(16)) goto parse_pollInterval;
        break;
      }

      // required uint32 pollInterval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pollInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pollinterval_)));
          set_has_pollinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isOn;
        break;
      }

      // optional bool isOn = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ison_)));
          set_has_ison();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat_GroupLoop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TvWall.Packet.ElementDat.View views = 1;
  for (int i = 0; i < this->views_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->views(i), output);
  }

  // required uint32 pollInterval = 2;
  if (has_pollinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pollinterval(), output);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ison(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat_GroupLoop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TvWall.Packet.ElementDat.View views = 1;
  for (int i = 0; i < this->views_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->views(i), target);
  }

  // required uint32 pollInterval = 2;
  if (has_pollinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pollinterval(), target);
  }

  // optional bool isOn = 3;
  if (has_ison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ison(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat_GroupLoop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 pollInterval = 2;
    if (has_pollinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pollinterval());
    }

    // optional bool isOn = 3;
    if (has_ison()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TvWall.Packet.ElementDat.View views = 1;
  total_size += 1 * this->views_size();
  for (int i = 0; i < this->views_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->views(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat_GroupLoop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat_GroupLoop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat_GroupLoop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat_GroupLoop::MergeFrom(const Packet_ElementDat_GroupLoop& from) {
  GOOGLE_CHECK_NE(&from, this);
  views_.MergeFrom(from.views_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pollinterval()) {
      set_pollinterval(from.pollinterval());
    }
    if (from.has_ison()) {
      set_ison(from.ison());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat_GroupLoop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat_GroupLoop::CopyFrom(const Packet_ElementDat_GroupLoop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat_GroupLoop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < views_size(); i++) {
    if (!this->views(i).IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementDat_GroupLoop::Swap(Packet_ElementDat_GroupLoop* other) {
  if (other != this) {
    views_.Swap(&other->views_);
    std::swap(pollinterval_, other->pollinterval_);
    std::swap(ison_, other->ison_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat_GroupLoop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_GroupLoop_descriptor_;
  metadata.reflection = Packet_ElementDat_GroupLoop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementDat::kScreenFieldNumber;
const int Packet_ElementDat::kViewFieldNumber;
const int Packet_ElementDat::kCamGrpFieldNumber;
const int Packet_ElementDat::kHotPointFieldNumber;
const int Packet_ElementDat::kLocalMovieFieldNumber;
const int Packet_ElementDat::kFlashFieldNumber;
const int Packet_ElementDat::kServerNameFieldNumber;
const int Packet_ElementDat::kServLayoutFieldNumber;
const int Packet_ElementDat::kGuidFieldNumber;
const int Packet_ElementDat::kMapFieldNumber;
const int Packet_ElementDat::kCurrentLayoutFieldNumber;
const int Packet_ElementDat::kServLayoutLoopFieldNumber;
const int Packet_ElementDat::kCurrentLayoutLoopFieldNumber;
const int Packet_ElementDat::kNvrLstFieldNumber;
const int Packet_ElementDat::kGroupLoopFieldNumber;
const int Packet_ElementDat::kMaxPlaybackRateFieldNumber;
const int Packet_ElementDat::kFmpFieldNumber;
const int Packet_ElementDat::kTvwallindexFieldNumber;
const int Packet_ElementDat::kAnoleVersionFieldNumber;
const int Packet_ElementDat::kSNFieldNumber;
#endif  // !_MSC_VER

Packet_ElementDat::Packet_ElementDat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementDat::InitAsDefaultInstance() {
  hotpoint_ = const_cast< ::TvWall::Packet_ElementDat_HotPoint*>(&::TvWall::Packet_ElementDat_HotPoint::default_instance());
  guid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
  grouploop_ = const_cast< ::TvWall::Packet_ElementDat_GroupLoop*>(&::TvWall::Packet_ElementDat_GroupLoop::default_instance());
  fmp_ = const_cast< ::TvWall::FMP*>(&::TvWall::FMP::default_instance());
}

Packet_ElementDat::Packet_ElementDat(const Packet_ElementDat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementDat::SharedCtor() {
  _cached_size_ = 0;
  hotpoint_ = NULL;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_ = NULL;
  currentlayout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentlayoutloop_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grouploop_ = NULL;
  maxplaybackrate_ = 0u;
  fmp_ = NULL;
  tvwallindex_ = 0;
  anoleversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementDat::~Packet_ElementDat() {
  SharedDtor();
}

void Packet_ElementDat::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (currentlayout_ != &::google::protobuf::internal::kEmptyString) {
    delete currentlayout_;
  }
  if (currentlayoutloop_ != &::google::protobuf::internal::kEmptyString) {
    delete currentlayoutloop_;
  }
  if (anoleversion_ != &::google::protobuf::internal::kEmptyString) {
    delete anoleversion_;
  }
  if (sn_ != &::google::protobuf::internal::kEmptyString) {
    delete sn_;
  }
  if (this != default_instance_) {
    delete hotpoint_;
    delete guid_;
    delete grouploop_;
    delete fmp_;
  }
}

void Packet_ElementDat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementDat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementDat_descriptor_;
}

const Packet_ElementDat& Packet_ElementDat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementDat* Packet_ElementDat::default_instance_ = NULL;

Packet_ElementDat* Packet_ElementDat::New() const {
  return new Packet_ElementDat;
}

void Packet_ElementDat::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_hotpoint()) {
      if (hotpoint_ != NULL) hotpoint_->::TvWall::Packet_ElementDat_HotPoint::Clear();
    }
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guid()) {
      if (guid_ != NULL) guid_->::TvWall::Guid::Clear();
    }
    if (has_currentlayout()) {
      if (currentlayout_ != &::google::protobuf::internal::kEmptyString) {
        currentlayout_->clear();
      }
    }
    if (has_currentlayoutloop()) {
      if (currentlayoutloop_ != &::google::protobuf::internal::kEmptyString) {
        currentlayoutloop_->clear();
      }
    }
    if (has_grouploop()) {
      if (grouploop_ != NULL) grouploop_->::TvWall::Packet_ElementDat_GroupLoop::Clear();
    }
    maxplaybackrate_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_fmp()) {
      if (fmp_ != NULL) fmp_->::TvWall::FMP::Clear();
    }
    tvwallindex_ = 0;
    if (has_anoleversion()) {
      if (anoleversion_ != &::google::protobuf::internal::kEmptyString) {
        anoleversion_->clear();
      }
    }
    if (has_sn()) {
      if (sn_ != &::google::protobuf::internal::kEmptyString) {
        sn_->clear();
      }
    }
  }
  screen_.Clear();
  view_.Clear();
  camgrp_.Clear();
  localmovie_.Clear();
  flash_.Clear();
  servlayout_.Clear();
  map_.Clear();
  servlayoutloop_.Clear();
  nvrlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementDat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TvWall.Packet.ElementDat.Screen screen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_screen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_screen;
        if (input->ExpectTag(18)) goto parse_view;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.View view = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_view()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_view;
        if (input->ExpectTag(26)) goto parse_camGrp;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camGrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camgrp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_camGrp;
        if (input->ExpectTag(34)) goto parse_hotPoint;
        break;
      }

      // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_localMovie;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.LocalMovie localMovie = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localMovie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_localmovie()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_localMovie;
        if (input->ExpectTag(50)) goto parse_flash;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.Flash flash = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flash()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_flash;
        if (input->ExpectTag(58)) goto parse_serverName;
        break;
      }

      // required string serverName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_servLayout;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.ServerLayout servLayout = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servLayout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servlayout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_servLayout;
        if (input->ExpectTag(74)) goto parse_guid;
        break;
      }

      // optional .TvWall.Guid guid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_map;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.Map map = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_map;
        if (input->ExpectTag(90)) goto parse_currentLayout;
        break;
      }

      // optional string currentLayout = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentLayout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentlayout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentlayout().data(), this->currentlayout().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_servLayoutLoop;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.ServerLayoutLoop servLayoutLoop = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servLayoutLoop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servlayoutloop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_servLayoutLoop;
        if (input->ExpectTag(106)) goto parse_currentLayoutLoop;
        break;
      }

      // optional string currentLayoutLoop = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentLayoutLoop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentlayoutloop()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentlayoutloop().data(), this->currentlayoutloop().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_nvrLst;
        break;
      }

      // repeated .TvWall.NVR nvrLst = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nvrLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nvrlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_nvrLst;
        if (input->ExpectTag(122)) goto parse_groupLoop;
        break;
      }

      // optional .TvWall.Packet.ElementDat.GroupLoop groupLoop = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupLoop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grouploop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_maxPlaybackRate;
        break;
      }

      // optional uint32 maxPlaybackRate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxPlaybackRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxplaybackrate_)));
          set_has_maxplaybackrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_fmp;
        break;
      }

      // optional .TvWall.FMP fmp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_tvwallindex;
        break;
      }

      // optional int32 tvwallindex = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tvwallindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tvwallindex_)));
          set_has_tvwallindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_anoleVersion;
        break;
      }

      // optional string anoleVersion = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anoleVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anoleversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anoleversion().data(), this->anoleversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_SN;
        break;
      }

      // optional string SN = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sn().data(), this->sn().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementDat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TvWall.Packet.ElementDat.Screen screen = 1;
  for (int i = 0; i < this->screen_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->screen(i), output);
  }

  // repeated .TvWall.Packet.ElementDat.View view = 2;
  for (int i = 0; i < this->view_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->view(i), output);
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
  for (int i = 0; i < this->camgrp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camgrp(i), output);
  }

  // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 4;
  if (has_hotpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hotpoint(), output);
  }

  // repeated .TvWall.Packet.ElementDat.LocalMovie localMovie = 5;
  for (int i = 0; i < this->localmovie_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->localmovie(i), output);
  }

  // repeated .TvWall.Packet.ElementDat.Flash flash = 6;
  for (int i = 0; i < this->flash_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->flash(i), output);
  }

  // required string serverName = 7;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->servername(), output);
  }

  // repeated .TvWall.Packet.ElementDat.ServerLayout servLayout = 8;
  for (int i = 0; i < this->servlayout_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->servlayout(i), output);
  }

  // optional .TvWall.Guid guid = 9;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->guid(), output);
  }

  // repeated .TvWall.Packet.ElementDat.Map map = 10;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->map(i), output);
  }

  // optional string currentLayout = 11;
  if (has_currentlayout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentlayout().data(), this->currentlayout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->currentlayout(), output);
  }

  // repeated .TvWall.Packet.ElementDat.ServerLayoutLoop servLayoutLoop = 12;
  for (int i = 0; i < this->servlayoutloop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->servlayoutloop(i), output);
  }

  // optional string currentLayoutLoop = 13;
  if (has_currentlayoutloop()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentlayoutloop().data(), this->currentlayoutloop().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->currentlayoutloop(), output);
  }

  // repeated .TvWall.NVR nvrLst = 14;
  for (int i = 0; i < this->nvrlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->nvrlst(i), output);
  }

  // optional .TvWall.Packet.ElementDat.GroupLoop groupLoop = 15;
  if (has_grouploop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->grouploop(), output);
  }

  // optional uint32 maxPlaybackRate = 16;
  if (has_maxplaybackrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->maxplaybackrate(), output);
  }

  // optional .TvWall.FMP fmp = 17;
  if (has_fmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->fmp(), output);
  }

  // optional int32 tvwallindex = 18;
  if (has_tvwallindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->tvwallindex(), output);
  }

  // optional string anoleVersion = 19;
  if (has_anoleversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anoleversion().data(), this->anoleversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->anoleversion(), output);
  }

  // optional string SN = 20;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->sn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementDat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TvWall.Packet.ElementDat.Screen screen = 1;
  for (int i = 0; i < this->screen_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->screen(i), target);
  }

  // repeated .TvWall.Packet.ElementDat.View view = 2;
  for (int i = 0; i < this->view_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->view(i), target);
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
  for (int i = 0; i < this->camgrp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->camgrp(i), target);
  }

  // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 4;
  if (has_hotpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hotpoint(), target);
  }

  // repeated .TvWall.Packet.ElementDat.LocalMovie localMovie = 5;
  for (int i = 0; i < this->localmovie_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->localmovie(i), target);
  }

  // repeated .TvWall.Packet.ElementDat.Flash flash = 6;
  for (int i = 0; i < this->flash_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->flash(i), target);
  }

  // required string serverName = 7;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->servername(), target);
  }

  // repeated .TvWall.Packet.ElementDat.ServerLayout servLayout = 8;
  for (int i = 0; i < this->servlayout_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->servlayout(i), target);
  }

  // optional .TvWall.Guid guid = 9;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->guid(), target);
  }

  // repeated .TvWall.Packet.ElementDat.Map map = 10;
  for (int i = 0; i < this->map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->map(i), target);
  }

  // optional string currentLayout = 11;
  if (has_currentlayout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentlayout().data(), this->currentlayout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->currentlayout(), target);
  }

  // repeated .TvWall.Packet.ElementDat.ServerLayoutLoop servLayoutLoop = 12;
  for (int i = 0; i < this->servlayoutloop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->servlayoutloop(i), target);
  }

  // optional string currentLayoutLoop = 13;
  if (has_currentlayoutloop()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentlayoutloop().data(), this->currentlayoutloop().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->currentlayoutloop(), target);
  }

  // repeated .TvWall.NVR nvrLst = 14;
  for (int i = 0; i < this->nvrlst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->nvrlst(i), target);
  }

  // optional .TvWall.Packet.ElementDat.GroupLoop groupLoop = 15;
  if (has_grouploop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->grouploop(), target);
  }

  // optional uint32 maxPlaybackRate = 16;
  if (has_maxplaybackrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->maxplaybackrate(), target);
  }

  // optional .TvWall.FMP fmp = 17;
  if (has_fmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->fmp(), target);
  }

  // optional int32 tvwallindex = 18;
  if (has_tvwallindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->tvwallindex(), target);
  }

  // optional string anoleVersion = 19;
  if (has_anoleversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anoleversion().data(), this->anoleversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->anoleversion(), target);
  }

  // optional string SN = 20;
  if (has_sn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sn().data(), this->sn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->sn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementDat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 4;
    if (has_hotpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotpoint());
    }

    // required string serverName = 7;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TvWall.Guid guid = 9;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guid());
    }

    // optional string currentLayout = 11;
    if (has_currentlayout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentlayout());
    }

    // optional string currentLayoutLoop = 13;
    if (has_currentlayoutloop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentlayoutloop());
    }

    // optional .TvWall.Packet.ElementDat.GroupLoop groupLoop = 15;
    if (has_grouploop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grouploop());
    }

    // optional uint32 maxPlaybackRate = 16;
    if (has_maxplaybackrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxplaybackrate());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .TvWall.FMP fmp = 17;
    if (has_fmp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmp());
    }

    // optional int32 tvwallindex = 18;
    if (has_tvwallindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tvwallindex());
    }

    // optional string anoleVersion = 19;
    if (has_anoleversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anoleversion());
    }

    // optional string SN = 20;
    if (has_sn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

  }
  // repeated .TvWall.Packet.ElementDat.Screen screen = 1;
  total_size += 1 * this->screen_size();
  for (int i = 0; i < this->screen_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->screen(i));
  }

  // repeated .TvWall.Packet.ElementDat.View view = 2;
  total_size += 1 * this->view_size();
  for (int i = 0; i < this->view_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->view(i));
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
  total_size += 1 * this->camgrp_size();
  for (int i = 0; i < this->camgrp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camgrp(i));
  }

  // repeated .TvWall.Packet.ElementDat.LocalMovie localMovie = 5;
  total_size += 1 * this->localmovie_size();
  for (int i = 0; i < this->localmovie_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->localmovie(i));
  }

  // repeated .TvWall.Packet.ElementDat.Flash flash = 6;
  total_size += 1 * this->flash_size();
  for (int i = 0; i < this->flash_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flash(i));
  }

  // repeated .TvWall.Packet.ElementDat.ServerLayout servLayout = 8;
  total_size += 1 * this->servlayout_size();
  for (int i = 0; i < this->servlayout_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servlayout(i));
  }

  // repeated .TvWall.Packet.ElementDat.Map map = 10;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map(i));
  }

  // repeated .TvWall.Packet.ElementDat.ServerLayoutLoop servLayoutLoop = 12;
  total_size += 1 * this->servlayoutloop_size();
  for (int i = 0; i < this->servlayoutloop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servlayoutloop(i));
  }

  // repeated .TvWall.NVR nvrLst = 14;
  total_size += 1 * this->nvrlst_size();
  for (int i = 0; i < this->nvrlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nvrlst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementDat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementDat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementDat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementDat::MergeFrom(const Packet_ElementDat& from) {
  GOOGLE_CHECK_NE(&from, this);
  screen_.MergeFrom(from.screen_);
  view_.MergeFrom(from.view_);
  camgrp_.MergeFrom(from.camgrp_);
  localmovie_.MergeFrom(from.localmovie_);
  flash_.MergeFrom(from.flash_);
  servlayout_.MergeFrom(from.servlayout_);
  map_.MergeFrom(from.map_);
  servlayoutloop_.MergeFrom(from.servlayoutloop_);
  nvrlst_.MergeFrom(from.nvrlst_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_hotpoint()) {
      mutable_hotpoint()->::TvWall::Packet_ElementDat_HotPoint::MergeFrom(from.hotpoint());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guid()) {
      mutable_guid()->::TvWall::Guid::MergeFrom(from.guid());
    }
    if (from.has_currentlayout()) {
      set_currentlayout(from.currentlayout());
    }
    if (from.has_currentlayoutloop()) {
      set_currentlayoutloop(from.currentlayoutloop());
    }
    if (from.has_grouploop()) {
      mutable_grouploop()->::TvWall::Packet_ElementDat_GroupLoop::MergeFrom(from.grouploop());
    }
    if (from.has_maxplaybackrate()) {
      set_maxplaybackrate(from.maxplaybackrate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fmp()) {
      mutable_fmp()->::TvWall::FMP::MergeFrom(from.fmp());
    }
    if (from.has_tvwallindex()) {
      set_tvwallindex(from.tvwallindex());
    }
    if (from.has_anoleversion()) {
      set_anoleversion(from.anoleversion());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementDat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementDat::CopyFrom(const Packet_ElementDat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementDat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;

  for (int i = 0; i < screen_size(); i++) {
    if (!this->screen(i).IsInitialized()) return false;
  }
  for (int i = 0; i < view_size(); i++) {
    if (!this->view(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camgrp_size(); i++) {
    if (!this->camgrp(i).IsInitialized()) return false;
  }
  if (has_hotpoint()) {
    if (!this->hotpoint().IsInitialized()) return false;
  }
  for (int i = 0; i < localmovie_size(); i++) {
    if (!this->localmovie(i).IsInitialized()) return false;
  }
  for (int i = 0; i < flash_size(); i++) {
    if (!this->flash(i).IsInitialized()) return false;
  }
  for (int i = 0; i < servlayout_size(); i++) {
    if (!this->servlayout(i).IsInitialized()) return false;
  }
  if (has_guid()) {
    if (!this->guid().IsInitialized()) return false;
  }
  for (int i = 0; i < map_size(); i++) {
    if (!this->map(i).IsInitialized()) return false;
  }
  for (int i = 0; i < servlayoutloop_size(); i++) {
    if (!this->servlayoutloop(i).IsInitialized()) return false;
  }
  for (int i = 0; i < nvrlst_size(); i++) {
    if (!this->nvrlst(i).IsInitialized()) return false;
  }
  if (has_grouploop()) {
    if (!this->grouploop().IsInitialized()) return false;
  }
  if (has_fmp()) {
    if (!this->fmp().IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementDat::Swap(Packet_ElementDat* other) {
  if (other != this) {
    screen_.Swap(&other->screen_);
    view_.Swap(&other->view_);
    camgrp_.Swap(&other->camgrp_);
    std::swap(hotpoint_, other->hotpoint_);
    localmovie_.Swap(&other->localmovie_);
    flash_.Swap(&other->flash_);
    std::swap(servername_, other->servername_);
    servlayout_.Swap(&other->servlayout_);
    std::swap(guid_, other->guid_);
    map_.Swap(&other->map_);
    std::swap(currentlayout_, other->currentlayout_);
    servlayoutloop_.Swap(&other->servlayoutloop_);
    std::swap(currentlayoutloop_, other->currentlayoutloop_);
    nvrlst_.Swap(&other->nvrlst_);
    std::swap(grouploop_, other->grouploop_);
    std::swap(maxplaybackrate_, other->maxplaybackrate_);
    std::swap(fmp_, other->fmp_);
    std::swap(tvwallindex_, other->tvwallindex_);
    std::swap(anoleversion_, other->anoleversion_);
    std::swap(sn_, other->sn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementDat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementDat_descriptor_;
  metadata.reflection = Packet_ElementDat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementMaster_MasterLayout_ServerPos::kServerNameFieldNumber;
const int Packet_ElementMaster_MasterLayout_ServerPos::kGuidFieldNumber;
const int Packet_ElementMaster_MasterLayout_ServerPos::kPointFieldNumber;
#endif  // !_MSC_VER

Packet_ElementMaster_MasterLayout_ServerPos::Packet_ElementMaster_MasterLayout_ServerPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementMaster_MasterLayout_ServerPos::InitAsDefaultInstance() {
  guid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
  point_ = const_cast< ::TvWall::Point*>(&::TvWall::Point::default_instance());
}

Packet_ElementMaster_MasterLayout_ServerPos::Packet_ElementMaster_MasterLayout_ServerPos(const Packet_ElementMaster_MasterLayout_ServerPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementMaster_MasterLayout_ServerPos::SharedCtor() {
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_ = NULL;
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementMaster_MasterLayout_ServerPos::~Packet_ElementMaster_MasterLayout_ServerPos() {
  SharedDtor();
}

void Packet_ElementMaster_MasterLayout_ServerPos::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
    delete guid_;
    delete point_;
  }
}

void Packet_ElementMaster_MasterLayout_ServerPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementMaster_MasterLayout_ServerPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementMaster_MasterLayout_ServerPos_descriptor_;
}

const Packet_ElementMaster_MasterLayout_ServerPos& Packet_ElementMaster_MasterLayout_ServerPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementMaster_MasterLayout_ServerPos* Packet_ElementMaster_MasterLayout_ServerPos::default_instance_ = NULL;

Packet_ElementMaster_MasterLayout_ServerPos* Packet_ElementMaster_MasterLayout_ServerPos::New() const {
  return new Packet_ElementMaster_MasterLayout_ServerPos;
}

void Packet_ElementMaster_MasterLayout_ServerPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_guid()) {
      if (guid_ != NULL) guid_->::TvWall::Guid::Clear();
    }
    if (has_point()) {
      if (point_ != NULL) point_->::TvWall::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementMaster_MasterLayout_ServerPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serverName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guid;
        break;
      }

      // required .TvWall.Guid guid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_point;
        break;
      }

      // required .TvWall.Point point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementMaster_MasterLayout_ServerPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string serverName = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servername(), output);
  }

  // required .TvWall.Guid guid = 2;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guid(), output);
  }

  // required .TvWall.Point point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementMaster_MasterLayout_ServerPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string serverName = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servername(), target);
  }

  // required .TvWall.Guid guid = 2;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guid(), target);
  }

  // required .TvWall.Point point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementMaster_MasterLayout_ServerPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string serverName = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // required .TvWall.Guid guid = 2;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guid());
    }

    // required .TvWall.Point point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementMaster_MasterLayout_ServerPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementMaster_MasterLayout_ServerPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementMaster_MasterLayout_ServerPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementMaster_MasterLayout_ServerPos::MergeFrom(const Packet_ElementMaster_MasterLayout_ServerPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_guid()) {
      mutable_guid()->::TvWall::Guid::MergeFrom(from.guid());
    }
    if (from.has_point()) {
      mutable_point()->::TvWall::Point::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementMaster_MasterLayout_ServerPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementMaster_MasterLayout_ServerPos::CopyFrom(const Packet_ElementMaster_MasterLayout_ServerPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementMaster_MasterLayout_ServerPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_guid()) {
    if (!this->guid().IsInitialized()) return false;
  }
  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementMaster_MasterLayout_ServerPos::Swap(Packet_ElementMaster_MasterLayout_ServerPos* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(guid_, other->guid_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementMaster_MasterLayout_ServerPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementMaster_MasterLayout_ServerPos_descriptor_;
  metadata.reflection = Packet_ElementMaster_MasterLayout_ServerPos_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementMaster_MasterLayout_MasLayout::kLyoutNameFieldNumber;
const int Packet_ElementMaster_MasterLayout_MasLayout::kSpFieldNumber;
const int Packet_ElementMaster_MasterLayout_MasLayout::kServerlnFieldNumber;
#endif  // !_MSC_VER

Packet_ElementMaster_MasterLayout_MasLayout::Packet_ElementMaster_MasterLayout_MasLayout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementMaster_MasterLayout_MasLayout::InitAsDefaultInstance() {
}

Packet_ElementMaster_MasterLayout_MasLayout::Packet_ElementMaster_MasterLayout_MasLayout(const Packet_ElementMaster_MasterLayout_MasLayout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementMaster_MasterLayout_MasLayout::SharedCtor() {
  _cached_size_ = 0;
  lyoutname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementMaster_MasterLayout_MasLayout::~Packet_ElementMaster_MasterLayout_MasLayout() {
  SharedDtor();
}

void Packet_ElementMaster_MasterLayout_MasLayout::SharedDtor() {
  if (lyoutname_ != &::google::protobuf::internal::kEmptyString) {
    delete lyoutname_;
  }
  if (this != default_instance_) {
  }
}

void Packet_ElementMaster_MasterLayout_MasLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementMaster_MasterLayout_MasLayout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementMaster_MasterLayout_MasLayout_descriptor_;
}

const Packet_ElementMaster_MasterLayout_MasLayout& Packet_ElementMaster_MasterLayout_MasLayout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementMaster_MasterLayout_MasLayout* Packet_ElementMaster_MasterLayout_MasLayout::default_instance_ = NULL;

Packet_ElementMaster_MasterLayout_MasLayout* Packet_ElementMaster_MasterLayout_MasLayout::New() const {
  return new Packet_ElementMaster_MasterLayout_MasLayout;
}

void Packet_ElementMaster_MasterLayout_MasLayout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lyoutname()) {
      if (lyoutname_ != &::google::protobuf::internal::kEmptyString) {
        lyoutname_->clear();
      }
    }
  }
  sp_.Clear();
  serverln_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementMaster_MasterLayout_MasLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string lyoutName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lyoutname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lyoutname().data(), this->lyoutname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sp;
        break;
      }

      // repeated .TvWall.Packet.ElementMaster.MasterLayout.ServerPos sp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sp;
        if (input->ExpectTag(26)) goto parse_serverln;
        break;
      }

      // repeated string serverln = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverln:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_serverln()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverln(this->serverln_size() - 1).data(),
            this->serverln(this->serverln_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serverln;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementMaster_MasterLayout_MasLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string lyoutName = 1;
  if (has_lyoutname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lyoutname().data(), this->lyoutname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lyoutname(), output);
  }

  // repeated .TvWall.Packet.ElementMaster.MasterLayout.ServerPos sp = 2;
  for (int i = 0; i < this->sp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sp(i), output);
  }

  // repeated string serverln = 3;
  for (int i = 0; i < this->serverln_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->serverln(i).data(), this->serverln(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->serverln(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementMaster_MasterLayout_MasLayout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string lyoutName = 1;
  if (has_lyoutname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lyoutname().data(), this->lyoutname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lyoutname(), target);
  }

  // repeated .TvWall.Packet.ElementMaster.MasterLayout.ServerPos sp = 2;
  for (int i = 0; i < this->sp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sp(i), target);
  }

  // repeated string serverln = 3;
  for (int i = 0; i < this->serverln_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverln(i).data(), this->serverln(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->serverln(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementMaster_MasterLayout_MasLayout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string lyoutName = 1;
    if (has_lyoutname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lyoutname());
    }

  }
  // repeated .TvWall.Packet.ElementMaster.MasterLayout.ServerPos sp = 2;
  total_size += 1 * this->sp_size();
  for (int i = 0; i < this->sp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sp(i));
  }

  // repeated string serverln = 3;
  total_size += 1 * this->serverln_size();
  for (int i = 0; i < this->serverln_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->serverln(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementMaster_MasterLayout_MasLayout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementMaster_MasterLayout_MasLayout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementMaster_MasterLayout_MasLayout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementMaster_MasterLayout_MasLayout::MergeFrom(const Packet_ElementMaster_MasterLayout_MasLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  sp_.MergeFrom(from.sp_);
  serverln_.MergeFrom(from.serverln_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lyoutname()) {
      set_lyoutname(from.lyoutname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementMaster_MasterLayout_MasLayout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementMaster_MasterLayout_MasLayout::CopyFrom(const Packet_ElementMaster_MasterLayout_MasLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementMaster_MasterLayout_MasLayout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < sp_size(); i++) {
    if (!this->sp(i).IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementMaster_MasterLayout_MasLayout::Swap(Packet_ElementMaster_MasterLayout_MasLayout* other) {
  if (other != this) {
    std::swap(lyoutname_, other->lyoutname_);
    sp_.Swap(&other->sp_);
    serverln_.Swap(&other->serverln_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementMaster_MasterLayout_MasLayout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementMaster_MasterLayout_MasLayout_descriptor_;
  metadata.reflection = Packet_ElementMaster_MasterLayout_MasLayout_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementMaster_MasterLayout::kMasterLayoutFieldNumber;
#endif  // !_MSC_VER

Packet_ElementMaster_MasterLayout::Packet_ElementMaster_MasterLayout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementMaster_MasterLayout::InitAsDefaultInstance() {
}

Packet_ElementMaster_MasterLayout::Packet_ElementMaster_MasterLayout(const Packet_ElementMaster_MasterLayout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementMaster_MasterLayout::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementMaster_MasterLayout::~Packet_ElementMaster_MasterLayout() {
  SharedDtor();
}

void Packet_ElementMaster_MasterLayout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_ElementMaster_MasterLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementMaster_MasterLayout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementMaster_MasterLayout_descriptor_;
}

const Packet_ElementMaster_MasterLayout& Packet_ElementMaster_MasterLayout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementMaster_MasterLayout* Packet_ElementMaster_MasterLayout::default_instance_ = NULL;

Packet_ElementMaster_MasterLayout* Packet_ElementMaster_MasterLayout::New() const {
  return new Packet_ElementMaster_MasterLayout;
}

void Packet_ElementMaster_MasterLayout::Clear() {
  masterlayout_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementMaster_MasterLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TvWall.Packet.ElementMaster.MasterLayout.MasLayout masterLayout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masterLayout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_masterlayout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_masterLayout;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementMaster_MasterLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TvWall.Packet.ElementMaster.MasterLayout.MasLayout masterLayout = 1;
  for (int i = 0; i < this->masterlayout_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->masterlayout(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementMaster_MasterLayout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TvWall.Packet.ElementMaster.MasterLayout.MasLayout masterLayout = 1;
  for (int i = 0; i < this->masterlayout_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->masterlayout(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementMaster_MasterLayout::ByteSize() const {
  int total_size = 0;

  // repeated .TvWall.Packet.ElementMaster.MasterLayout.MasLayout masterLayout = 1;
  total_size += 1 * this->masterlayout_size();
  for (int i = 0; i < this->masterlayout_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->masterlayout(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementMaster_MasterLayout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementMaster_MasterLayout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementMaster_MasterLayout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementMaster_MasterLayout::MergeFrom(const Packet_ElementMaster_MasterLayout& from) {
  GOOGLE_CHECK_NE(&from, this);
  masterlayout_.MergeFrom(from.masterlayout_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementMaster_MasterLayout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementMaster_MasterLayout::CopyFrom(const Packet_ElementMaster_MasterLayout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementMaster_MasterLayout::IsInitialized() const {

  for (int i = 0; i < masterlayout_size(); i++) {
    if (!this->masterlayout(i).IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementMaster_MasterLayout::Swap(Packet_ElementMaster_MasterLayout* other) {
  if (other != this) {
    masterlayout_.Swap(&other->masterlayout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementMaster_MasterLayout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementMaster_MasterLayout_descriptor_;
  metadata.reflection = Packet_ElementMaster_MasterLayout_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_ElementMaster::kTokenFieldNumber;
const int Packet_ElementMaster::kSerFieldNumber;
const int Packet_ElementMaster::kMasterlyoutFieldNumber;
#endif  // !_MSC_VER

Packet_ElementMaster::Packet_ElementMaster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_ElementMaster::InitAsDefaultInstance() {
  masterlyout_ = const_cast< ::TvWall::Packet_ElementMaster_MasterLayout*>(&::TvWall::Packet_ElementMaster_MasterLayout::default_instance());
}

Packet_ElementMaster::Packet_ElementMaster(const Packet_ElementMaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_ElementMaster::SharedCtor() {
  _cached_size_ = 0;
  token_ = 0;
  masterlyout_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_ElementMaster::~Packet_ElementMaster() {
  SharedDtor();
}

void Packet_ElementMaster::SharedDtor() {
  if (this != default_instance_) {
    delete masterlyout_;
  }
}

void Packet_ElementMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_ElementMaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_ElementMaster_descriptor_;
}

const Packet_ElementMaster& Packet_ElementMaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_ElementMaster* Packet_ElementMaster::default_instance_ = NULL;

Packet_ElementMaster* Packet_ElementMaster::New() const {
  return new Packet_ElementMaster;
}

void Packet_ElementMaster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    token_ = 0;
    if (has_masterlyout()) {
      if (masterlyout_ != NULL) masterlyout_->::TvWall::Packet_ElementMaster_MasterLayout::Clear();
    }
  }
  ser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_ElementMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ser;
        break;
      }

      // repeated .TvWall.Packet.Session.LoginMasterAck.Server ser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ser;
        if (input->ExpectTag(26)) goto parse_masterlyout;
        break;
      }

      // required .TvWall.Packet.ElementMaster.MasterLayout masterlyout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masterlyout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_masterlyout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_ElementMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->token(), output);
  }

  // repeated .TvWall.Packet.Session.LoginMasterAck.Server ser = 2;
  for (int i = 0; i < this->ser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ser(i), output);
  }

  // required .TvWall.Packet.ElementMaster.MasterLayout masterlyout = 3;
  if (has_masterlyout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->masterlyout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_ElementMaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 token = 1;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->token(), target);
  }

  // repeated .TvWall.Packet.Session.LoginMasterAck.Server ser = 2;
  for (int i = 0; i < this->ser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ser(i), target);
  }

  // required .TvWall.Packet.ElementMaster.MasterLayout masterlyout = 3;
  if (has_masterlyout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->masterlyout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_ElementMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token());
    }

    // required .TvWall.Packet.ElementMaster.MasterLayout masterlyout = 3;
    if (has_masterlyout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->masterlyout());
    }

  }
  // repeated .TvWall.Packet.Session.LoginMasterAck.Server ser = 2;
  total_size += 1 * this->ser_size();
  for (int i = 0; i < this->ser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ser(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_ElementMaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_ElementMaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_ElementMaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_ElementMaster::MergeFrom(const Packet_ElementMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  ser_.MergeFrom(from.ser_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_masterlyout()) {
      mutable_masterlyout()->::TvWall::Packet_ElementMaster_MasterLayout::MergeFrom(from.masterlyout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_ElementMaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_ElementMaster::CopyFrom(const Packet_ElementMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_ElementMaster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < ser_size(); i++) {
    if (!this->ser(i).IsInitialized()) return false;
  }
  if (has_masterlyout()) {
    if (!this->masterlyout().IsInitialized()) return false;
  }
  return true;
}

void Packet_ElementMaster::Swap(Packet_ElementMaster* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    ser_.Swap(&other->ser_);
    std::swap(masterlyout_, other->masterlyout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_ElementMaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_ElementMaster_descriptor_;
  metadata.reflection = Packet_ElementMaster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Ctrl_ScreenSplitCtrl::kScreenIndexFieldNumber;
const int Packet_Ctrl_ScreenSplitCtrl::kRowFieldNumber;
const int Packet_Ctrl_ScreenSplitCtrl::kColFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ScreenSplitCtrl::Packet_Ctrl_ScreenSplitCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ScreenSplitCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_ScreenSplitCtrl::Packet_Ctrl_ScreenSplitCtrl(const Packet_Ctrl_ScreenSplitCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ScreenSplitCtrl::SharedCtor() {
  _cached_size_ = 0;
  screenindex_ = 0;
  row_ = 1;
  col_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ScreenSplitCtrl::~Packet_Ctrl_ScreenSplitCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ScreenSplitCtrl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_ScreenSplitCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ScreenSplitCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ScreenSplitCtrl_descriptor_;
}

const Packet_Ctrl_ScreenSplitCtrl& Packet_Ctrl_ScreenSplitCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ScreenSplitCtrl* Packet_Ctrl_ScreenSplitCtrl::default_instance_ = NULL;

Packet_Ctrl_ScreenSplitCtrl* Packet_Ctrl_ScreenSplitCtrl::New() const {
  return new Packet_Ctrl_ScreenSplitCtrl;
}

void Packet_Ctrl_ScreenSplitCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    screenindex_ = 0;
    row_ = 1;
    col_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ScreenSplitCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 screenIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenindex_)));
          set_has_screenindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_row;
        break;
      }

      // required int32 row = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_col;
        break;
      }

      // required int32 col = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ScreenSplitCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 screenIndex = 2;
  if (has_screenindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->screenindex(), output);
  }

  // required int32 row = 3 [default = 1];
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->row(), output);
  }

  // required int32 col = 4 [default = 1];
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ScreenSplitCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 screenIndex = 2;
  if (has_screenindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->screenindex(), target);
  }

  // required int32 row = 3 [default = 1];
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->row(), target);
  }

  // required int32 col = 4 [default = 1];
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ScreenSplitCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 screenIndex = 2;
    if (has_screenindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenindex());
    }

    // required int32 row = 3 [default = 1];
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 4 [default = 1];
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ScreenSplitCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ScreenSplitCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ScreenSplitCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ScreenSplitCtrl::MergeFrom(const Packet_Ctrl_ScreenSplitCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenindex()) {
      set_screenindex(from.screenindex());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ScreenSplitCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ScreenSplitCtrl::CopyFrom(const Packet_Ctrl_ScreenSplitCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ScreenSplitCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_Ctrl_ScreenSplitCtrl::Swap(Packet_Ctrl_ScreenSplitCtrl* other) {
  if (other != this) {
    std::swap(screenindex_, other->screenindex_);
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ScreenSplitCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ScreenSplitCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ScreenSplitCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType_descriptor_;
}
bool Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::CREATE;
const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::WINDOW_CTRL;
const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::REMOVE;
const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::SET_BORDER_WIDTH;
const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::SHOW_TITLE;
const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::ViewGeomotryCtrlType_MIN;
const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::ViewGeomotryCtrlType_MAX;
const int Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::ViewGeomotryCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::kTypeFieldNumber;
const int Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::kViewFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::InitAsDefaultInstance() {
  view_ = const_cast< ::TvWall::Packet_ElementDat_View*>(&::TvWall::Packet_ElementDat_View::default_instance());
}

Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl(const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  view_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::~Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::SharedDtor() {
  if (this != default_instance_) {
    delete view_;
  }
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_descriptor_;
}

const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl& Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl* Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::default_instance_ = NULL;

Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl* Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::New() const {
  return new Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl;
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_view()) {
      if (view_ != NULL) view_->::TvWall::Packet_ElementDat_View::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.ViewCtrl.ViewGeomotryCtrl.ViewGeomotryCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_ViewGeomotryCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_view;
        break;
      }

      // required .TvWall.Packet.ElementDat.View view = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.ViewGeomotryCtrl.ViewGeomotryCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .TvWall.Packet.ElementDat.View view = 2;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->view(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.ViewGeomotryCtrl.ViewGeomotryCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .TvWall.Packet.ElementDat.View view = 2;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->view(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.ViewCtrl.ViewGeomotryCtrl.ViewGeomotryCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .TvWall.Packet.ElementDat.View view = 2;
    if (has_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::MergeFrom(const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_view()) {
      mutable_view()->::TvWall::Packet_ElementDat_View::MergeFrom(from.view());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::CopyFrom(const Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_view()) {
    if (!this->view().IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::Swap(Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(view_, other->view_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType_descriptor_;
}
bool Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType Packet_Ctrl_ViewCtrl_VideoCtrl::CAMERA_ADD;
const Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType Packet_Ctrl_ViewCtrl_VideoCtrl::CAMERA_REMOVE;
const Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType Packet_Ctrl_ViewCtrl_VideoCtrl::POLL_INTERVAL;
const Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType Packet_Ctrl_ViewCtrl_VideoCtrl::KEEP_STRETCH;
const Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType Packet_Ctrl_ViewCtrl_VideoCtrl::VideoCtrlType_MIN;
const Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType Packet_Ctrl_ViewCtrl_VideoCtrl::VideoCtrlType_MAX;
const int Packet_Ctrl_ViewCtrl_VideoCtrl::VideoCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_ViewCtrl_VideoCtrl::kTypeFieldNumber;
const int Packet_Ctrl_ViewCtrl_VideoCtrl::kWinIdFieldNumber;
const int Packet_Ctrl_ViewCtrl_VideoCtrl::kCameraIdFieldNumber;
const int Packet_Ctrl_ViewCtrl_VideoCtrl::kPollIntervalFieldNumber;
const int Packet_Ctrl_ViewCtrl_VideoCtrl::kKeepStretchFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ViewCtrl_VideoCtrl::Packet_Ctrl_ViewCtrl_VideoCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_ViewCtrl_VideoCtrl::Packet_Ctrl_ViewCtrl_VideoCtrl(const Packet_Ctrl_ViewCtrl_VideoCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  pollinterval_ = 0;
  keepstretch_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ViewCtrl_VideoCtrl::~Packet_Ctrl_ViewCtrl_VideoCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_VideoCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_VideoCtrl_descriptor_;
}

const Packet_Ctrl_ViewCtrl_VideoCtrl& Packet_Ctrl_ViewCtrl_VideoCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ViewCtrl_VideoCtrl* Packet_Ctrl_ViewCtrl_VideoCtrl::default_instance_ = NULL;

Packet_Ctrl_ViewCtrl_VideoCtrl* Packet_Ctrl_ViewCtrl_VideoCtrl::New() const {
  return new Packet_Ctrl_ViewCtrl_VideoCtrl;
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    pollinterval_ = 0;
    keepstretch_ = false;
  }
  cameraid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ViewCtrl_VideoCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.ViewCtrl.VideoCtrl.VideoCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_ViewCtrl_VideoCtrl_VideoCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cameraId;
        break;
      }

      // repeated .TvWall.Guid cameraId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cameraId;
        if (input->ExpectTag(32)) goto parse_pollInterval;
        break;
      }

      // optional int32 pollInterval = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pollInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pollinterval_)));
          set_has_pollinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_keepStretch;
        break;
      }

      // optional bool keepStretch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepStretch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepstretch_)));
          set_has_keepstretch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.VideoCtrl.VideoCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // repeated .TvWall.Guid cameraId = 3;
  for (int i = 0; i < this->cameraid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cameraid(i), output);
  }

  // optional int32 pollInterval = 4;
  if (has_pollinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pollinterval(), output);
  }

  // optional bool keepStretch = 5;
  if (has_keepstretch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->keepstretch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ViewCtrl_VideoCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.VideoCtrl.VideoCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // repeated .TvWall.Guid cameraId = 3;
  for (int i = 0; i < this->cameraid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cameraid(i), target);
  }

  // optional int32 pollInterval = 4;
  if (has_pollinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pollinterval(), target);
  }

  // optional bool keepStretch = 5;
  if (has_keepstretch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->keepstretch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ViewCtrl_VideoCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.ViewCtrl.VideoCtrl.VideoCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional int32 pollInterval = 4;
    if (has_pollinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pollinterval());
    }

    // optional bool keepStretch = 5;
    if (has_keepstretch()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TvWall.Guid cameraId = 3;
  total_size += 1 * this->cameraid_size();
  for (int i = 0; i < this->cameraid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameraid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ViewCtrl_VideoCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ViewCtrl_VideoCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::MergeFrom(const Packet_Ctrl_ViewCtrl_VideoCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  cameraid_.MergeFrom(from.cameraid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_pollinterval()) {
      set_pollinterval(from.pollinterval());
    }
    if (from.has_keepstretch()) {
      set_keepstretch(from.keepstretch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::CopyFrom(const Packet_Ctrl_ViewCtrl_VideoCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ViewCtrl_VideoCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < cameraid_size(); i++) {
    if (!this->cameraid(i).IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl_ViewCtrl_VideoCtrl::Swap(Packet_Ctrl_ViewCtrl_VideoCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    cameraid_.Swap(&other->cameraid_);
    std::swap(pollinterval_, other->pollinterval_);
    std::swap(keepstretch_, other->keepstretch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ViewCtrl_VideoCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ViewCtrl_VideoCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ViewCtrl_VideoCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType_descriptor_;
}
bool Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType Packet_Ctrl_ViewCtrl_RecordCtrl::RESET_START_TIME;
const Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType Packet_Ctrl_ViewCtrl_RecordCtrl::KEEP_STRETCH;
const Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType Packet_Ctrl_ViewCtrl_RecordCtrl::SET_RATE;
const Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType Packet_Ctrl_ViewCtrl_RecordCtrl::PAUSE;
const Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType Packet_Ctrl_ViewCtrl_RecordCtrl::SLOW;
const Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType Packet_Ctrl_ViewCtrl_RecordCtrl::FAST;
const Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType Packet_Ctrl_ViewCtrl_RecordCtrl::BACK;
const Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType Packet_Ctrl_ViewCtrl_RecordCtrl::FORWARD;
const Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType Packet_Ctrl_ViewCtrl_RecordCtrl::RecordCtrlType_MIN;
const Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType Packet_Ctrl_ViewCtrl_RecordCtrl::RecordCtrlType_MAX;
const int Packet_Ctrl_ViewCtrl_RecordCtrl::RecordCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_ViewCtrl_RecordCtrl::kTypeFieldNumber;
const int Packet_Ctrl_ViewCtrl_RecordCtrl::kWinIdFieldNumber;
const int Packet_Ctrl_ViewCtrl_RecordCtrl::kCameraIdFieldNumber;
const int Packet_Ctrl_ViewCtrl_RecordCtrl::kStartTimeFieldNumber;
const int Packet_Ctrl_ViewCtrl_RecordCtrl::kKeepStretchFieldNumber;
const int Packet_Ctrl_ViewCtrl_RecordCtrl::kRateFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ViewCtrl_RecordCtrl::Packet_Ctrl_ViewCtrl_RecordCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::InitAsDefaultInstance() {
  cameraid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
}

Packet_Ctrl_ViewCtrl_RecordCtrl::Packet_Ctrl_ViewCtrl_RecordCtrl(const Packet_Ctrl_ViewCtrl_RecordCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  cameraid_ = NULL;
  starttime_ = GOOGLE_ULONGLONG(0);
  keepstretch_ = false;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ViewCtrl_RecordCtrl::~Packet_Ctrl_ViewCtrl_RecordCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::SharedDtor() {
  if (this != default_instance_) {
    delete cameraid_;
  }
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_RecordCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_RecordCtrl_descriptor_;
}

const Packet_Ctrl_ViewCtrl_RecordCtrl& Packet_Ctrl_ViewCtrl_RecordCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ViewCtrl_RecordCtrl* Packet_Ctrl_ViewCtrl_RecordCtrl::default_instance_ = NULL;

Packet_Ctrl_ViewCtrl_RecordCtrl* Packet_Ctrl_ViewCtrl_RecordCtrl::New() const {
  return new Packet_Ctrl_ViewCtrl_RecordCtrl;
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_cameraid()) {
      if (cameraid_ != NULL) cameraid_->::TvWall::Guid::Clear();
    }
    starttime_ = GOOGLE_ULONGLONG(0);
    keepstretch_ = false;
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ViewCtrl_RecordCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.ViewCtrl.RecordCtrl.RecordCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_ViewCtrl_RecordCtrl_RecordCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cameraId;
        break;
      }

      // required .TvWall.Guid cameraId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_startTime;
        break;
      }

      // optional uint64 startTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_keepStretch;
        break;
      }

      // optional bool keepStretch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepStretch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepstretch_)));
          set_has_keepstretch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rate;
        break;
      }

      // optional int32 rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.RecordCtrl.RecordCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // required .TvWall.Guid cameraId = 3;
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cameraid(), output);
  }

  // optional uint64 startTime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->starttime(), output);
  }

  // optional bool keepStretch = 5;
  if (has_keepstretch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->keepstretch(), output);
  }

  // optional int32 rate = 6;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ViewCtrl_RecordCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.RecordCtrl.RecordCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // required .TvWall.Guid cameraId = 3;
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cameraid(), target);
  }

  // optional uint64 startTime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->starttime(), target);
  }

  // optional bool keepStretch = 5;
  if (has_keepstretch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->keepstretch(), target);
  }

  // optional int32 rate = 6;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ViewCtrl_RecordCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.ViewCtrl.RecordCtrl.RecordCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required .TvWall.Guid cameraId = 3;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameraid());
    }

    // optional uint64 startTime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional bool keepStretch = 5;
    if (has_keepstretch()) {
      total_size += 1 + 1;
    }

    // optional int32 rate = 6;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ViewCtrl_RecordCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ViewCtrl_RecordCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::MergeFrom(const Packet_Ctrl_ViewCtrl_RecordCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_cameraid()) {
      mutable_cameraid()->::TvWall::Guid::MergeFrom(from.cameraid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_keepstretch()) {
      set_keepstretch(from.keepstretch());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::CopyFrom(const Packet_Ctrl_ViewCtrl_RecordCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ViewCtrl_RecordCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_cameraid()) {
    if (!this->cameraid().IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl_ViewCtrl_RecordCtrl::Swap(Packet_Ctrl_ViewCtrl_RecordCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(starttime_, other->starttime_);
    std::swap(keepstretch_, other->keepstretch_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ViewCtrl_RecordCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ViewCtrl_RecordCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ViewCtrl_RecordCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_FlashCtrl_FlashCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_FlashCtrl_FlashCtrlType_descriptor_;
}
bool Packet_Ctrl_ViewCtrl_FlashCtrl_FlashCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_ViewCtrl_FlashCtrl_FlashCtrlType Packet_Ctrl_ViewCtrl_FlashCtrl::SET_FLASH;
const Packet_Ctrl_ViewCtrl_FlashCtrl_FlashCtrlType Packet_Ctrl_ViewCtrl_FlashCtrl::FlashCtrlType_MIN;
const Packet_Ctrl_ViewCtrl_FlashCtrl_FlashCtrlType Packet_Ctrl_ViewCtrl_FlashCtrl::FlashCtrlType_MAX;
const int Packet_Ctrl_ViewCtrl_FlashCtrl::FlashCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_ViewCtrl_FlashCtrl::kTypeFieldNumber;
const int Packet_Ctrl_ViewCtrl_FlashCtrl::kWinIdFieldNumber;
const int Packet_Ctrl_ViewCtrl_FlashCtrl::kUrlFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ViewCtrl_FlashCtrl::Packet_Ctrl_ViewCtrl_FlashCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_ViewCtrl_FlashCtrl::Packet_Ctrl_ViewCtrl_FlashCtrl(const Packet_Ctrl_ViewCtrl_FlashCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ViewCtrl_FlashCtrl::~Packet_Ctrl_ViewCtrl_FlashCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_FlashCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_FlashCtrl_descriptor_;
}

const Packet_Ctrl_ViewCtrl_FlashCtrl& Packet_Ctrl_ViewCtrl_FlashCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ViewCtrl_FlashCtrl* Packet_Ctrl_ViewCtrl_FlashCtrl::default_instance_ = NULL;

Packet_Ctrl_ViewCtrl_FlashCtrl* Packet_Ctrl_ViewCtrl_FlashCtrl::New() const {
  return new Packet_Ctrl_ViewCtrl_FlashCtrl;
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ViewCtrl_FlashCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.ViewCtrl.FlashCtrl.FlashCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_ViewCtrl_FlashCtrl_FlashCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_ViewCtrl_FlashCtrl_FlashCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // required string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.FlashCtrl.FlashCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // required string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ViewCtrl_FlashCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.FlashCtrl.FlashCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // required string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ViewCtrl_FlashCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.ViewCtrl.FlashCtrl.FlashCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ViewCtrl_FlashCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ViewCtrl_FlashCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::MergeFrom(const Packet_Ctrl_ViewCtrl_FlashCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::CopyFrom(const Packet_Ctrl_ViewCtrl_FlashCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ViewCtrl_FlashCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_Ctrl_ViewCtrl_FlashCtrl::Swap(Packet_Ctrl_ViewCtrl_FlashCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ViewCtrl_FlashCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ViewCtrl_FlashCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ViewCtrl_FlashCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_HTMLCtrl_HTMLCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_HTMLCtrl_HTMLCtrlType_descriptor_;
}
bool Packet_Ctrl_ViewCtrl_HTMLCtrl_HTMLCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_ViewCtrl_HTMLCtrl_HTMLCtrlType Packet_Ctrl_ViewCtrl_HTMLCtrl::SET_HTML;
const Packet_Ctrl_ViewCtrl_HTMLCtrl_HTMLCtrlType Packet_Ctrl_ViewCtrl_HTMLCtrl::HTMLCtrlType_MIN;
const Packet_Ctrl_ViewCtrl_HTMLCtrl_HTMLCtrlType Packet_Ctrl_ViewCtrl_HTMLCtrl::HTMLCtrlType_MAX;
const int Packet_Ctrl_ViewCtrl_HTMLCtrl::HTMLCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_ViewCtrl_HTMLCtrl::kTypeFieldNumber;
const int Packet_Ctrl_ViewCtrl_HTMLCtrl::kWinIdFieldNumber;
const int Packet_Ctrl_ViewCtrl_HTMLCtrl::kUrlFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ViewCtrl_HTMLCtrl::Packet_Ctrl_ViewCtrl_HTMLCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_ViewCtrl_HTMLCtrl::Packet_Ctrl_ViewCtrl_HTMLCtrl(const Packet_Ctrl_ViewCtrl_HTMLCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ViewCtrl_HTMLCtrl::~Packet_Ctrl_ViewCtrl_HTMLCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_HTMLCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_HTMLCtrl_descriptor_;
}

const Packet_Ctrl_ViewCtrl_HTMLCtrl& Packet_Ctrl_ViewCtrl_HTMLCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ViewCtrl_HTMLCtrl* Packet_Ctrl_ViewCtrl_HTMLCtrl::default_instance_ = NULL;

Packet_Ctrl_ViewCtrl_HTMLCtrl* Packet_Ctrl_ViewCtrl_HTMLCtrl::New() const {
  return new Packet_Ctrl_ViewCtrl_HTMLCtrl;
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ViewCtrl_HTMLCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.ViewCtrl.HTMLCtrl.HTMLCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_ViewCtrl_HTMLCtrl_HTMLCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_ViewCtrl_HTMLCtrl_HTMLCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // required string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.HTMLCtrl.HTMLCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // required string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ViewCtrl_HTMLCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.HTMLCtrl.HTMLCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // required string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ViewCtrl_HTMLCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.ViewCtrl.HTMLCtrl.HTMLCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ViewCtrl_HTMLCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ViewCtrl_HTMLCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::MergeFrom(const Packet_Ctrl_ViewCtrl_HTMLCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::CopyFrom(const Packet_Ctrl_ViewCtrl_HTMLCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ViewCtrl_HTMLCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_Ctrl_ViewCtrl_HTMLCtrl::Swap(Packet_Ctrl_ViewCtrl_HTMLCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ViewCtrl_HTMLCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ViewCtrl_HTMLCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ViewCtrl_HTMLCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType_descriptor_;
}
bool Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType Packet_Ctrl_ViewCtrl_LocalMovieCtrl::SET_FILE;
const Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType Packet_Ctrl_ViewCtrl_LocalMovieCtrl::SET_VOLUME;
const Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType Packet_Ctrl_ViewCtrl_LocalMovieCtrl::SET_SLIDER;
const Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType Packet_Ctrl_ViewCtrl_LocalMovieCtrl::PAUSE;
const Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType Packet_Ctrl_ViewCtrl_LocalMovieCtrl::STOP;
const Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType Packet_Ctrl_ViewCtrl_LocalMovieCtrl::LocalMovieType_MIN;
const Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType Packet_Ctrl_ViewCtrl_LocalMovieCtrl::LocalMovieType_MAX;
const int Packet_Ctrl_ViewCtrl_LocalMovieCtrl::LocalMovieType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_ViewCtrl_LocalMovieCtrl::kTypeFieldNumber;
const int Packet_Ctrl_ViewCtrl_LocalMovieCtrl::kWinIdFieldNumber;
const int Packet_Ctrl_ViewCtrl_LocalMovieCtrl::kUrlFieldNumber;
const int Packet_Ctrl_ViewCtrl_LocalMovieCtrl::kVolumeFieldNumber;
const int Packet_Ctrl_ViewCtrl_LocalMovieCtrl::kTimeStampFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ViewCtrl_LocalMovieCtrl::Packet_Ctrl_ViewCtrl_LocalMovieCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_ViewCtrl_LocalMovieCtrl::Packet_Ctrl_ViewCtrl_LocalMovieCtrl(const Packet_Ctrl_ViewCtrl_LocalMovieCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ViewCtrl_LocalMovieCtrl::~Packet_Ctrl_ViewCtrl_LocalMovieCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_LocalMovieCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_LocalMovieCtrl_descriptor_;
}

const Packet_Ctrl_ViewCtrl_LocalMovieCtrl& Packet_Ctrl_ViewCtrl_LocalMovieCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ViewCtrl_LocalMovieCtrl* Packet_Ctrl_ViewCtrl_LocalMovieCtrl::default_instance_ = NULL;

Packet_Ctrl_ViewCtrl_LocalMovieCtrl* Packet_Ctrl_ViewCtrl_LocalMovieCtrl::New() const {
  return new Packet_Ctrl_ViewCtrl_LocalMovieCtrl;
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    volume_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ViewCtrl_LocalMovieCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.ViewCtrl.LocalMovieCtrl.LocalMovieType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_ViewCtrl_LocalMovieCtrl_LocalMovieType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_volume;
        break;
      }

      // optional int32 volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timeStamp;
        break;
      }

      // optional int64 timeStamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.LocalMovieCtrl.LocalMovieType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional int32 volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // optional int64 timeStamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ViewCtrl_LocalMovieCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.LocalMovieCtrl.LocalMovieType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional int32 volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // optional int64 timeStamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ViewCtrl_LocalMovieCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.ViewCtrl.LocalMovieCtrl.LocalMovieType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional int64 timeStamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ViewCtrl_LocalMovieCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ViewCtrl_LocalMovieCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::MergeFrom(const Packet_Ctrl_ViewCtrl_LocalMovieCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::CopyFrom(const Packet_Ctrl_ViewCtrl_LocalMovieCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ViewCtrl_LocalMovieCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Ctrl_ViewCtrl_LocalMovieCtrl::Swap(Packet_Ctrl_ViewCtrl_LocalMovieCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(url_, other->url_);
    std::swap(volume_, other->volume_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ViewCtrl_LocalMovieCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ViewCtrl_LocalMovieCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ViewCtrl_LocalMovieCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_TextCtrl_TextCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_TextCtrl_TextCtrlType_descriptor_;
}
bool Packet_Ctrl_ViewCtrl_TextCtrl_TextCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_ViewCtrl_TextCtrl_TextCtrlType Packet_Ctrl_ViewCtrl_TextCtrl::SET_TEXT;
const Packet_Ctrl_ViewCtrl_TextCtrl_TextCtrlType Packet_Ctrl_ViewCtrl_TextCtrl::TextCtrlType_MIN;
const Packet_Ctrl_ViewCtrl_TextCtrl_TextCtrlType Packet_Ctrl_ViewCtrl_TextCtrl::TextCtrlType_MAX;
const int Packet_Ctrl_ViewCtrl_TextCtrl::TextCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_ViewCtrl_TextCtrl::kTypeFieldNumber;
const int Packet_Ctrl_ViewCtrl_TextCtrl::kWinIdFieldNumber;
const int Packet_Ctrl_ViewCtrl_TextCtrl::kTextFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ViewCtrl_TextCtrl::Packet_Ctrl_ViewCtrl_TextCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ViewCtrl_TextCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_ViewCtrl_TextCtrl::Packet_Ctrl_ViewCtrl_TextCtrl(const Packet_Ctrl_ViewCtrl_TextCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_TextCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ViewCtrl_TextCtrl::~Packet_Ctrl_ViewCtrl_TextCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ViewCtrl_TextCtrl::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_ViewCtrl_TextCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_TextCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_TextCtrl_descriptor_;
}

const Packet_Ctrl_ViewCtrl_TextCtrl& Packet_Ctrl_ViewCtrl_TextCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ViewCtrl_TextCtrl* Packet_Ctrl_ViewCtrl_TextCtrl::default_instance_ = NULL;

Packet_Ctrl_ViewCtrl_TextCtrl* Packet_Ctrl_ViewCtrl_TextCtrl::New() const {
  return new Packet_Ctrl_ViewCtrl_TextCtrl;
}

void Packet_Ctrl_ViewCtrl_TextCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ViewCtrl_TextCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.ViewCtrl.TextCtrl.TextCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_ViewCtrl_TextCtrl_TextCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_ViewCtrl_TextCtrl_TextCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ViewCtrl_TextCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.TextCtrl.TextCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ViewCtrl_TextCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.TextCtrl.TextCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ViewCtrl_TextCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.ViewCtrl.TextCtrl.TextCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ViewCtrl_TextCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ViewCtrl_TextCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ViewCtrl_TextCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ViewCtrl_TextCtrl::MergeFrom(const Packet_Ctrl_ViewCtrl_TextCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ViewCtrl_TextCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_TextCtrl::CopyFrom(const Packet_Ctrl_ViewCtrl_TextCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ViewCtrl_TextCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Ctrl_ViewCtrl_TextCtrl::Swap(Packet_Ctrl_ViewCtrl_TextCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ViewCtrl_TextCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ViewCtrl_TextCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ViewCtrl_TextCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_MapCtrl_MapCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_MapCtrl_MapCtrlType_descriptor_;
}
bool Packet_Ctrl_ViewCtrl_MapCtrl_MapCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_ViewCtrl_MapCtrl_MapCtrlType Packet_Ctrl_ViewCtrl_MapCtrl::SET_MAP;
const Packet_Ctrl_ViewCtrl_MapCtrl_MapCtrlType Packet_Ctrl_ViewCtrl_MapCtrl::MapCtrlType_MIN;
const Packet_Ctrl_ViewCtrl_MapCtrl_MapCtrlType Packet_Ctrl_ViewCtrl_MapCtrl::MapCtrlType_MAX;
const int Packet_Ctrl_ViewCtrl_MapCtrl::MapCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_ViewCtrl_MapCtrl::kTypeFieldNumber;
const int Packet_Ctrl_ViewCtrl_MapCtrl::kWinIdFieldNumber;
const int Packet_Ctrl_ViewCtrl_MapCtrl::kUrlFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ViewCtrl_MapCtrl::Packet_Ctrl_ViewCtrl_MapCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ViewCtrl_MapCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_ViewCtrl_MapCtrl::Packet_Ctrl_ViewCtrl_MapCtrl(const Packet_Ctrl_ViewCtrl_MapCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_MapCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ViewCtrl_MapCtrl::~Packet_Ctrl_ViewCtrl_MapCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ViewCtrl_MapCtrl::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_ViewCtrl_MapCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_MapCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_MapCtrl_descriptor_;
}

const Packet_Ctrl_ViewCtrl_MapCtrl& Packet_Ctrl_ViewCtrl_MapCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ViewCtrl_MapCtrl* Packet_Ctrl_ViewCtrl_MapCtrl::default_instance_ = NULL;

Packet_Ctrl_ViewCtrl_MapCtrl* Packet_Ctrl_ViewCtrl_MapCtrl::New() const {
  return new Packet_Ctrl_ViewCtrl_MapCtrl;
}

void Packet_Ctrl_ViewCtrl_MapCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ViewCtrl_MapCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.ViewCtrl.MapCtrl.MapCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_ViewCtrl_MapCtrl_MapCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_ViewCtrl_MapCtrl_MapCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ViewCtrl_MapCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.MapCtrl.MapCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ViewCtrl_MapCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.MapCtrl.MapCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ViewCtrl_MapCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.ViewCtrl.MapCtrl.MapCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ViewCtrl_MapCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ViewCtrl_MapCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ViewCtrl_MapCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ViewCtrl_MapCtrl::MergeFrom(const Packet_Ctrl_ViewCtrl_MapCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ViewCtrl_MapCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_MapCtrl::CopyFrom(const Packet_Ctrl_ViewCtrl_MapCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ViewCtrl_MapCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Ctrl_ViewCtrl_MapCtrl::Swap(Packet_Ctrl_ViewCtrl_MapCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ViewCtrl_MapCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ViewCtrl_MapCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ViewCtrl_MapCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_ViewCtrl_OthersCtrl_OthersCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_OthersCtrl_OthersCtrlType_descriptor_;
}
bool Packet_Ctrl_ViewCtrl_OthersCtrl_OthersCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_ViewCtrl_OthersCtrl_OthersCtrlType Packet_Ctrl_ViewCtrl_OthersCtrl::OTHER_ADD;
const Packet_Ctrl_ViewCtrl_OthersCtrl_OthersCtrlType Packet_Ctrl_ViewCtrl_OthersCtrl::OthersCtrlType_MIN;
const Packet_Ctrl_ViewCtrl_OthersCtrl_OthersCtrlType Packet_Ctrl_ViewCtrl_OthersCtrl::OthersCtrlType_MAX;
const int Packet_Ctrl_ViewCtrl_OthersCtrl::OthersCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_ViewCtrl_OthersCtrl::kTypeFieldNumber;
const int Packet_Ctrl_ViewCtrl_OthersCtrl::kWinIdFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ViewCtrl_OthersCtrl::Packet_Ctrl_ViewCtrl_OthersCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_ViewCtrl_OthersCtrl::Packet_Ctrl_ViewCtrl_OthersCtrl(const Packet_Ctrl_ViewCtrl_OthersCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ViewCtrl_OthersCtrl::~Packet_Ctrl_ViewCtrl_OthersCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl_OthersCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_OthersCtrl_descriptor_;
}

const Packet_Ctrl_ViewCtrl_OthersCtrl& Packet_Ctrl_ViewCtrl_OthersCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ViewCtrl_OthersCtrl* Packet_Ctrl_ViewCtrl_OthersCtrl::default_instance_ = NULL;

Packet_Ctrl_ViewCtrl_OthersCtrl* Packet_Ctrl_ViewCtrl_OthersCtrl::New() const {
  return new Packet_Ctrl_ViewCtrl_OthersCtrl;
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ViewCtrl_OthersCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.ViewCtrl.OthersCtrl.OthersCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_ViewCtrl_OthersCtrl_OthersCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_ViewCtrl_OthersCtrl_OthersCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.OthersCtrl.OthersCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ViewCtrl_OthersCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.ViewCtrl.OthersCtrl.OthersCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ViewCtrl_OthersCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.ViewCtrl.OthersCtrl.OthersCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ViewCtrl_OthersCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ViewCtrl_OthersCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::MergeFrom(const Packet_Ctrl_ViewCtrl_OthersCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::CopyFrom(const Packet_Ctrl_ViewCtrl_OthersCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ViewCtrl_OthersCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Ctrl_ViewCtrl_OthersCtrl::Swap(Packet_Ctrl_ViewCtrl_OthersCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ViewCtrl_OthersCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ViewCtrl_OthersCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ViewCtrl_OthersCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Ctrl_ViewCtrl::kVideoCtrlFieldNumber;
const int Packet_Ctrl_ViewCtrl::kFlashCtrlFieldNumber;
const int Packet_Ctrl_ViewCtrl::kHtmlCtrlFieldNumber;
const int Packet_Ctrl_ViewCtrl::kTextCtrlFieldNumber;
const int Packet_Ctrl_ViewCtrl::kOthersCtrlFieldNumber;
const int Packet_Ctrl_ViewCtrl::kLocalMovieFieldNumber;
const int Packet_Ctrl_ViewCtrl::kViewGeomotryCtrlFieldNumber;
const int Packet_Ctrl_ViewCtrl::kMapCtrlFieldNumber;
const int Packet_Ctrl_ViewCtrl::kRecordCtrlFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_ViewCtrl::Packet_Ctrl_ViewCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_ViewCtrl::InitAsDefaultInstance() {
  videoctrl_ = const_cast< ::TvWall::Packet_Ctrl_ViewCtrl_VideoCtrl*>(&::TvWall::Packet_Ctrl_ViewCtrl_VideoCtrl::default_instance());
  flashctrl_ = const_cast< ::TvWall::Packet_Ctrl_ViewCtrl_FlashCtrl*>(&::TvWall::Packet_Ctrl_ViewCtrl_FlashCtrl::default_instance());
  htmlctrl_ = const_cast< ::TvWall::Packet_Ctrl_ViewCtrl_HTMLCtrl*>(&::TvWall::Packet_Ctrl_ViewCtrl_HTMLCtrl::default_instance());
  textctrl_ = const_cast< ::TvWall::Packet_Ctrl_ViewCtrl_TextCtrl*>(&::TvWall::Packet_Ctrl_ViewCtrl_TextCtrl::default_instance());
  othersctrl_ = const_cast< ::TvWall::Packet_Ctrl_ViewCtrl_OthersCtrl*>(&::TvWall::Packet_Ctrl_ViewCtrl_OthersCtrl::default_instance());
  localmovie_ = const_cast< ::TvWall::Packet_Ctrl_ViewCtrl_LocalMovieCtrl*>(&::TvWall::Packet_Ctrl_ViewCtrl_LocalMovieCtrl::default_instance());
  viewgeomotryctrl_ = const_cast< ::TvWall::Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl*>(&::TvWall::Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::default_instance());
  mapctrl_ = const_cast< ::TvWall::Packet_Ctrl_ViewCtrl_MapCtrl*>(&::TvWall::Packet_Ctrl_ViewCtrl_MapCtrl::default_instance());
  recordctrl_ = const_cast< ::TvWall::Packet_Ctrl_ViewCtrl_RecordCtrl*>(&::TvWall::Packet_Ctrl_ViewCtrl_RecordCtrl::default_instance());
}

Packet_Ctrl_ViewCtrl::Packet_Ctrl_ViewCtrl(const Packet_Ctrl_ViewCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl::SharedCtor() {
  _cached_size_ = 0;
  videoctrl_ = NULL;
  flashctrl_ = NULL;
  htmlctrl_ = NULL;
  textctrl_ = NULL;
  othersctrl_ = NULL;
  localmovie_ = NULL;
  viewgeomotryctrl_ = NULL;
  mapctrl_ = NULL;
  recordctrl_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_ViewCtrl::~Packet_Ctrl_ViewCtrl() {
  SharedDtor();
}

void Packet_Ctrl_ViewCtrl::SharedDtor() {
  if (this != default_instance_) {
    delete videoctrl_;
    delete flashctrl_;
    delete htmlctrl_;
    delete textctrl_;
    delete othersctrl_;
    delete localmovie_;
    delete viewgeomotryctrl_;
    delete mapctrl_;
    delete recordctrl_;
  }
}

void Packet_Ctrl_ViewCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_ViewCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_ViewCtrl_descriptor_;
}

const Packet_Ctrl_ViewCtrl& Packet_Ctrl_ViewCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_ViewCtrl* Packet_Ctrl_ViewCtrl::default_instance_ = NULL;

Packet_Ctrl_ViewCtrl* Packet_Ctrl_ViewCtrl::New() const {
  return new Packet_Ctrl_ViewCtrl;
}

void Packet_Ctrl_ViewCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_videoctrl()) {
      if (videoctrl_ != NULL) videoctrl_->::TvWall::Packet_Ctrl_ViewCtrl_VideoCtrl::Clear();
    }
    if (has_flashctrl()) {
      if (flashctrl_ != NULL) flashctrl_->::TvWall::Packet_Ctrl_ViewCtrl_FlashCtrl::Clear();
    }
    if (has_htmlctrl()) {
      if (htmlctrl_ != NULL) htmlctrl_->::TvWall::Packet_Ctrl_ViewCtrl_HTMLCtrl::Clear();
    }
    if (has_textctrl()) {
      if (textctrl_ != NULL) textctrl_->::TvWall::Packet_Ctrl_ViewCtrl_TextCtrl::Clear();
    }
    if (has_othersctrl()) {
      if (othersctrl_ != NULL) othersctrl_->::TvWall::Packet_Ctrl_ViewCtrl_OthersCtrl::Clear();
    }
    if (has_localmovie()) {
      if (localmovie_ != NULL) localmovie_->::TvWall::Packet_Ctrl_ViewCtrl_LocalMovieCtrl::Clear();
    }
    if (has_viewgeomotryctrl()) {
      if (viewgeomotryctrl_ != NULL) viewgeomotryctrl_->::TvWall::Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::Clear();
    }
    if (has_mapctrl()) {
      if (mapctrl_ != NULL) mapctrl_->::TvWall::Packet_Ctrl_ViewCtrl_MapCtrl::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_recordctrl()) {
      if (recordctrl_ != NULL) recordctrl_->::TvWall::Packet_Ctrl_ViewCtrl_RecordCtrl::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_ViewCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TvWall.Packet.Ctrl.ViewCtrl.VideoCtrl videoCtrl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videoctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flashCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.ViewCtrl.FlashCtrl flashCtrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flashCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flashctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_htmlCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.ViewCtrl.HTMLCtrl htmlCtrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_htmlCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_htmlctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_textCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.ViewCtrl.TextCtrl textCtrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_othersCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.ViewCtrl.OthersCtrl othersCtrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_othersCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_othersctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_localMovie;
        break;
      }

      // optional .TvWall.Packet.Ctrl.ViewCtrl.LocalMovieCtrl localMovie = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localMovie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localmovie()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_viewGeomotryCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.ViewCtrl.ViewGeomotryCtrl viewGeomotryCtrl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_viewGeomotryCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewgeomotryctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mapCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.ViewCtrl.MapCtrl mapCtrl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_recordCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.ViewCtrl.RecordCtrl recordCtrl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_ViewCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TvWall.Packet.Ctrl.ViewCtrl.VideoCtrl videoCtrl = 1;
  if (has_videoctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->videoctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.FlashCtrl flashCtrl = 2;
  if (has_flashctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flashctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.HTMLCtrl htmlCtrl = 3;
  if (has_htmlctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->htmlctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.TextCtrl textCtrl = 4;
  if (has_textctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->textctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.OthersCtrl othersCtrl = 5;
  if (has_othersctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->othersctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.LocalMovieCtrl localMovie = 6;
  if (has_localmovie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->localmovie(), output);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.ViewGeomotryCtrl viewGeomotryCtrl = 7;
  if (has_viewgeomotryctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->viewgeomotryctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.MapCtrl mapCtrl = 8;
  if (has_mapctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mapctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.RecordCtrl recordCtrl = 9;
  if (has_recordctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->recordctrl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_ViewCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TvWall.Packet.Ctrl.ViewCtrl.VideoCtrl videoCtrl = 1;
  if (has_videoctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->videoctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.FlashCtrl flashCtrl = 2;
  if (has_flashctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flashctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.HTMLCtrl htmlCtrl = 3;
  if (has_htmlctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->htmlctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.TextCtrl textCtrl = 4;
  if (has_textctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->textctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.OthersCtrl othersCtrl = 5;
  if (has_othersctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->othersctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.LocalMovieCtrl localMovie = 6;
  if (has_localmovie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->localmovie(), target);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.ViewGeomotryCtrl viewGeomotryCtrl = 7;
  if (has_viewgeomotryctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->viewgeomotryctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.MapCtrl mapCtrl = 8;
  if (has_mapctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mapctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.ViewCtrl.RecordCtrl recordCtrl = 9;
  if (has_recordctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->recordctrl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_ViewCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TvWall.Packet.Ctrl.ViewCtrl.VideoCtrl videoCtrl = 1;
    if (has_videoctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videoctrl());
    }

    // optional .TvWall.Packet.Ctrl.ViewCtrl.FlashCtrl flashCtrl = 2;
    if (has_flashctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flashctrl());
    }

    // optional .TvWall.Packet.Ctrl.ViewCtrl.HTMLCtrl htmlCtrl = 3;
    if (has_htmlctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->htmlctrl());
    }

    // optional .TvWall.Packet.Ctrl.ViewCtrl.TextCtrl textCtrl = 4;
    if (has_textctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textctrl());
    }

    // optional .TvWall.Packet.Ctrl.ViewCtrl.OthersCtrl othersCtrl = 5;
    if (has_othersctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->othersctrl());
    }

    // optional .TvWall.Packet.Ctrl.ViewCtrl.LocalMovieCtrl localMovie = 6;
    if (has_localmovie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localmovie());
    }

    // optional .TvWall.Packet.Ctrl.ViewCtrl.ViewGeomotryCtrl viewGeomotryCtrl = 7;
    if (has_viewgeomotryctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viewgeomotryctrl());
    }

    // optional .TvWall.Packet.Ctrl.ViewCtrl.MapCtrl mapCtrl = 8;
    if (has_mapctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapctrl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TvWall.Packet.Ctrl.ViewCtrl.RecordCtrl recordCtrl = 9;
    if (has_recordctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordctrl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_ViewCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_ViewCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_ViewCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_ViewCtrl::MergeFrom(const Packet_Ctrl_ViewCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_videoctrl()) {
      mutable_videoctrl()->::TvWall::Packet_Ctrl_ViewCtrl_VideoCtrl::MergeFrom(from.videoctrl());
    }
    if (from.has_flashctrl()) {
      mutable_flashctrl()->::TvWall::Packet_Ctrl_ViewCtrl_FlashCtrl::MergeFrom(from.flashctrl());
    }
    if (from.has_htmlctrl()) {
      mutable_htmlctrl()->::TvWall::Packet_Ctrl_ViewCtrl_HTMLCtrl::MergeFrom(from.htmlctrl());
    }
    if (from.has_textctrl()) {
      mutable_textctrl()->::TvWall::Packet_Ctrl_ViewCtrl_TextCtrl::MergeFrom(from.textctrl());
    }
    if (from.has_othersctrl()) {
      mutable_othersctrl()->::TvWall::Packet_Ctrl_ViewCtrl_OthersCtrl::MergeFrom(from.othersctrl());
    }
    if (from.has_localmovie()) {
      mutable_localmovie()->::TvWall::Packet_Ctrl_ViewCtrl_LocalMovieCtrl::MergeFrom(from.localmovie());
    }
    if (from.has_viewgeomotryctrl()) {
      mutable_viewgeomotryctrl()->::TvWall::Packet_Ctrl_ViewCtrl_ViewGeomotryCtrl::MergeFrom(from.viewgeomotryctrl());
    }
    if (from.has_mapctrl()) {
      mutable_mapctrl()->::TvWall::Packet_Ctrl_ViewCtrl_MapCtrl::MergeFrom(from.mapctrl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recordctrl()) {
      mutable_recordctrl()->::TvWall::Packet_Ctrl_ViewCtrl_RecordCtrl::MergeFrom(from.recordctrl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_ViewCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_ViewCtrl::CopyFrom(const Packet_Ctrl_ViewCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_ViewCtrl::IsInitialized() const {

  if (has_videoctrl()) {
    if (!this->videoctrl().IsInitialized()) return false;
  }
  if (has_flashctrl()) {
    if (!this->flashctrl().IsInitialized()) return false;
  }
  if (has_htmlctrl()) {
    if (!this->htmlctrl().IsInitialized()) return false;
  }
  if (has_textctrl()) {
    if (!this->textctrl().IsInitialized()) return false;
  }
  if (has_othersctrl()) {
    if (!this->othersctrl().IsInitialized()) return false;
  }
  if (has_localmovie()) {
    if (!this->localmovie().IsInitialized()) return false;
  }
  if (has_viewgeomotryctrl()) {
    if (!this->viewgeomotryctrl().IsInitialized()) return false;
  }
  if (has_mapctrl()) {
    if (!this->mapctrl().IsInitialized()) return false;
  }
  if (has_recordctrl()) {
    if (!this->recordctrl().IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl_ViewCtrl::Swap(Packet_Ctrl_ViewCtrl* other) {
  if (other != this) {
    std::swap(videoctrl_, other->videoctrl_);
    std::swap(flashctrl_, other->flashctrl_);
    std::swap(htmlctrl_, other->htmlctrl_);
    std::swap(textctrl_, other->textctrl_);
    std::swap(othersctrl_, other->othersctrl_);
    std::swap(localmovie_, other->localmovie_);
    std::swap(viewgeomotryctrl_, other->viewgeomotryctrl_);
    std::swap(mapctrl_, other->mapctrl_);
    std::swap(recordctrl_, other->recordctrl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_ViewCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_ViewCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_ViewCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_CameraCtrl_PTZ_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_CameraCtrl_PTZ_TYPE_descriptor_;
}
bool Packet_Ctrl_CameraCtrl_PTZ_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_CameraCtrl_PTZ_TYPE Packet_Ctrl_CameraCtrl::LEFT;
const Packet_Ctrl_CameraCtrl_PTZ_TYPE Packet_Ctrl_CameraCtrl::RIGHT;
const Packet_Ctrl_CameraCtrl_PTZ_TYPE Packet_Ctrl_CameraCtrl::UP;
const Packet_Ctrl_CameraCtrl_PTZ_TYPE Packet_Ctrl_CameraCtrl::DOWN;
const Packet_Ctrl_CameraCtrl_PTZ_TYPE Packet_Ctrl_CameraCtrl::PTZ_TYPE_MIN;
const Packet_Ctrl_CameraCtrl_PTZ_TYPE Packet_Ctrl_CameraCtrl::PTZ_TYPE_MAX;
const int Packet_Ctrl_CameraCtrl::PTZ_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_CameraCtrl::kTypeFieldNumber;
const int Packet_Ctrl_CameraCtrl::kCameraIdFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_CameraCtrl::Packet_Ctrl_CameraCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_CameraCtrl::InitAsDefaultInstance() {
  cameraid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
}

Packet_Ctrl_CameraCtrl::Packet_Ctrl_CameraCtrl(const Packet_Ctrl_CameraCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_CameraCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cameraid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_CameraCtrl::~Packet_Ctrl_CameraCtrl() {
  SharedDtor();
}

void Packet_Ctrl_CameraCtrl::SharedDtor() {
  if (this != default_instance_) {
    delete cameraid_;
  }
}

void Packet_Ctrl_CameraCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_CameraCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_CameraCtrl_descriptor_;
}

const Packet_Ctrl_CameraCtrl& Packet_Ctrl_CameraCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_CameraCtrl* Packet_Ctrl_CameraCtrl::default_instance_ = NULL;

Packet_Ctrl_CameraCtrl* Packet_Ctrl_CameraCtrl::New() const {
  return new Packet_Ctrl_CameraCtrl;
}

void Packet_Ctrl_CameraCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_cameraid()) {
      if (cameraid_ != NULL) cameraid_->::TvWall::Guid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_CameraCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.CameraCtrl.PTZ_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_CameraCtrl_PTZ_TYPE_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_CameraCtrl_PTZ_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cameraId;
        break;
      }

      // required .TvWall.Guid cameraId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_CameraCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.CameraCtrl.PTZ_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .TvWall.Guid cameraId = 2;
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cameraid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_CameraCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.CameraCtrl.PTZ_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .TvWall.Guid cameraId = 2;
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cameraid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_CameraCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.CameraCtrl.PTZ_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .TvWall.Guid cameraId = 2;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameraid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_CameraCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_CameraCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_CameraCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_CameraCtrl::MergeFrom(const Packet_Ctrl_CameraCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cameraid()) {
      mutable_cameraid()->::TvWall::Guid::MergeFrom(from.cameraid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_CameraCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_CameraCtrl::CopyFrom(const Packet_Ctrl_CameraCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_CameraCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cameraid()) {
    if (!this->cameraid().IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl_CameraCtrl::Swap(Packet_Ctrl_CameraCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_CameraCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_CameraCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_CameraCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_HotPointCtrl_HotPointCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_HotPointCtrl_HotPointCtrlType_descriptor_;
}
bool Packet_Ctrl_HotPointCtrl_HotPointCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_HotPointCtrl_HotPointCtrlType Packet_Ctrl_HotPointCtrl::CREATE;
const Packet_Ctrl_HotPointCtrl_HotPointCtrlType Packet_Ctrl_HotPointCtrl::REMOVE;
const Packet_Ctrl_HotPointCtrl_HotPointCtrlType Packet_Ctrl_HotPointCtrl::RESET;
const Packet_Ctrl_HotPointCtrl_HotPointCtrlType Packet_Ctrl_HotPointCtrl::RESET_SCREEN;
const Packet_Ctrl_HotPointCtrl_HotPointCtrlType Packet_Ctrl_HotPointCtrl::HotPointCtrlType_MIN;
const Packet_Ctrl_HotPointCtrl_HotPointCtrlType Packet_Ctrl_HotPointCtrl::HotPointCtrlType_MAX;
const int Packet_Ctrl_HotPointCtrl::HotPointCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_HotPointCtrl::kTypeFieldNumber;
const int Packet_Ctrl_HotPointCtrl::kHotPointFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_HotPointCtrl::Packet_Ctrl_HotPointCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_HotPointCtrl::InitAsDefaultInstance() {
  hotpoint_ = const_cast< ::TvWall::Packet_ElementDat_HotPoint*>(&::TvWall::Packet_ElementDat_HotPoint::default_instance());
}

Packet_Ctrl_HotPointCtrl::Packet_Ctrl_HotPointCtrl(const Packet_Ctrl_HotPointCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_HotPointCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  hotpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_HotPointCtrl::~Packet_Ctrl_HotPointCtrl() {
  SharedDtor();
}

void Packet_Ctrl_HotPointCtrl::SharedDtor() {
  if (this != default_instance_) {
    delete hotpoint_;
  }
}

void Packet_Ctrl_HotPointCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_HotPointCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_HotPointCtrl_descriptor_;
}

const Packet_Ctrl_HotPointCtrl& Packet_Ctrl_HotPointCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_HotPointCtrl* Packet_Ctrl_HotPointCtrl::default_instance_ = NULL;

Packet_Ctrl_HotPointCtrl* Packet_Ctrl_HotPointCtrl::New() const {
  return new Packet_Ctrl_HotPointCtrl;
}

void Packet_Ctrl_HotPointCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_hotpoint()) {
      if (hotpoint_ != NULL) hotpoint_->::TvWall::Packet_ElementDat_HotPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_HotPointCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.HotPointCtrl.HotPointCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_HotPointCtrl_HotPointCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_HotPointCtrl_HotPointCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hotPoint;
        break;
      }

      // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_HotPointCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.HotPointCtrl.HotPointCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 2;
  if (has_hotpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hotpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_HotPointCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.HotPointCtrl.HotPointCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 2;
  if (has_hotpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hotpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_HotPointCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.HotPointCtrl.HotPointCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 2;
    if (has_hotpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_HotPointCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_HotPointCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_HotPointCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_HotPointCtrl::MergeFrom(const Packet_Ctrl_HotPointCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_hotpoint()) {
      mutable_hotpoint()->::TvWall::Packet_ElementDat_HotPoint::MergeFrom(from.hotpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_HotPointCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_HotPointCtrl::CopyFrom(const Packet_Ctrl_HotPointCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_HotPointCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_hotpoint()) {
    if (!this->hotpoint().IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl_HotPointCtrl::Swap(Packet_Ctrl_HotPointCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(hotpoint_, other->hotpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_HotPointCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_HotPointCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_HotPointCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_LayoutCtrl_LayoutCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_LayoutCtrl_LayoutCtrlType_descriptor_;
}
bool Packet_Ctrl_LayoutCtrl_LayoutCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_LayoutCtrl_LayoutCtrlType Packet_Ctrl_LayoutCtrl::SAVE_CURRENT;
const Packet_Ctrl_LayoutCtrl_LayoutCtrlType Packet_Ctrl_LayoutCtrl::DEL;
const Packet_Ctrl_LayoutCtrl_LayoutCtrlType Packet_Ctrl_LayoutCtrl::USE;
const Packet_Ctrl_LayoutCtrl_LayoutCtrlType Packet_Ctrl_LayoutCtrl::LayoutCtrlType_MIN;
const Packet_Ctrl_LayoutCtrl_LayoutCtrlType Packet_Ctrl_LayoutCtrl::LayoutCtrlType_MAX;
const int Packet_Ctrl_LayoutCtrl::LayoutCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_LayoutCtrl::kLyoutNameFieldNumber;
const int Packet_Ctrl_LayoutCtrl::kTypeFieldNumber;
const int Packet_Ctrl_LayoutCtrl::kIsalarmFieldNumber;
const int Packet_Ctrl_LayoutCtrl::kAlarmIntervalFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_LayoutCtrl::Packet_Ctrl_LayoutCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_LayoutCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_LayoutCtrl::Packet_Ctrl_LayoutCtrl(const Packet_Ctrl_LayoutCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_LayoutCtrl::SharedCtor() {
  _cached_size_ = 0;
  lyoutname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  isalarm_ = false;
  alarminterval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_LayoutCtrl::~Packet_Ctrl_LayoutCtrl() {
  SharedDtor();
}

void Packet_Ctrl_LayoutCtrl::SharedDtor() {
  if (lyoutname_ != &::google::protobuf::internal::kEmptyString) {
    delete lyoutname_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_LayoutCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_LayoutCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_LayoutCtrl_descriptor_;
}

const Packet_Ctrl_LayoutCtrl& Packet_Ctrl_LayoutCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_LayoutCtrl* Packet_Ctrl_LayoutCtrl::default_instance_ = NULL;

Packet_Ctrl_LayoutCtrl* Packet_Ctrl_LayoutCtrl::New() const {
  return new Packet_Ctrl_LayoutCtrl;
}

void Packet_Ctrl_LayoutCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lyoutname()) {
      if (lyoutname_ != &::google::protobuf::internal::kEmptyString) {
        lyoutname_->clear();
      }
    }
    type_ = 0;
    isalarm_ = false;
    alarminterval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_LayoutCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string lyoutName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lyoutname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lyoutname().data(), this->lyoutname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isalarm;
        break;
      }

      // optional bool isalarm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isalarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isalarm_)));
          set_has_isalarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .TvWall.Packet.Ctrl.LayoutCtrl.LayoutCtrlType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_LayoutCtrl_LayoutCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_LayoutCtrl_LayoutCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_alarmInterval;
        break;
      }

      // optional int32 alarmInterval = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarminterval_)));
          set_has_alarminterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_LayoutCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string lyoutName = 1;
  if (has_lyoutname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lyoutname().data(), this->lyoutname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lyoutname(), output);
  }

  // optional bool isalarm = 2;
  if (has_isalarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isalarm(), output);
  }

  // required .TvWall.Packet.Ctrl.LayoutCtrl.LayoutCtrlType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 alarmInterval = 4;
  if (has_alarminterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->alarminterval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_LayoutCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string lyoutName = 1;
  if (has_lyoutname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lyoutname().data(), this->lyoutname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lyoutname(), target);
  }

  // optional bool isalarm = 2;
  if (has_isalarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isalarm(), target);
  }

  // required .TvWall.Packet.Ctrl.LayoutCtrl.LayoutCtrlType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 alarmInterval = 4;
  if (has_alarminterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->alarminterval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_LayoutCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string lyoutName = 1;
    if (has_lyoutname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lyoutname());
    }

    // required .TvWall.Packet.Ctrl.LayoutCtrl.LayoutCtrlType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool isalarm = 2;
    if (has_isalarm()) {
      total_size += 1 + 1;
    }

    // optional int32 alarmInterval = 4;
    if (has_alarminterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarminterval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_LayoutCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_LayoutCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_LayoutCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_LayoutCtrl::MergeFrom(const Packet_Ctrl_LayoutCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lyoutname()) {
      set_lyoutname(from.lyoutname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isalarm()) {
      set_isalarm(from.isalarm());
    }
    if (from.has_alarminterval()) {
      set_alarminterval(from.alarminterval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_LayoutCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_LayoutCtrl::CopyFrom(const Packet_Ctrl_LayoutCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_LayoutCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Ctrl_LayoutCtrl::Swap(Packet_Ctrl_LayoutCtrl* other) {
  if (other != this) {
    std::swap(lyoutname_, other->lyoutname_);
    std::swap(type_, other->type_);
    std::swap(isalarm_, other->isalarm_);
    std::swap(alarminterval_, other->alarminterval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_LayoutCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_LayoutCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_LayoutCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType_descriptor_;
}
bool Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType Packet_Ctrl_LayoutLoopCtrl::ADD;
const Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType Packet_Ctrl_LayoutLoopCtrl::REMOVE;
const Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType Packet_Ctrl_LayoutLoopCtrl::ADD_LAYOUT;
const Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType Packet_Ctrl_LayoutLoopCtrl::USE;
const Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType Packet_Ctrl_LayoutLoopCtrl::SET_LOOP;
const Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType Packet_Ctrl_LayoutLoopCtrl::STOP;
const Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType Packet_Ctrl_LayoutLoopCtrl::LayoutLoopCtrlType_MIN;
const Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType Packet_Ctrl_LayoutLoopCtrl::LayoutLoopCtrlType_MAX;
const int Packet_Ctrl_LayoutLoopCtrl::LayoutLoopCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_LayoutLoopCtrl::kLyoutLoopNameFieldNumber;
const int Packet_Ctrl_LayoutLoopCtrl::kTypeFieldNumber;
const int Packet_Ctrl_LayoutLoopCtrl::kLayoutNameFieldNumber;
const int Packet_Ctrl_LayoutLoopCtrl::kLoopFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_LayoutLoopCtrl::Packet_Ctrl_LayoutLoopCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_LayoutLoopCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_LayoutLoopCtrl::Packet_Ctrl_LayoutLoopCtrl(const Packet_Ctrl_LayoutLoopCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_LayoutLoopCtrl::SharedCtor() {
  _cached_size_ = 0;
  lyoutloopname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  loop_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_LayoutLoopCtrl::~Packet_Ctrl_LayoutLoopCtrl() {
  SharedDtor();
}

void Packet_Ctrl_LayoutLoopCtrl::SharedDtor() {
  if (lyoutloopname_ != &::google::protobuf::internal::kEmptyString) {
    delete lyoutloopname_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_LayoutLoopCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_LayoutLoopCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_LayoutLoopCtrl_descriptor_;
}

const Packet_Ctrl_LayoutLoopCtrl& Packet_Ctrl_LayoutLoopCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_LayoutLoopCtrl* Packet_Ctrl_LayoutLoopCtrl::default_instance_ = NULL;

Packet_Ctrl_LayoutLoopCtrl* Packet_Ctrl_LayoutLoopCtrl::New() const {
  return new Packet_Ctrl_LayoutLoopCtrl;
}

void Packet_Ctrl_LayoutLoopCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lyoutloopname()) {
      if (lyoutloopname_ != &::google::protobuf::internal::kEmptyString) {
        lyoutloopname_->clear();
      }
    }
    type_ = 0;
    loop_ = 0u;
  }
  layoutname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_LayoutLoopCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string lyoutLoopName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lyoutloopname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lyoutloopname().data(), this->lyoutloopname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TvWall.Packet.Ctrl.LayoutLoopCtrl.LayoutLoopCtrlType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_LayoutLoopCtrl_LayoutLoopCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_layoutName;
        break;
      }

      // repeated string layoutName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layoutName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_layoutname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->layoutname(this->layoutname_size() - 1).data(),
            this->layoutname(this->layoutname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_layoutName;
        if (input->ExpectTag(32)) goto parse_loop;
        break;
      }

      // optional uint32 loop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loop_)));
          set_has_loop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_LayoutLoopCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string lyoutLoopName = 1;
  if (has_lyoutloopname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lyoutloopname().data(), this->lyoutloopname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lyoutloopname(), output);
  }

  // required .TvWall.Packet.Ctrl.LayoutLoopCtrl.LayoutLoopCtrlType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated string layoutName = 3;
  for (int i = 0; i < this->layoutname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->layoutname(i).data(), this->layoutname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->layoutname(i), output);
  }

  // optional uint32 loop = 4;
  if (has_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->loop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_LayoutLoopCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string lyoutLoopName = 1;
  if (has_lyoutloopname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lyoutloopname().data(), this->lyoutloopname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lyoutloopname(), target);
  }

  // required .TvWall.Packet.Ctrl.LayoutLoopCtrl.LayoutLoopCtrlType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated string layoutName = 3;
  for (int i = 0; i < this->layoutname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layoutname(i).data(), this->layoutname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->layoutname(i), target);
  }

  // optional uint32 loop = 4;
  if (has_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->loop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_LayoutLoopCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string lyoutLoopName = 1;
    if (has_lyoutloopname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lyoutloopname());
    }

    // required .TvWall.Packet.Ctrl.LayoutLoopCtrl.LayoutLoopCtrlType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 loop = 4;
    if (has_loop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loop());
    }

  }
  // repeated string layoutName = 3;
  total_size += 1 * this->layoutname_size();
  for (int i = 0; i < this->layoutname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->layoutname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_LayoutLoopCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_LayoutLoopCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_LayoutLoopCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_LayoutLoopCtrl::MergeFrom(const Packet_Ctrl_LayoutLoopCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  layoutname_.MergeFrom(from.layoutname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lyoutloopname()) {
      set_lyoutloopname(from.lyoutloopname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_loop()) {
      set_loop(from.loop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_LayoutLoopCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_LayoutLoopCtrl::CopyFrom(const Packet_Ctrl_LayoutLoopCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_LayoutLoopCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Ctrl_LayoutLoopCtrl::Swap(Packet_Ctrl_LayoutLoopCtrl* other) {
  if (other != this) {
    std::swap(lyoutloopname_, other->lyoutloopname_);
    std::swap(type_, other->type_);
    layoutname_.Swap(&other->layoutname_);
    std::swap(loop_, other->loop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_LayoutLoopCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_LayoutLoopCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_LayoutLoopCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType_descriptor_;
}
bool Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType Packet_Ctrl_CtrlMaster_CtrlMasterLyout::SAVE;
const Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType Packet_Ctrl_CtrlMaster_CtrlMasterLyout::DEL;
const Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType Packet_Ctrl_CtrlMaster_CtrlMasterLyout::CMLType_MIN;
const Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType Packet_Ctrl_CtrlMaster_CtrlMasterLyout::CMLType_MAX;
const int Packet_Ctrl_CtrlMaster_CtrlMasterLyout::CMLType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_CtrlMaster_CtrlMasterLyout::kTypeFieldNumber;
const int Packet_Ctrl_CtrlMaster_CtrlMasterLyout::kMasterLayoutFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_CtrlMaster_CtrlMasterLyout::Packet_Ctrl_CtrlMaster_CtrlMasterLyout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::InitAsDefaultInstance() {
  masterlayout_ = const_cast< ::TvWall::Packet_ElementMaster_MasterLayout_MasLayout*>(&::TvWall::Packet_ElementMaster_MasterLayout_MasLayout::default_instance());
}

Packet_Ctrl_CtrlMaster_CtrlMasterLyout::Packet_Ctrl_CtrlMaster_CtrlMasterLyout(const Packet_Ctrl_CtrlMaster_CtrlMasterLyout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  masterlayout_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_CtrlMaster_CtrlMasterLyout::~Packet_Ctrl_CtrlMaster_CtrlMasterLyout() {
  SharedDtor();
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::SharedDtor() {
  if (this != default_instance_) {
    delete masterlayout_;
  }
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_CtrlMaster_CtrlMasterLyout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_CtrlMaster_CtrlMasterLyout_descriptor_;
}

const Packet_Ctrl_CtrlMaster_CtrlMasterLyout& Packet_Ctrl_CtrlMaster_CtrlMasterLyout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_CtrlMaster_CtrlMasterLyout* Packet_Ctrl_CtrlMaster_CtrlMasterLyout::default_instance_ = NULL;

Packet_Ctrl_CtrlMaster_CtrlMasterLyout* Packet_Ctrl_CtrlMaster_CtrlMasterLyout::New() const {
  return new Packet_Ctrl_CtrlMaster_CtrlMasterLyout;
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_masterlayout()) {
      if (masterlayout_ != NULL) masterlayout_->::TvWall::Packet_ElementMaster_MasterLayout_MasLayout::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_CtrlMaster_CtrlMasterLyout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.CtrlMaster.CtrlMasterLyout.CMLType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_CtrlMaster_CtrlMasterLyout_CMLType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_masterLayout;
        break;
      }

      // required .TvWall.Packet.ElementMaster.MasterLayout.MasLayout masterLayout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masterLayout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_masterlayout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.CtrlMaster.CtrlMasterLyout.CMLType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .TvWall.Packet.ElementMaster.MasterLayout.MasLayout masterLayout = 2;
  if (has_masterlayout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->masterlayout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_CtrlMaster_CtrlMasterLyout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.CtrlMaster.CtrlMasterLyout.CMLType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .TvWall.Packet.ElementMaster.MasterLayout.MasLayout masterLayout = 2;
  if (has_masterlayout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->masterlayout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_CtrlMaster_CtrlMasterLyout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.CtrlMaster.CtrlMasterLyout.CMLType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .TvWall.Packet.ElementMaster.MasterLayout.MasLayout masterLayout = 2;
    if (has_masterlayout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->masterlayout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_CtrlMaster_CtrlMasterLyout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_CtrlMaster_CtrlMasterLyout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::MergeFrom(const Packet_Ctrl_CtrlMaster_CtrlMasterLyout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_masterlayout()) {
      mutable_masterlayout()->::TvWall::Packet_ElementMaster_MasterLayout_MasLayout::MergeFrom(from.masterlayout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::CopyFrom(const Packet_Ctrl_CtrlMaster_CtrlMasterLyout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_CtrlMaster_CtrlMasterLyout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_masterlayout()) {
    if (!this->masterlayout().IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl_CtrlMaster_CtrlMasterLyout::Swap(Packet_Ctrl_CtrlMaster_CtrlMasterLyout* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(masterlayout_, other->masterlayout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_CtrlMaster_CtrlMasterLyout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_CtrlMaster_CtrlMasterLyout_descriptor_;
  metadata.reflection = Packet_Ctrl_CtrlMaster_CtrlMasterLyout_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Ctrl_CtrlMaster::kCtrlLyoutFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_CtrlMaster::Packet_Ctrl_CtrlMaster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_CtrlMaster::InitAsDefaultInstance() {
  ctrllyout_ = const_cast< ::TvWall::Packet_Ctrl_CtrlMaster_CtrlMasterLyout*>(&::TvWall::Packet_Ctrl_CtrlMaster_CtrlMasterLyout::default_instance());
}

Packet_Ctrl_CtrlMaster::Packet_Ctrl_CtrlMaster(const Packet_Ctrl_CtrlMaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_CtrlMaster::SharedCtor() {
  _cached_size_ = 0;
  ctrllyout_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_CtrlMaster::~Packet_Ctrl_CtrlMaster() {
  SharedDtor();
}

void Packet_Ctrl_CtrlMaster::SharedDtor() {
  if (this != default_instance_) {
    delete ctrllyout_;
  }
}

void Packet_Ctrl_CtrlMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_CtrlMaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_CtrlMaster_descriptor_;
}

const Packet_Ctrl_CtrlMaster& Packet_Ctrl_CtrlMaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_CtrlMaster* Packet_Ctrl_CtrlMaster::default_instance_ = NULL;

Packet_Ctrl_CtrlMaster* Packet_Ctrl_CtrlMaster::New() const {
  return new Packet_Ctrl_CtrlMaster;
}

void Packet_Ctrl_CtrlMaster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ctrllyout()) {
      if (ctrllyout_ != NULL) ctrllyout_->::TvWall::Packet_Ctrl_CtrlMaster_CtrlMasterLyout::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_CtrlMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TvWall.Packet.Ctrl.CtrlMaster.CtrlMasterLyout ctrlLyout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ctrllyout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_CtrlMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TvWall.Packet.Ctrl.CtrlMaster.CtrlMasterLyout ctrlLyout = 1;
  if (has_ctrllyout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ctrllyout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_CtrlMaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TvWall.Packet.Ctrl.CtrlMaster.CtrlMasterLyout ctrlLyout = 1;
  if (has_ctrllyout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ctrllyout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_CtrlMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TvWall.Packet.Ctrl.CtrlMaster.CtrlMasterLyout ctrlLyout = 1;
    if (has_ctrllyout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ctrllyout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_CtrlMaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_CtrlMaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_CtrlMaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_CtrlMaster::MergeFrom(const Packet_Ctrl_CtrlMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctrllyout()) {
      mutable_ctrllyout()->::TvWall::Packet_Ctrl_CtrlMaster_CtrlMasterLyout::MergeFrom(from.ctrllyout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_CtrlMaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_CtrlMaster::CopyFrom(const Packet_Ctrl_CtrlMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_CtrlMaster::IsInitialized() const {

  if (has_ctrllyout()) {
    if (!this->ctrllyout().IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl_CtrlMaster::Swap(Packet_Ctrl_CtrlMaster* other) {
  if (other != this) {
    std::swap(ctrllyout_, other->ctrllyout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_CtrlMaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_CtrlMaster_descriptor_;
  metadata.reflection = Packet_Ctrl_CtrlMaster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_MachineCtrl_MachineCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_MachineCtrl_MachineCtrlType_descriptor_;
}
bool Packet_Ctrl_MachineCtrl_MachineCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::REBOOT;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::SOFT_REBOOT;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::SET_SCREEN;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::POWEROFF;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::NET_HOST;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::NET_GATEWAY;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::NET_INTERFACE;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::NVR_ADD;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::NVR_DEL;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::FMP;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::TVWALL_INDEX;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::MachineCtrlType_MIN;
const Packet_Ctrl_MachineCtrl_MachineCtrlType Packet_Ctrl_MachineCtrl::MachineCtrlType_MAX;
const int Packet_Ctrl_MachineCtrl::MachineCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_MachineCtrl::kTypeFieldNumber;
const int Packet_Ctrl_MachineCtrl::kScreenModeFieldNumber;
const int Packet_Ctrl_MachineCtrl::kNetInterfaceFieldNumber;
const int Packet_Ctrl_MachineCtrl::kNetworkFieldNumber;
const int Packet_Ctrl_MachineCtrl::kNvrFieldNumber;
const int Packet_Ctrl_MachineCtrl::kFmpFieldNumber;
const int Packet_Ctrl_MachineCtrl::kTvwallindexFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_MachineCtrl::Packet_Ctrl_MachineCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_MachineCtrl::InitAsDefaultInstance() {
  netinterface_ = const_cast< ::TvWall::NetInterface*>(&::TvWall::NetInterface::default_instance());
  network_ = const_cast< ::TvWall::Network*>(&::TvWall::Network::default_instance());
  nvr_ = const_cast< ::TvWall::NVR*>(&::TvWall::NVR::default_instance());
  fmp_ = const_cast< ::TvWall::FMP*>(&::TvWall::FMP::default_instance());
}

Packet_Ctrl_MachineCtrl::Packet_Ctrl_MachineCtrl(const Packet_Ctrl_MachineCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_MachineCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  screenmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netinterface_ = NULL;
  network_ = NULL;
  nvr_ = NULL;
  fmp_ = NULL;
  tvwallindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_MachineCtrl::~Packet_Ctrl_MachineCtrl() {
  SharedDtor();
}

void Packet_Ctrl_MachineCtrl::SharedDtor() {
  if (screenmode_ != &::google::protobuf::internal::kEmptyString) {
    delete screenmode_;
  }
  if (this != default_instance_) {
    delete netinterface_;
    delete network_;
    delete nvr_;
    delete fmp_;
  }
}

void Packet_Ctrl_MachineCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_MachineCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_MachineCtrl_descriptor_;
}

const Packet_Ctrl_MachineCtrl& Packet_Ctrl_MachineCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_MachineCtrl* Packet_Ctrl_MachineCtrl::default_instance_ = NULL;

Packet_Ctrl_MachineCtrl* Packet_Ctrl_MachineCtrl::New() const {
  return new Packet_Ctrl_MachineCtrl;
}

void Packet_Ctrl_MachineCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_screenmode()) {
      if (screenmode_ != &::google::protobuf::internal::kEmptyString) {
        screenmode_->clear();
      }
    }
    if (has_netinterface()) {
      if (netinterface_ != NULL) netinterface_->::TvWall::NetInterface::Clear();
    }
    if (has_network()) {
      if (network_ != NULL) network_->::TvWall::Network::Clear();
    }
    if (has_nvr()) {
      if (nvr_ != NULL) nvr_->::TvWall::NVR::Clear();
    }
    if (has_fmp()) {
      if (fmp_ != NULL) fmp_->::TvWall::FMP::Clear();
    }
    tvwallindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_MachineCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.MachineCtrl.MachineCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_MachineCtrl_MachineCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_MachineCtrl_MachineCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_screenMode;
        break;
      }

      // optional string screenMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screenMode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_screenmode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->screenmode().data(), this->screenmode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_netInterface;
        break;
      }

      // optional .TvWall.NetInterface netInterface = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netInterface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_netinterface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_network;
        break;
      }

      // optional .TvWall.Network network = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nvr;
        break;
      }

      // optional .TvWall.NVR nvr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nvr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nvr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fmp;
        break;
      }

      // optional .TvWall.FMP fmp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fmp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tvwallindex;
        break;
      }

      // optional int32 tvwallindex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tvwallindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tvwallindex_)));
          set_has_tvwallindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_MachineCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.MachineCtrl.MachineCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string screenMode = 2;
  if (has_screenmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->screenmode().data(), this->screenmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->screenmode(), output);
  }

  // optional .TvWall.NetInterface netInterface = 3;
  if (has_netinterface()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->netinterface(), output);
  }

  // optional .TvWall.Network network = 4;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->network(), output);
  }

  // optional .TvWall.NVR nvr = 5;
  if (has_nvr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nvr(), output);
  }

  // optional .TvWall.FMP fmp = 6;
  if (has_fmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fmp(), output);
  }

  // optional int32 tvwallindex = 7;
  if (has_tvwallindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tvwallindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_MachineCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.MachineCtrl.MachineCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string screenMode = 2;
  if (has_screenmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->screenmode().data(), this->screenmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->screenmode(), target);
  }

  // optional .TvWall.NetInterface netInterface = 3;
  if (has_netinterface()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->netinterface(), target);
  }

  // optional .TvWall.Network network = 4;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->network(), target);
  }

  // optional .TvWall.NVR nvr = 5;
  if (has_nvr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nvr(), target);
  }

  // optional .TvWall.FMP fmp = 6;
  if (has_fmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fmp(), target);
  }

  // optional int32 tvwallindex = 7;
  if (has_tvwallindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tvwallindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_MachineCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.MachineCtrl.MachineCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string screenMode = 2;
    if (has_screenmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->screenmode());
    }

    // optional .TvWall.NetInterface netInterface = 3;
    if (has_netinterface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->netinterface());
    }

    // optional .TvWall.Network network = 4;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network());
    }

    // optional .TvWall.NVR nvr = 5;
    if (has_nvr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nvr());
    }

    // optional .TvWall.FMP fmp = 6;
    if (has_fmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fmp());
    }

    // optional int32 tvwallindex = 7;
    if (has_tvwallindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tvwallindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_MachineCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_MachineCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_MachineCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_MachineCtrl::MergeFrom(const Packet_Ctrl_MachineCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_screenmode()) {
      set_screenmode(from.screenmode());
    }
    if (from.has_netinterface()) {
      mutable_netinterface()->::TvWall::NetInterface::MergeFrom(from.netinterface());
    }
    if (from.has_network()) {
      mutable_network()->::TvWall::Network::MergeFrom(from.network());
    }
    if (from.has_nvr()) {
      mutable_nvr()->::TvWall::NVR::MergeFrom(from.nvr());
    }
    if (from.has_fmp()) {
      mutable_fmp()->::TvWall::FMP::MergeFrom(from.fmp());
    }
    if (from.has_tvwallindex()) {
      set_tvwallindex(from.tvwallindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_MachineCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_MachineCtrl::CopyFrom(const Packet_Ctrl_MachineCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_MachineCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_netinterface()) {
    if (!this->netinterface().IsInitialized()) return false;
  }
  if (has_network()) {
    if (!this->network().IsInitialized()) return false;
  }
  if (has_nvr()) {
    if (!this->nvr().IsInitialized()) return false;
  }
  if (has_fmp()) {
    if (!this->fmp().IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl_MachineCtrl::Swap(Packet_Ctrl_MachineCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(screenmode_, other->screenmode_);
    std::swap(netinterface_, other->netinterface_);
    std::swap(network_, other->network_);
    std::swap(nvr_, other->nvr_);
    std::swap(fmp_, other->fmp_);
    std::swap(tvwallindex_, other->tvwallindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_MachineCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_MachineCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_MachineCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_KeyCtrl_KeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_KeyCtrl_KeyType_descriptor_;
}
bool Packet_Ctrl_KeyCtrl_KeyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_KeyCtrl_KeyType Packet_Ctrl_KeyCtrl::KeyPress;
const Packet_Ctrl_KeyCtrl_KeyType Packet_Ctrl_KeyCtrl::KeyRelease;
const Packet_Ctrl_KeyCtrl_KeyType Packet_Ctrl_KeyCtrl::ShortcutOverride;
const Packet_Ctrl_KeyCtrl_KeyType Packet_Ctrl_KeyCtrl::KeyType_MIN;
const Packet_Ctrl_KeyCtrl_KeyType Packet_Ctrl_KeyCtrl::KeyType_MAX;
const int Packet_Ctrl_KeyCtrl::KeyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_KeyCtrl::kTypeFieldNumber;
const int Packet_Ctrl_KeyCtrl::kKeyFieldNumber;
const int Packet_Ctrl_KeyCtrl::kModifiersFieldNumber;
const int Packet_Ctrl_KeyCtrl::kTextFieldNumber;
const int Packet_Ctrl_KeyCtrl::kAutoRepeatFieldNumber;
const int Packet_Ctrl_KeyCtrl::kCountFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_KeyCtrl::Packet_Ctrl_KeyCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_KeyCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_KeyCtrl::Packet_Ctrl_KeyCtrl(const Packet_Ctrl_KeyCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_KeyCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  key_ = 0;
  modifiers_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  autorepeat_ = false;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_KeyCtrl::~Packet_Ctrl_KeyCtrl() {
  SharedDtor();
}

void Packet_Ctrl_KeyCtrl::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_KeyCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_KeyCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_KeyCtrl_descriptor_;
}

const Packet_Ctrl_KeyCtrl& Packet_Ctrl_KeyCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_KeyCtrl* Packet_Ctrl_KeyCtrl::default_instance_ = NULL;

Packet_Ctrl_KeyCtrl* Packet_Ctrl_KeyCtrl::New() const {
  return new Packet_Ctrl_KeyCtrl;
}

void Packet_Ctrl_KeyCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    key_ = 0;
    modifiers_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    autorepeat_ = false;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_KeyCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.KeyCtrl.KeyType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_KeyCtrl_KeyType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_KeyCtrl_KeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // required int32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modifiers;
        break;
      }

      // required int32 modifiers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifiers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modifiers_)));
          set_has_modifiers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional string text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_autoRepeat;
        break;
      }

      // optional bool autoRepeat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoRepeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autorepeat_)));
          set_has_autorepeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_KeyCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.KeyCtrl.KeyType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  // required int32 modifiers = 3;
  if (has_modifiers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->modifiers(), output);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->text(), output);
  }

  // optional bool autoRepeat = 5;
  if (has_autorepeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->autorepeat(), output);
  }

  // optional int32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_KeyCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.KeyCtrl.KeyType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key(), target);
  }

  // required int32 modifiers = 3;
  if (has_modifiers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->modifiers(), target);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional bool autoRepeat = 5;
  if (has_autorepeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->autorepeat(), target);
  }

  // optional int32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_KeyCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.KeyCtrl.KeyType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required int32 modifiers = 3;
    if (has_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modifiers());
    }

    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool autoRepeat = 5;
    if (has_autorepeat()) {
      total_size += 1 + 1;
    }

    // optional int32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_KeyCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_KeyCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_KeyCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_KeyCtrl::MergeFrom(const Packet_Ctrl_KeyCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_modifiers()) {
      set_modifiers(from.modifiers());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_autorepeat()) {
      set_autorepeat(from.autorepeat());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_KeyCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_KeyCtrl::CopyFrom(const Packet_Ctrl_KeyCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_KeyCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_Ctrl_KeyCtrl::Swap(Packet_Ctrl_KeyCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    std::swap(modifiers_, other->modifiers_);
    std::swap(text_, other->text_);
    std::swap(autorepeat_, other->autorepeat_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_KeyCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_KeyCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_KeyCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_KeyCmdCtrl_KeyCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_KeyCmdCtrl_KeyCmdType_descriptor_;
}
bool Packet_Ctrl_KeyCmdCtrl_KeyCmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_KeyCmdCtrl_KeyCmdType Packet_Ctrl_KeyCmdCtrl::Media;
const Packet_Ctrl_KeyCmdCtrl_KeyCmdType Packet_Ctrl_KeyCmdCtrl::Ptz;
const Packet_Ctrl_KeyCmdCtrl_KeyCmdType Packet_Ctrl_KeyCmdCtrl::Preset;
const Packet_Ctrl_KeyCmdCtrl_KeyCmdType Packet_Ctrl_KeyCmdCtrl::tour;
const Packet_Ctrl_KeyCmdCtrl_KeyCmdType Packet_Ctrl_KeyCmdCtrl::KeyCmdType_MIN;
const Packet_Ctrl_KeyCmdCtrl_KeyCmdType Packet_Ctrl_KeyCmdCtrl::KeyCmdType_MAX;
const int Packet_Ctrl_KeyCmdCtrl::KeyCmdType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Packet_Ctrl_KeyCmdCtrl_KeyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_KeyCmdCtrl_KeyType_descriptor_;
}
bool Packet_Ctrl_KeyCmdCtrl_KeyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_KeyCmdCtrl_KeyType Packet_Ctrl_KeyCmdCtrl::KeyPress;
const Packet_Ctrl_KeyCmdCtrl_KeyType Packet_Ctrl_KeyCmdCtrl::KeyRelease;
const Packet_Ctrl_KeyCmdCtrl_KeyType Packet_Ctrl_KeyCmdCtrl::KeyType_MIN;
const Packet_Ctrl_KeyCmdCtrl_KeyType Packet_Ctrl_KeyCmdCtrl::KeyType_MAX;
const int Packet_Ctrl_KeyCmdCtrl::KeyType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_KeyCmdCtrl::kTypeFieldNumber;
const int Packet_Ctrl_KeyCmdCtrl::kScreenIdxFieldNumber;
const int Packet_Ctrl_KeyCmdCtrl::kCamPosIdxFieldNumber;
const int Packet_Ctrl_KeyCmdCtrl::kKeyFieldNumber;
const int Packet_Ctrl_KeyCmdCtrl::kKeyTypeFieldNumber;
const int Packet_Ctrl_KeyCmdCtrl::kTextFieldNumber;
const int Packet_Ctrl_KeyCmdCtrl::kCamGuidFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_KeyCmdCtrl::Packet_Ctrl_KeyCmdCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_KeyCmdCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_KeyCmdCtrl::Packet_Ctrl_KeyCmdCtrl(const Packet_Ctrl_KeyCmdCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_KeyCmdCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  screenidx_ = 0;
  camposidx_ = 0;
  key_ = 0;
  keytype_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cam_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_KeyCmdCtrl::~Packet_Ctrl_KeyCmdCtrl() {
  SharedDtor();
}

void Packet_Ctrl_KeyCmdCtrl::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (cam_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete cam_guid_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_KeyCmdCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_KeyCmdCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_KeyCmdCtrl_descriptor_;
}

const Packet_Ctrl_KeyCmdCtrl& Packet_Ctrl_KeyCmdCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_KeyCmdCtrl* Packet_Ctrl_KeyCmdCtrl::default_instance_ = NULL;

Packet_Ctrl_KeyCmdCtrl* Packet_Ctrl_KeyCmdCtrl::New() const {
  return new Packet_Ctrl_KeyCmdCtrl;
}

void Packet_Ctrl_KeyCmdCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    screenidx_ = 0;
    camposidx_ = 0;
    key_ = 0;
    keytype_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_cam_guid()) {
      if (cam_guid_ != &::google::protobuf::internal::kEmptyString) {
        cam_guid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_KeyCmdCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TvWall.Packet.Ctrl.KeyCmdCtrl.KeyCmdType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_KeyCmdCtrl_KeyCmdType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_KeyCmdCtrl_KeyCmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_screenIdx;
        break;
      }

      // optional int32 screenIdx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screenIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenidx_)));
          set_has_screenidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_camPosIdx;
        break;
      }

      // optional int32 camPosIdx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camPosIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camposidx_)));
          set_has_camposidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key;
        break;
      }

      // optional int32 key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_keyType;
        break;
      }

      // optional .TvWall.Packet.Ctrl.KeyCmdCtrl.KeyType keyType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keyType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_KeyCmdCtrl_KeyType_IsValid(value)) {
            set_keytype(static_cast< ::TvWall::Packet_Ctrl_KeyCmdCtrl_KeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // optional string text = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cam_guid;
        break;
      }

      // optional string cam_guid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cam_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cam_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cam_guid().data(), this->cam_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_KeyCmdCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TvWall.Packet.Ctrl.KeyCmdCtrl.KeyCmdType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 screenIdx = 2;
  if (has_screenidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->screenidx(), output);
  }

  // optional int32 camPosIdx = 3;
  if (has_camposidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->camposidx(), output);
  }

  // optional int32 key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->key(), output);
  }

  // optional .TvWall.Packet.Ctrl.KeyCmdCtrl.KeyType keyType = 5;
  if (has_keytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->keytype(), output);
  }

  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }

  // optional string cam_guid = 7;
  if (has_cam_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cam_guid().data(), this->cam_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cam_guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_KeyCmdCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TvWall.Packet.Ctrl.KeyCmdCtrl.KeyCmdType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 screenIdx = 2;
  if (has_screenidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->screenidx(), target);
  }

  // optional int32 camPosIdx = 3;
  if (has_camposidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->camposidx(), target);
  }

  // optional int32 key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->key(), target);
  }

  // optional .TvWall.Packet.Ctrl.KeyCmdCtrl.KeyType keyType = 5;
  if (has_keytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->keytype(), target);
  }

  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // optional string cam_guid = 7;
  if (has_cam_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cam_guid().data(), this->cam_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cam_guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_KeyCmdCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TvWall.Packet.Ctrl.KeyCmdCtrl.KeyCmdType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 screenIdx = 2;
    if (has_screenidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenidx());
    }

    // optional int32 camPosIdx = 3;
    if (has_camposidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camposidx());
    }

    // optional int32 key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional .TvWall.Packet.Ctrl.KeyCmdCtrl.KeyType keyType = 5;
    if (has_keytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->keytype());
    }

    // optional string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string cam_guid = 7;
    if (has_cam_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cam_guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_KeyCmdCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_KeyCmdCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_KeyCmdCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_KeyCmdCtrl::MergeFrom(const Packet_Ctrl_KeyCmdCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_screenidx()) {
      set_screenidx(from.screenidx());
    }
    if (from.has_camposidx()) {
      set_camposidx(from.camposidx());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_keytype()) {
      set_keytype(from.keytype());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_cam_guid()) {
      set_cam_guid(from.cam_guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_KeyCmdCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_KeyCmdCtrl::CopyFrom(const Packet_Ctrl_KeyCmdCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_KeyCmdCtrl::IsInitialized() const {

  return true;
}

void Packet_Ctrl_KeyCmdCtrl::Swap(Packet_Ctrl_KeyCmdCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(screenidx_, other->screenidx_);
    std::swap(camposidx_, other->camposidx_);
    std::swap(key_, other->key_);
    std::swap(keytype_, other->keytype_);
    std::swap(text_, other->text_);
    std::swap(cam_guid_, other->cam_guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_KeyCmdCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_KeyCmdCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_KeyCmdCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Ctrl_AlarmCtrl::kAlarmSourceFieldNumber;
const int Packet_Ctrl_AlarmCtrl::kAlarmClearFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_AlarmCtrl::Packet_Ctrl_AlarmCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_AlarmCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_AlarmCtrl::Packet_Ctrl_AlarmCtrl(const Packet_Ctrl_AlarmCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_AlarmCtrl::SharedCtor() {
  _cached_size_ = 0;
  alarmsource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarmclear_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_AlarmCtrl::~Packet_Ctrl_AlarmCtrl() {
  SharedDtor();
}

void Packet_Ctrl_AlarmCtrl::SharedDtor() {
  if (alarmsource_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmsource_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_AlarmCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_AlarmCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_AlarmCtrl_descriptor_;
}

const Packet_Ctrl_AlarmCtrl& Packet_Ctrl_AlarmCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_AlarmCtrl* Packet_Ctrl_AlarmCtrl::default_instance_ = NULL;

Packet_Ctrl_AlarmCtrl* Packet_Ctrl_AlarmCtrl::New() const {
  return new Packet_Ctrl_AlarmCtrl;
}

void Packet_Ctrl_AlarmCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alarmsource()) {
      if (alarmsource_ != &::google::protobuf::internal::kEmptyString) {
        alarmsource_->clear();
      }
    }
    alarmclear_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_AlarmCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string alarmSource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarmsource().data(), this->alarmsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_alarmClear;
        break;
      }

      // required bool alarmClear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmClear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alarmclear_)));
          set_has_alarmclear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_AlarmCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string alarmSource = 1;
  if (has_alarmsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmsource().data(), this->alarmsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->alarmsource(), output);
  }

  // required bool alarmClear = 2;
  if (has_alarmclear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->alarmclear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_AlarmCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string alarmSource = 1;
  if (has_alarmsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmsource().data(), this->alarmsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alarmsource(), target);
  }

  // required bool alarmClear = 2;
  if (has_alarmclear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->alarmclear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_AlarmCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string alarmSource = 1;
    if (has_alarmsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmsource());
    }

    // required bool alarmClear = 2;
    if (has_alarmclear()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_AlarmCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_AlarmCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_AlarmCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_AlarmCtrl::MergeFrom(const Packet_Ctrl_AlarmCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarmsource()) {
      set_alarmsource(from.alarmsource());
    }
    if (from.has_alarmclear()) {
      set_alarmclear(from.alarmclear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_AlarmCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_AlarmCtrl::CopyFrom(const Packet_Ctrl_AlarmCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_AlarmCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Ctrl_AlarmCtrl::Swap(Packet_Ctrl_AlarmCtrl* other) {
  if (other != this) {
    std::swap(alarmsource_, other->alarmsource_);
    std::swap(alarmclear_, other->alarmclear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_AlarmCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_AlarmCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_AlarmCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_SyncClockCtrl_SyncType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_SyncClockCtrl_SyncType_descriptor_;
}
bool Packet_Ctrl_SyncClockCtrl_SyncType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_SyncClockCtrl_SyncType Packet_Ctrl_SyncClockCtrl::SyncClock;
const Packet_Ctrl_SyncClockCtrl_SyncType Packet_Ctrl_SyncClockCtrl::SyncFirstCam;
const Packet_Ctrl_SyncClockCtrl_SyncType Packet_Ctrl_SyncClockCtrl::SyncType_MIN;
const Packet_Ctrl_SyncClockCtrl_SyncType Packet_Ctrl_SyncClockCtrl::SyncType_MAX;
const int Packet_Ctrl_SyncClockCtrl::SyncType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_SyncClockCtrl::kClockFieldNumber;
const int Packet_Ctrl_SyncClockCtrl::kTypeFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_SyncClockCtrl::Packet_Ctrl_SyncClockCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_SyncClockCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_SyncClockCtrl::Packet_Ctrl_SyncClockCtrl(const Packet_Ctrl_SyncClockCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_SyncClockCtrl::SharedCtor() {
  _cached_size_ = 0;
  clock_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_SyncClockCtrl::~Packet_Ctrl_SyncClockCtrl() {
  SharedDtor();
}

void Packet_Ctrl_SyncClockCtrl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_SyncClockCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_SyncClockCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_SyncClockCtrl_descriptor_;
}

const Packet_Ctrl_SyncClockCtrl& Packet_Ctrl_SyncClockCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_SyncClockCtrl* Packet_Ctrl_SyncClockCtrl::default_instance_ = NULL;

Packet_Ctrl_SyncClockCtrl* Packet_Ctrl_SyncClockCtrl::New() const {
  return new Packet_Ctrl_SyncClockCtrl;
}

void Packet_Ctrl_SyncClockCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clock_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_SyncClockCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clock_)));
          set_has_clock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .TvWall.Packet.Ctrl.SyncClockCtrl.SyncType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_SyncClockCtrl_SyncType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_SyncClockCtrl_SyncType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_SyncClockCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clock = 1;
  if (has_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clock(), output);
  }

  // optional .TvWall.Packet.Ctrl.SyncClockCtrl.SyncType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_SyncClockCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clock = 1;
  if (has_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clock(), target);
  }

  // optional .TvWall.Packet.Ctrl.SyncClockCtrl.SyncType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_SyncClockCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clock = 1;
    if (has_clock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clock());
    }

    // optional .TvWall.Packet.Ctrl.SyncClockCtrl.SyncType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_SyncClockCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_SyncClockCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_SyncClockCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_SyncClockCtrl::MergeFrom(const Packet_Ctrl_SyncClockCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clock()) {
      set_clock(from.clock());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_SyncClockCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_SyncClockCtrl::CopyFrom(const Packet_Ctrl_SyncClockCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_SyncClockCtrl::IsInitialized() const {

  return true;
}

void Packet_Ctrl_SyncClockCtrl::Swap(Packet_Ctrl_SyncClockCtrl* other) {
  if (other != this) {
    std::swap(clock_, other->clock_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_SyncClockCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_SyncClockCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_SyncClockCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_TextContextCtrl_TextContextType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_TextContextCtrl_TextContextType_descriptor_;
}
bool Packet_Ctrl_TextContextCtrl_TextContextType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_TextContextCtrl_TextContextType Packet_Ctrl_TextContextCtrl::TextChanged;
const Packet_Ctrl_TextContextCtrl_TextContextType Packet_Ctrl_TextContextCtrl::TextContextType_MIN;
const Packet_Ctrl_TextContextCtrl_TextContextType Packet_Ctrl_TextContextCtrl::TextContextType_MAX;
const int Packet_Ctrl_TextContextCtrl::TextContextType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_TextContextCtrl::kTypeFieldNumber;
const int Packet_Ctrl_TextContextCtrl::kOldTextFieldNumber;
const int Packet_Ctrl_TextContextCtrl::kNewTextFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_TextContextCtrl::Packet_Ctrl_TextContextCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_TextContextCtrl::InitAsDefaultInstance() {
}

Packet_Ctrl_TextContextCtrl::Packet_Ctrl_TextContextCtrl(const Packet_Ctrl_TextContextCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_TextContextCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  oldtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_TextContextCtrl::~Packet_Ctrl_TextContextCtrl() {
  SharedDtor();
}

void Packet_Ctrl_TextContextCtrl::SharedDtor() {
  if (oldtext_ != &::google::protobuf::internal::kEmptyString) {
    delete oldtext_;
  }
  if (newtext_ != &::google::protobuf::internal::kEmptyString) {
    delete newtext_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Ctrl_TextContextCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_TextContextCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_TextContextCtrl_descriptor_;
}

const Packet_Ctrl_TextContextCtrl& Packet_Ctrl_TextContextCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_TextContextCtrl* Packet_Ctrl_TextContextCtrl::default_instance_ = NULL;

Packet_Ctrl_TextContextCtrl* Packet_Ctrl_TextContextCtrl::New() const {
  return new Packet_Ctrl_TextContextCtrl;
}

void Packet_Ctrl_TextContextCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_oldtext()) {
      if (oldtext_ != &::google::protobuf::internal::kEmptyString) {
        oldtext_->clear();
      }
    }
    if (has_newtext()) {
      if (newtext_ != &::google::protobuf::internal::kEmptyString) {
        newtext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_TextContextCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.TextContextCtrl.TextContextType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_TextContextCtrl_TextContextType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_TextContextCtrl_TextContextType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oldText;
        break;
      }

      // required string oldText = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldtext().data(), this->oldtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newText;
        break;
      }

      // required string newText = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newtext().data(), this->newtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_TextContextCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.TextContextCtrl.TextContextType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string oldText = 2;
  if (has_oldtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldtext().data(), this->oldtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->oldtext(), output);
  }

  // required string newText = 3;
  if (has_newtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newtext().data(), this->newtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->newtext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_TextContextCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.TextContextCtrl.TextContextType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string oldText = 2;
  if (has_oldtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldtext().data(), this->oldtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->oldtext(), target);
  }

  // required string newText = 3;
  if (has_newtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newtext().data(), this->newtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newtext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_TextContextCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.TextContextCtrl.TextContextType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string oldText = 2;
    if (has_oldtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldtext());
    }

    // required string newText = 3;
    if (has_newtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newtext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_TextContextCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_TextContextCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_TextContextCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_TextContextCtrl::MergeFrom(const Packet_Ctrl_TextContextCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_oldtext()) {
      set_oldtext(from.oldtext());
    }
    if (from.has_newtext()) {
      set_newtext(from.newtext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_TextContextCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_TextContextCtrl::CopyFrom(const Packet_Ctrl_TextContextCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_TextContextCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_Ctrl_TextContextCtrl::Swap(Packet_Ctrl_TextContextCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(oldtext_, other->oldtext_);
    std::swap(newtext_, other->newtext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_TextContextCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_TextContextCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_TextContextCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType_descriptor_;
}
bool Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType Packet_Ctrl_GroupLoopCtrl::ALL;
const Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType Packet_Ctrl_GroupLoopCtrl::FOCUS_AREA;
const Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType Packet_Ctrl_GroupLoopCtrl::RESET_VIEWS;
const Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType Packet_Ctrl_GroupLoopCtrl::LOOP_TIME;
const Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType Packet_Ctrl_GroupLoopCtrl::ACTIVED;
const Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType Packet_Ctrl_GroupLoopCtrl::GroupLoopCtrlType_MIN;
const Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType Packet_Ctrl_GroupLoopCtrl::GroupLoopCtrlType_MAX;
const int Packet_Ctrl_GroupLoopCtrl::GroupLoopCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Ctrl_GroupLoopCtrl::kTypeFieldNumber;
const int Packet_Ctrl_GroupLoopCtrl::kGroupLoopFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl_GroupLoopCtrl::Packet_Ctrl_GroupLoopCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl_GroupLoopCtrl::InitAsDefaultInstance() {
  grouploop_ = const_cast< ::TvWall::Packet_ElementDat_GroupLoop*>(&::TvWall::Packet_ElementDat_GroupLoop::default_instance());
}

Packet_Ctrl_GroupLoopCtrl::Packet_Ctrl_GroupLoopCtrl(const Packet_Ctrl_GroupLoopCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl_GroupLoopCtrl::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  grouploop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl_GroupLoopCtrl::~Packet_Ctrl_GroupLoopCtrl() {
  SharedDtor();
}

void Packet_Ctrl_GroupLoopCtrl::SharedDtor() {
  if (this != default_instance_) {
    delete grouploop_;
  }
}

void Packet_Ctrl_GroupLoopCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl_GroupLoopCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_GroupLoopCtrl_descriptor_;
}

const Packet_Ctrl_GroupLoopCtrl& Packet_Ctrl_GroupLoopCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl_GroupLoopCtrl* Packet_Ctrl_GroupLoopCtrl::default_instance_ = NULL;

Packet_Ctrl_GroupLoopCtrl* Packet_Ctrl_GroupLoopCtrl::New() const {
  return new Packet_Ctrl_GroupLoopCtrl;
}

void Packet_Ctrl_GroupLoopCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_grouploop()) {
      if (grouploop_ != NULL) grouploop_->::TvWall::Packet_ElementDat_GroupLoop::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl_GroupLoopCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Ctrl.GroupLoopCtrl.GroupLoopCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Ctrl_GroupLoopCtrl_GroupLoopCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupLoop;
        break;
      }

      // required .TvWall.Packet.ElementDat.GroupLoop groupLoop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupLoop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grouploop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl_GroupLoopCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Ctrl.GroupLoopCtrl.GroupLoopCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .TvWall.Packet.ElementDat.GroupLoop groupLoop = 2;
  if (has_grouploop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->grouploop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl_GroupLoopCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Ctrl.GroupLoopCtrl.GroupLoopCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .TvWall.Packet.ElementDat.GroupLoop groupLoop = 2;
  if (has_grouploop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->grouploop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl_GroupLoopCtrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Ctrl.GroupLoopCtrl.GroupLoopCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .TvWall.Packet.ElementDat.GroupLoop groupLoop = 2;
    if (has_grouploop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grouploop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl_GroupLoopCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl_GroupLoopCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl_GroupLoopCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl_GroupLoopCtrl::MergeFrom(const Packet_Ctrl_GroupLoopCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_grouploop()) {
      mutable_grouploop()->::TvWall::Packet_ElementDat_GroupLoop::MergeFrom(from.grouploop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl_GroupLoopCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl_GroupLoopCtrl::CopyFrom(const Packet_Ctrl_GroupLoopCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl_GroupLoopCtrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_grouploop()) {
    if (!this->grouploop().IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl_GroupLoopCtrl::Swap(Packet_Ctrl_GroupLoopCtrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(grouploop_, other->grouploop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl_GroupLoopCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_GroupLoopCtrl_descriptor_;
  metadata.reflection = Packet_Ctrl_GroupLoopCtrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Ctrl::kViewCtrlFieldNumber;
const int Packet_Ctrl::kCameraCtrlFieldNumber;
const int Packet_Ctrl::kHotPointCtrlFieldNumber;
const int Packet_Ctrl::kLyoutCtrlFieldNumber;
const int Packet_Ctrl::kMasterCtrlFieldNumber;
const int Packet_Ctrl::kScreenCtrlFieldNumber;
const int Packet_Ctrl::kLyoutLoopCtrlFieldNumber;
const int Packet_Ctrl::kMachineCtrlFieldNumber;
const int Packet_Ctrl::kKeyCtrlFieldNumber;
const int Packet_Ctrl::kKeyCmdCtrlFieldNumber;
const int Packet_Ctrl::kAlarmCtrlFieldNumber;
const int Packet_Ctrl::kSyncCtrlFieldNumber;
const int Packet_Ctrl::kTxtContextCtrlFieldNumber;
const int Packet_Ctrl::kGroupLoopCtrlFieldNumber;
#endif  // !_MSC_VER

Packet_Ctrl::Packet_Ctrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Ctrl::InitAsDefaultInstance() {
  viewctrl_ = const_cast< ::TvWall::Packet_Ctrl_ViewCtrl*>(&::TvWall::Packet_Ctrl_ViewCtrl::default_instance());
  cameractrl_ = const_cast< ::TvWall::Packet_Ctrl_CameraCtrl*>(&::TvWall::Packet_Ctrl_CameraCtrl::default_instance());
  hotpointctrl_ = const_cast< ::TvWall::Packet_Ctrl_HotPointCtrl*>(&::TvWall::Packet_Ctrl_HotPointCtrl::default_instance());
  lyoutctrl_ = const_cast< ::TvWall::Packet_Ctrl_LayoutCtrl*>(&::TvWall::Packet_Ctrl_LayoutCtrl::default_instance());
  masterctrl_ = const_cast< ::TvWall::Packet_Ctrl_CtrlMaster*>(&::TvWall::Packet_Ctrl_CtrlMaster::default_instance());
  screenctrl_ = const_cast< ::TvWall::Packet_Ctrl_ScreenSplitCtrl*>(&::TvWall::Packet_Ctrl_ScreenSplitCtrl::default_instance());
  lyoutloopctrl_ = const_cast< ::TvWall::Packet_Ctrl_LayoutLoopCtrl*>(&::TvWall::Packet_Ctrl_LayoutLoopCtrl::default_instance());
  machinectrl_ = const_cast< ::TvWall::Packet_Ctrl_MachineCtrl*>(&::TvWall::Packet_Ctrl_MachineCtrl::default_instance());
  keyctrl_ = const_cast< ::TvWall::Packet_Ctrl_KeyCtrl*>(&::TvWall::Packet_Ctrl_KeyCtrl::default_instance());
  keycmdctrl_ = const_cast< ::TvWall::Packet_Ctrl_KeyCmdCtrl*>(&::TvWall::Packet_Ctrl_KeyCmdCtrl::default_instance());
  alarmctrl_ = const_cast< ::TvWall::Packet_Ctrl_AlarmCtrl*>(&::TvWall::Packet_Ctrl_AlarmCtrl::default_instance());
  syncctrl_ = const_cast< ::TvWall::Packet_Ctrl_SyncClockCtrl*>(&::TvWall::Packet_Ctrl_SyncClockCtrl::default_instance());
  txtcontextctrl_ = const_cast< ::TvWall::Packet_Ctrl_TextContextCtrl*>(&::TvWall::Packet_Ctrl_TextContextCtrl::default_instance());
  grouploopctrl_ = const_cast< ::TvWall::Packet_Ctrl_GroupLoopCtrl*>(&::TvWall::Packet_Ctrl_GroupLoopCtrl::default_instance());
}

Packet_Ctrl::Packet_Ctrl(const Packet_Ctrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Ctrl::SharedCtor() {
  _cached_size_ = 0;
  viewctrl_ = NULL;
  cameractrl_ = NULL;
  hotpointctrl_ = NULL;
  lyoutctrl_ = NULL;
  masterctrl_ = NULL;
  screenctrl_ = NULL;
  lyoutloopctrl_ = NULL;
  machinectrl_ = NULL;
  keyctrl_ = NULL;
  keycmdctrl_ = NULL;
  alarmctrl_ = NULL;
  syncctrl_ = NULL;
  txtcontextctrl_ = NULL;
  grouploopctrl_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Ctrl::~Packet_Ctrl() {
  SharedDtor();
}

void Packet_Ctrl::SharedDtor() {
  if (this != default_instance_) {
    delete viewctrl_;
    delete cameractrl_;
    delete hotpointctrl_;
    delete lyoutctrl_;
    delete masterctrl_;
    delete screenctrl_;
    delete lyoutloopctrl_;
    delete machinectrl_;
    delete keyctrl_;
    delete keycmdctrl_;
    delete alarmctrl_;
    delete syncctrl_;
    delete txtcontextctrl_;
    delete grouploopctrl_;
  }
}

void Packet_Ctrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Ctrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Ctrl_descriptor_;
}

const Packet_Ctrl& Packet_Ctrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Ctrl* Packet_Ctrl::default_instance_ = NULL;

Packet_Ctrl* Packet_Ctrl::New() const {
  return new Packet_Ctrl;
}

void Packet_Ctrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_viewctrl()) {
      if (viewctrl_ != NULL) viewctrl_->::TvWall::Packet_Ctrl_ViewCtrl::Clear();
    }
    if (has_cameractrl()) {
      if (cameractrl_ != NULL) cameractrl_->::TvWall::Packet_Ctrl_CameraCtrl::Clear();
    }
    if (has_hotpointctrl()) {
      if (hotpointctrl_ != NULL) hotpointctrl_->::TvWall::Packet_Ctrl_HotPointCtrl::Clear();
    }
    if (has_lyoutctrl()) {
      if (lyoutctrl_ != NULL) lyoutctrl_->::TvWall::Packet_Ctrl_LayoutCtrl::Clear();
    }
    if (has_masterctrl()) {
      if (masterctrl_ != NULL) masterctrl_->::TvWall::Packet_Ctrl_CtrlMaster::Clear();
    }
    if (has_screenctrl()) {
      if (screenctrl_ != NULL) screenctrl_->::TvWall::Packet_Ctrl_ScreenSplitCtrl::Clear();
    }
    if (has_lyoutloopctrl()) {
      if (lyoutloopctrl_ != NULL) lyoutloopctrl_->::TvWall::Packet_Ctrl_LayoutLoopCtrl::Clear();
    }
    if (has_machinectrl()) {
      if (machinectrl_ != NULL) machinectrl_->::TvWall::Packet_Ctrl_MachineCtrl::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_keyctrl()) {
      if (keyctrl_ != NULL) keyctrl_->::TvWall::Packet_Ctrl_KeyCtrl::Clear();
    }
    if (has_keycmdctrl()) {
      if (keycmdctrl_ != NULL) keycmdctrl_->::TvWall::Packet_Ctrl_KeyCmdCtrl::Clear();
    }
    if (has_alarmctrl()) {
      if (alarmctrl_ != NULL) alarmctrl_->::TvWall::Packet_Ctrl_AlarmCtrl::Clear();
    }
    if (has_syncctrl()) {
      if (syncctrl_ != NULL) syncctrl_->::TvWall::Packet_Ctrl_SyncClockCtrl::Clear();
    }
    if (has_txtcontextctrl()) {
      if (txtcontextctrl_ != NULL) txtcontextctrl_->::TvWall::Packet_Ctrl_TextContextCtrl::Clear();
    }
    if (has_grouploopctrl()) {
      if (grouploopctrl_ != NULL) grouploopctrl_->::TvWall::Packet_Ctrl_GroupLoopCtrl::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Ctrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TvWall.Packet.Ctrl.ViewCtrl viewCtrl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cameraCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.CameraCtrl cameraCtrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameractrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hotPointCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.HotPointCtrl hotPointCtrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotPointCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotpointctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lyoutCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.LayoutCtrl lyoutCtrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lyoutCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lyoutctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_masterCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.CtrlMaster masterCtrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masterCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_masterctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_screenCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.ScreenSplitCtrl screenCtrl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screenCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screenctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_lyoutLoopCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.LayoutLoopCtrl lyoutLoopCtrl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lyoutLoopCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lyoutloopctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_machineCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.MachineCtrl machineCtrl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machinectrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_keyCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.KeyCtrl keyCtrl = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keyctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_keyCmdCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.KeyCmdCtrl keyCmdCtrl = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyCmdCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keycmdctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_alarmCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.AlarmCtrl alarmCtrl = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarmctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_syncCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.SyncClockCtrl syncCtrl = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syncCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_txtContextCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.TextContextCtrl txtContextCtrl = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_txtContextCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_txtcontextctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_groupLoopCtrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl.GroupLoopCtrl groupLoopCtrl = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupLoopCtrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grouploopctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Ctrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TvWall.Packet.Ctrl.ViewCtrl viewCtrl = 1;
  if (has_viewctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->viewctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.CameraCtrl cameraCtrl = 2;
  if (has_cameractrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cameractrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.HotPointCtrl hotPointCtrl = 3;
  if (has_hotpointctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hotpointctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.LayoutCtrl lyoutCtrl = 4;
  if (has_lyoutctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lyoutctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.CtrlMaster masterCtrl = 5;
  if (has_masterctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->masterctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.ScreenSplitCtrl screenCtrl = 6;
  if (has_screenctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->screenctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.LayoutLoopCtrl lyoutLoopCtrl = 7;
  if (has_lyoutloopctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->lyoutloopctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.MachineCtrl machineCtrl = 8;
  if (has_machinectrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->machinectrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.KeyCtrl keyCtrl = 9;
  if (has_keyctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->keyctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.KeyCmdCtrl keyCmdCtrl = 10;
  if (has_keycmdctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->keycmdctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.AlarmCtrl alarmCtrl = 11;
  if (has_alarmctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->alarmctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.SyncClockCtrl syncCtrl = 12;
  if (has_syncctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->syncctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.TextContextCtrl txtContextCtrl = 13;
  if (has_txtcontextctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->txtcontextctrl(), output);
  }

  // optional .TvWall.Packet.Ctrl.GroupLoopCtrl groupLoopCtrl = 14;
  if (has_grouploopctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->grouploopctrl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Ctrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TvWall.Packet.Ctrl.ViewCtrl viewCtrl = 1;
  if (has_viewctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->viewctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.CameraCtrl cameraCtrl = 2;
  if (has_cameractrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cameractrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.HotPointCtrl hotPointCtrl = 3;
  if (has_hotpointctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hotpointctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.LayoutCtrl lyoutCtrl = 4;
  if (has_lyoutctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lyoutctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.CtrlMaster masterCtrl = 5;
  if (has_masterctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->masterctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.ScreenSplitCtrl screenCtrl = 6;
  if (has_screenctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->screenctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.LayoutLoopCtrl lyoutLoopCtrl = 7;
  if (has_lyoutloopctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->lyoutloopctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.MachineCtrl machineCtrl = 8;
  if (has_machinectrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->machinectrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.KeyCtrl keyCtrl = 9;
  if (has_keyctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->keyctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.KeyCmdCtrl keyCmdCtrl = 10;
  if (has_keycmdctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->keycmdctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.AlarmCtrl alarmCtrl = 11;
  if (has_alarmctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->alarmctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.SyncClockCtrl syncCtrl = 12;
  if (has_syncctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->syncctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.TextContextCtrl txtContextCtrl = 13;
  if (has_txtcontextctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->txtcontextctrl(), target);
  }

  // optional .TvWall.Packet.Ctrl.GroupLoopCtrl groupLoopCtrl = 14;
  if (has_grouploopctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->grouploopctrl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Ctrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TvWall.Packet.Ctrl.ViewCtrl viewCtrl = 1;
    if (has_viewctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viewctrl());
    }

    // optional .TvWall.Packet.Ctrl.CameraCtrl cameraCtrl = 2;
    if (has_cameractrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameractrl());
    }

    // optional .TvWall.Packet.Ctrl.HotPointCtrl hotPointCtrl = 3;
    if (has_hotpointctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotpointctrl());
    }

    // optional .TvWall.Packet.Ctrl.LayoutCtrl lyoutCtrl = 4;
    if (has_lyoutctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lyoutctrl());
    }

    // optional .TvWall.Packet.Ctrl.CtrlMaster masterCtrl = 5;
    if (has_masterctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->masterctrl());
    }

    // optional .TvWall.Packet.Ctrl.ScreenSplitCtrl screenCtrl = 6;
    if (has_screenctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screenctrl());
    }

    // optional .TvWall.Packet.Ctrl.LayoutLoopCtrl lyoutLoopCtrl = 7;
    if (has_lyoutloopctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lyoutloopctrl());
    }

    // optional .TvWall.Packet.Ctrl.MachineCtrl machineCtrl = 8;
    if (has_machinectrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machinectrl());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TvWall.Packet.Ctrl.KeyCtrl keyCtrl = 9;
    if (has_keyctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keyctrl());
    }

    // optional .TvWall.Packet.Ctrl.KeyCmdCtrl keyCmdCtrl = 10;
    if (has_keycmdctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keycmdctrl());
    }

    // optional .TvWall.Packet.Ctrl.AlarmCtrl alarmCtrl = 11;
    if (has_alarmctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarmctrl());
    }

    // optional .TvWall.Packet.Ctrl.SyncClockCtrl syncCtrl = 12;
    if (has_syncctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syncctrl());
    }

    // optional .TvWall.Packet.Ctrl.TextContextCtrl txtContextCtrl = 13;
    if (has_txtcontextctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txtcontextctrl());
    }

    // optional .TvWall.Packet.Ctrl.GroupLoopCtrl groupLoopCtrl = 14;
    if (has_grouploopctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grouploopctrl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Ctrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Ctrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Ctrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Ctrl::MergeFrom(const Packet_Ctrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewctrl()) {
      mutable_viewctrl()->::TvWall::Packet_Ctrl_ViewCtrl::MergeFrom(from.viewctrl());
    }
    if (from.has_cameractrl()) {
      mutable_cameractrl()->::TvWall::Packet_Ctrl_CameraCtrl::MergeFrom(from.cameractrl());
    }
    if (from.has_hotpointctrl()) {
      mutable_hotpointctrl()->::TvWall::Packet_Ctrl_HotPointCtrl::MergeFrom(from.hotpointctrl());
    }
    if (from.has_lyoutctrl()) {
      mutable_lyoutctrl()->::TvWall::Packet_Ctrl_LayoutCtrl::MergeFrom(from.lyoutctrl());
    }
    if (from.has_masterctrl()) {
      mutable_masterctrl()->::TvWall::Packet_Ctrl_CtrlMaster::MergeFrom(from.masterctrl());
    }
    if (from.has_screenctrl()) {
      mutable_screenctrl()->::TvWall::Packet_Ctrl_ScreenSplitCtrl::MergeFrom(from.screenctrl());
    }
    if (from.has_lyoutloopctrl()) {
      mutable_lyoutloopctrl()->::TvWall::Packet_Ctrl_LayoutLoopCtrl::MergeFrom(from.lyoutloopctrl());
    }
    if (from.has_machinectrl()) {
      mutable_machinectrl()->::TvWall::Packet_Ctrl_MachineCtrl::MergeFrom(from.machinectrl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_keyctrl()) {
      mutable_keyctrl()->::TvWall::Packet_Ctrl_KeyCtrl::MergeFrom(from.keyctrl());
    }
    if (from.has_keycmdctrl()) {
      mutable_keycmdctrl()->::TvWall::Packet_Ctrl_KeyCmdCtrl::MergeFrom(from.keycmdctrl());
    }
    if (from.has_alarmctrl()) {
      mutable_alarmctrl()->::TvWall::Packet_Ctrl_AlarmCtrl::MergeFrom(from.alarmctrl());
    }
    if (from.has_syncctrl()) {
      mutable_syncctrl()->::TvWall::Packet_Ctrl_SyncClockCtrl::MergeFrom(from.syncctrl());
    }
    if (from.has_txtcontextctrl()) {
      mutable_txtcontextctrl()->::TvWall::Packet_Ctrl_TextContextCtrl::MergeFrom(from.txtcontextctrl());
    }
    if (from.has_grouploopctrl()) {
      mutable_grouploopctrl()->::TvWall::Packet_Ctrl_GroupLoopCtrl::MergeFrom(from.grouploopctrl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Ctrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Ctrl::CopyFrom(const Packet_Ctrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Ctrl::IsInitialized() const {

  if (has_viewctrl()) {
    if (!this->viewctrl().IsInitialized()) return false;
  }
  if (has_cameractrl()) {
    if (!this->cameractrl().IsInitialized()) return false;
  }
  if (has_hotpointctrl()) {
    if (!this->hotpointctrl().IsInitialized()) return false;
  }
  if (has_lyoutctrl()) {
    if (!this->lyoutctrl().IsInitialized()) return false;
  }
  if (has_masterctrl()) {
    if (!this->masterctrl().IsInitialized()) return false;
  }
  if (has_screenctrl()) {
    if (!this->screenctrl().IsInitialized()) return false;
  }
  if (has_lyoutloopctrl()) {
    if (!this->lyoutloopctrl().IsInitialized()) return false;
  }
  if (has_machinectrl()) {
    if (!this->machinectrl().IsInitialized()) return false;
  }
  if (has_keyctrl()) {
    if (!this->keyctrl().IsInitialized()) return false;
  }
  if (has_alarmctrl()) {
    if (!this->alarmctrl().IsInitialized()) return false;
  }
  if (has_txtcontextctrl()) {
    if (!this->txtcontextctrl().IsInitialized()) return false;
  }
  if (has_grouploopctrl()) {
    if (!this->grouploopctrl().IsInitialized()) return false;
  }
  return true;
}

void Packet_Ctrl::Swap(Packet_Ctrl* other) {
  if (other != this) {
    std::swap(viewctrl_, other->viewctrl_);
    std::swap(cameractrl_, other->cameractrl_);
    std::swap(hotpointctrl_, other->hotpointctrl_);
    std::swap(lyoutctrl_, other->lyoutctrl_);
    std::swap(masterctrl_, other->masterctrl_);
    std::swap(screenctrl_, other->screenctrl_);
    std::swap(lyoutloopctrl_, other->lyoutloopctrl_);
    std::swap(machinectrl_, other->machinectrl_);
    std::swap(keyctrl_, other->keyctrl_);
    std::swap(keycmdctrl_, other->keycmdctrl_);
    std::swap(alarmctrl_, other->alarmctrl_);
    std::swap(syncctrl_, other->syncctrl_);
    std::swap(txtcontextctrl_, other->txtcontextctrl_);
    std::swap(grouploopctrl_, other->grouploopctrl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Ctrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Ctrl_descriptor_;
  metadata.reflection = Packet_Ctrl_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_RequireSession_ClientRequireType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_ClientRequireType_descriptor_;
}
bool Packet_RequireSession_ClientRequireType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 65535:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_RequireSession_ClientRequireType Packet_RequireSession::SCREEN;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::VIEW;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::CAMERA;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::HOT_POINT;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::FOCUS_POINT;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::LOCAL_MOVIE;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::FLASH;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::LAYOUT;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::RECORDINFO;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::MAPINFO;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::LAYOUTLOOP;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::NVR_LIST;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::FMP;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::ALL;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::ClientRequireType_MIN;
const Packet_RequireSession_ClientRequireType Packet_RequireSession::ClientRequireType_MAX;
const int Packet_RequireSession::ClientRequireType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_RequireSession_ClientRequire::kTypeFieldNumber;
#endif  // !_MSC_VER

Packet_RequireSession_ClientRequire::Packet_RequireSession_ClientRequire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_RequireSession_ClientRequire::InitAsDefaultInstance() {
}

Packet_RequireSession_ClientRequire::Packet_RequireSession_ClientRequire(const Packet_RequireSession_ClientRequire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_RequireSession_ClientRequire::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_RequireSession_ClientRequire::~Packet_RequireSession_ClientRequire() {
  SharedDtor();
}

void Packet_RequireSession_ClientRequire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_RequireSession_ClientRequire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_RequireSession_ClientRequire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_ClientRequire_descriptor_;
}

const Packet_RequireSession_ClientRequire& Packet_RequireSession_ClientRequire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_RequireSession_ClientRequire* Packet_RequireSession_ClientRequire::default_instance_ = NULL;

Packet_RequireSession_ClientRequire* Packet_RequireSession_ClientRequire::New() const {
  return new Packet_RequireSession_ClientRequire;
}

void Packet_RequireSession_ClientRequire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_RequireSession_ClientRequire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.RequireSession.ClientRequireType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_RequireSession_ClientRequireType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_RequireSession_ClientRequireType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_RequireSession_ClientRequire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.RequireSession.ClientRequireType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_RequireSession_ClientRequire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.RequireSession.ClientRequireType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_RequireSession_ClientRequire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.RequireSession.ClientRequireType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_RequireSession_ClientRequire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_RequireSession_ClientRequire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_RequireSession_ClientRequire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_RequireSession_ClientRequire::MergeFrom(const Packet_RequireSession_ClientRequire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_RequireSession_ClientRequire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_RequireSession_ClientRequire::CopyFrom(const Packet_RequireSession_ClientRequire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_RequireSession_ClientRequire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_RequireSession_ClientRequire::Swap(Packet_RequireSession_ClientRequire* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_RequireSession_ClientRequire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_RequireSession_ClientRequire_descriptor_;
  metadata.reflection = Packet_RequireSession_ClientRequire_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_RequireSession_ClientRequireAck::kTypeFieldNumber;
const int Packet_RequireSession_ClientRequireAck::kElementDataFieldNumber;
#endif  // !_MSC_VER

Packet_RequireSession_ClientRequireAck::Packet_RequireSession_ClientRequireAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_RequireSession_ClientRequireAck::InitAsDefaultInstance() {
  elementdata_ = const_cast< ::TvWall::Packet_ElementDat*>(&::TvWall::Packet_ElementDat::default_instance());
}

Packet_RequireSession_ClientRequireAck::Packet_RequireSession_ClientRequireAck(const Packet_RequireSession_ClientRequireAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_RequireSession_ClientRequireAck::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  elementdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_RequireSession_ClientRequireAck::~Packet_RequireSession_ClientRequireAck() {
  SharedDtor();
}

void Packet_RequireSession_ClientRequireAck::SharedDtor() {
  if (this != default_instance_) {
    delete elementdata_;
  }
}

void Packet_RequireSession_ClientRequireAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_RequireSession_ClientRequireAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_ClientRequireAck_descriptor_;
}

const Packet_RequireSession_ClientRequireAck& Packet_RequireSession_ClientRequireAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_RequireSession_ClientRequireAck* Packet_RequireSession_ClientRequireAck::default_instance_ = NULL;

Packet_RequireSession_ClientRequireAck* Packet_RequireSession_ClientRequireAck::New() const {
  return new Packet_RequireSession_ClientRequireAck;
}

void Packet_RequireSession_ClientRequireAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_elementdata()) {
      if (elementdata_ != NULL) elementdata_->::TvWall::Packet_ElementDat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_RequireSession_ClientRequireAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.RequireSession.ClientRequireType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_RequireSession_ClientRequireType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_RequireSession_ClientRequireType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_elementData;
        break;
      }

      // required .TvWall.Packet.ElementDat elementData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elementData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elementdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_RequireSession_ClientRequireAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.RequireSession.ClientRequireType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .TvWall.Packet.ElementDat elementData = 2;
  if (has_elementdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->elementdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_RequireSession_ClientRequireAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.RequireSession.ClientRequireType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .TvWall.Packet.ElementDat elementData = 2;
  if (has_elementdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->elementdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_RequireSession_ClientRequireAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.RequireSession.ClientRequireType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .TvWall.Packet.ElementDat elementData = 2;
    if (has_elementdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elementdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_RequireSession_ClientRequireAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_RequireSession_ClientRequireAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_RequireSession_ClientRequireAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_RequireSession_ClientRequireAck::MergeFrom(const Packet_RequireSession_ClientRequireAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_elementdata()) {
      mutable_elementdata()->::TvWall::Packet_ElementDat::MergeFrom(from.elementdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_RequireSession_ClientRequireAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_RequireSession_ClientRequireAck::CopyFrom(const Packet_RequireSession_ClientRequireAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_RequireSession_ClientRequireAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_elementdata()) {
    if (!this->elementdata().IsInitialized()) return false;
  }
  return true;
}

void Packet_RequireSession_ClientRequireAck::Swap(Packet_RequireSession_ClientRequireAck* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(elementdata_, other->elementdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_RequireSession_ClientRequireAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_RequireSession_ClientRequireAck_descriptor_;
  metadata.reflection = Packet_RequireSession_ClientRequireAck_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_RequireSession_LocalMovieSession::kWinIdFieldNumber;
const int Packet_RequireSession_LocalMovieSession::kNeedAlwaysAckFieldNumber;
#endif  // !_MSC_VER

Packet_RequireSession_LocalMovieSession::Packet_RequireSession_LocalMovieSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_RequireSession_LocalMovieSession::InitAsDefaultInstance() {
}

Packet_RequireSession_LocalMovieSession::Packet_RequireSession_LocalMovieSession(const Packet_RequireSession_LocalMovieSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_RequireSession_LocalMovieSession::SharedCtor() {
  _cached_size_ = 0;
  winid_ = 0;
  needalwaysack_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_RequireSession_LocalMovieSession::~Packet_RequireSession_LocalMovieSession() {
  SharedDtor();
}

void Packet_RequireSession_LocalMovieSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_RequireSession_LocalMovieSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_RequireSession_LocalMovieSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_LocalMovieSession_descriptor_;
}

const Packet_RequireSession_LocalMovieSession& Packet_RequireSession_LocalMovieSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_RequireSession_LocalMovieSession* Packet_RequireSession_LocalMovieSession::default_instance_ = NULL;

Packet_RequireSession_LocalMovieSession* Packet_RequireSession_LocalMovieSession::New() const {
  return new Packet_RequireSession_LocalMovieSession;
}

void Packet_RequireSession_LocalMovieSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winid_ = 0;
    needalwaysack_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_RequireSession_LocalMovieSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_needAlwaysAck;
        break;
      }

      // required bool needAlwaysAck = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needAlwaysAck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needalwaysack_)));
          set_has_needalwaysack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_RequireSession_LocalMovieSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winId = 1;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winid(), output);
  }

  // required bool needAlwaysAck = 2;
  if (has_needalwaysack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->needalwaysack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_RequireSession_LocalMovieSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winId = 1;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winid(), target);
  }

  // required bool needAlwaysAck = 2;
  if (has_needalwaysack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->needalwaysack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_RequireSession_LocalMovieSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winId = 1;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required bool needAlwaysAck = 2;
    if (has_needalwaysack()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_RequireSession_LocalMovieSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_RequireSession_LocalMovieSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_RequireSession_LocalMovieSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_RequireSession_LocalMovieSession::MergeFrom(const Packet_RequireSession_LocalMovieSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_needalwaysack()) {
      set_needalwaysack(from.needalwaysack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_RequireSession_LocalMovieSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_RequireSession_LocalMovieSession::CopyFrom(const Packet_RequireSession_LocalMovieSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_RequireSession_LocalMovieSession::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_RequireSession_LocalMovieSession::Swap(Packet_RequireSession_LocalMovieSession* other) {
  if (other != this) {
    std::swap(winid_, other->winid_);
    std::swap(needalwaysack_, other->needalwaysack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_RequireSession_LocalMovieSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_RequireSession_LocalMovieSession_descriptor_;
  metadata.reflection = Packet_RequireSession_LocalMovieSession_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_RequireSession_LocalMovieSessionAck_MovieStat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_LocalMovieSessionAck_MovieStat_descriptor_;
}
bool Packet_RequireSession_LocalMovieSessionAck_MovieStat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_RequireSession_LocalMovieSessionAck_MovieStat Packet_RequireSession_LocalMovieSessionAck::STOP;
const Packet_RequireSession_LocalMovieSessionAck_MovieStat Packet_RequireSession_LocalMovieSessionAck::PLAY;
const Packet_RequireSession_LocalMovieSessionAck_MovieStat Packet_RequireSession_LocalMovieSessionAck::PAUSE;
const Packet_RequireSession_LocalMovieSessionAck_MovieStat Packet_RequireSession_LocalMovieSessionAck::MovieStat_MIN;
const Packet_RequireSession_LocalMovieSessionAck_MovieStat Packet_RequireSession_LocalMovieSessionAck::MovieStat_MAX;
const int Packet_RequireSession_LocalMovieSessionAck::MovieStat_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_RequireSession_LocalMovieSessionAck::kWinIdFieldNumber;
const int Packet_RequireSession_LocalMovieSessionAck::kUrlFieldNumber;
const int Packet_RequireSession_LocalMovieSessionAck::kVolumeFieldNumber;
const int Packet_RequireSession_LocalMovieSessionAck::kTimeStampFieldNumber;
const int Packet_RequireSession_LocalMovieSessionAck::kMovieStatFieldNumber;
#endif  // !_MSC_VER

Packet_RequireSession_LocalMovieSessionAck::Packet_RequireSession_LocalMovieSessionAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_RequireSession_LocalMovieSessionAck::InitAsDefaultInstance() {
}

Packet_RequireSession_LocalMovieSessionAck::Packet_RequireSession_LocalMovieSessionAck(const Packet_RequireSession_LocalMovieSessionAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_RequireSession_LocalMovieSessionAck::SharedCtor() {
  _cached_size_ = 0;
  winid_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  moviestat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_RequireSession_LocalMovieSessionAck::~Packet_RequireSession_LocalMovieSessionAck() {
  SharedDtor();
}

void Packet_RequireSession_LocalMovieSessionAck::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Packet_RequireSession_LocalMovieSessionAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_RequireSession_LocalMovieSessionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_LocalMovieSessionAck_descriptor_;
}

const Packet_RequireSession_LocalMovieSessionAck& Packet_RequireSession_LocalMovieSessionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_RequireSession_LocalMovieSessionAck* Packet_RequireSession_LocalMovieSessionAck::default_instance_ = NULL;

Packet_RequireSession_LocalMovieSessionAck* Packet_RequireSession_LocalMovieSessionAck::New() const {
  return new Packet_RequireSession_LocalMovieSessionAck;
}

void Packet_RequireSession_LocalMovieSessionAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winid_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    volume_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    moviestat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_RequireSession_LocalMovieSessionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_volume;
        break;
      }

      // optional int32 volume = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeStamp;
        break;
      }

      // optional int64 timeStamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_movieStat;
        break;
      }

      // required .TvWall.Packet.RequireSession.LocalMovieSessionAck.MovieStat movieStat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movieStat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_RequireSession_LocalMovieSessionAck_MovieStat_IsValid(value)) {
            set_moviestat(static_cast< ::TvWall::Packet_RequireSession_LocalMovieSessionAck_MovieStat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_RequireSession_LocalMovieSessionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winId = 1;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winid(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }

  // optional int32 volume = 3;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->volume(), output);
  }

  // optional int64 timeStamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // required .TvWall.Packet.RequireSession.LocalMovieSessionAck.MovieStat movieStat = 5;
  if (has_moviestat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->moviestat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_RequireSession_LocalMovieSessionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winId = 1;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winid(), target);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional int32 volume = 3;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->volume(), target);
  }

  // optional int64 timeStamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // required .TvWall.Packet.RequireSession.LocalMovieSessionAck.MovieStat movieStat = 5;
  if (has_moviestat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->moviestat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_RequireSession_LocalMovieSessionAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winId = 1;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 volume = 3;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional int64 timeStamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // required .TvWall.Packet.RequireSession.LocalMovieSessionAck.MovieStat movieStat = 5;
    if (has_moviestat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->moviestat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_RequireSession_LocalMovieSessionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_RequireSession_LocalMovieSessionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_RequireSession_LocalMovieSessionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_RequireSession_LocalMovieSessionAck::MergeFrom(const Packet_RequireSession_LocalMovieSessionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_moviestat()) {
      set_moviestat(from.moviestat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_RequireSession_LocalMovieSessionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_RequireSession_LocalMovieSessionAck::CopyFrom(const Packet_RequireSession_LocalMovieSessionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_RequireSession_LocalMovieSessionAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  return true;
}

void Packet_RequireSession_LocalMovieSessionAck::Swap(Packet_RequireSession_LocalMovieSessionAck* other) {
  if (other != this) {
    std::swap(winid_, other->winid_);
    std::swap(url_, other->url_);
    std::swap(volume_, other->volume_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(moviestat_, other->moviestat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_RequireSession_LocalMovieSessionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_RequireSession_LocalMovieSessionAck_descriptor_;
  metadata.reflection = Packet_RequireSession_LocalMovieSessionAck_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_RequireSession_RecordRequire_RecordRequireType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_RecordRequire_RecordRequireType_descriptor_;
}
bool Packet_RequireSession_RecordRequire_RecordRequireType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_RequireSession_RecordRequire_RecordRequireType Packet_RequireSession_RecordRequire::CURRENT_TIME;
const Packet_RequireSession_RecordRequire_RecordRequireType Packet_RequireSession_RecordRequire::RecordRequireType_MIN;
const Packet_RequireSession_RecordRequire_RecordRequireType Packet_RequireSession_RecordRequire::RecordRequireType_MAX;
const int Packet_RequireSession_RecordRequire::RecordRequireType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_RequireSession_RecordRequire::kTypeFieldNumber;
const int Packet_RequireSession_RecordRequire::kWinIdFieldNumber;
const int Packet_RequireSession_RecordRequire::kCameraIdFieldNumber;
#endif  // !_MSC_VER

Packet_RequireSession_RecordRequire::Packet_RequireSession_RecordRequire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_RequireSession_RecordRequire::InitAsDefaultInstance() {
  cameraid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
}

Packet_RequireSession_RecordRequire::Packet_RequireSession_RecordRequire(const Packet_RequireSession_RecordRequire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_RequireSession_RecordRequire::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  cameraid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_RequireSession_RecordRequire::~Packet_RequireSession_RecordRequire() {
  SharedDtor();
}

void Packet_RequireSession_RecordRequire::SharedDtor() {
  if (this != default_instance_) {
    delete cameraid_;
  }
}

void Packet_RequireSession_RecordRequire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_RequireSession_RecordRequire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_RecordRequire_descriptor_;
}

const Packet_RequireSession_RecordRequire& Packet_RequireSession_RecordRequire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_RequireSession_RecordRequire* Packet_RequireSession_RecordRequire::default_instance_ = NULL;

Packet_RequireSession_RecordRequire* Packet_RequireSession_RecordRequire::New() const {
  return new Packet_RequireSession_RecordRequire;
}

void Packet_RequireSession_RecordRequire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_cameraid()) {
      if (cameraid_ != NULL) cameraid_->::TvWall::Guid::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_RequireSession_RecordRequire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.RequireSession.RecordRequire.RecordRequireType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_RequireSession_RecordRequire_RecordRequireType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_RequireSession_RecordRequire_RecordRequireType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_CameraId;
        break;
      }

      // required .TvWall.Guid CameraId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CameraId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_RequireSession_RecordRequire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.RequireSession.RecordRequire.RecordRequireType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // required .TvWall.Guid CameraId = 3;
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cameraid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_RequireSession_RecordRequire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.RequireSession.RecordRequire.RecordRequireType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // required .TvWall.Guid CameraId = 3;
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cameraid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_RequireSession_RecordRequire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.RequireSession.RecordRequire.RecordRequireType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required .TvWall.Guid CameraId = 3;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameraid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_RequireSession_RecordRequire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_RequireSession_RecordRequire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_RequireSession_RecordRequire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_RequireSession_RecordRequire::MergeFrom(const Packet_RequireSession_RecordRequire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_cameraid()) {
      mutable_cameraid()->::TvWall::Guid::MergeFrom(from.cameraid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_RequireSession_RecordRequire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_RequireSession_RecordRequire::CopyFrom(const Packet_RequireSession_RecordRequire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_RequireSession_RecordRequire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_cameraid()) {
    if (!this->cameraid().IsInitialized()) return false;
  }
  return true;
}

void Packet_RequireSession_RecordRequire::Swap(Packet_RequireSession_RecordRequire* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_RequireSession_RecordRequire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_RequireSession_RecordRequire_descriptor_;
  metadata.reflection = Packet_RequireSession_RecordRequire_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_RequireSession_RecordRequireAck::kWinIdFieldNumber;
const int Packet_RequireSession_RecordRequireAck::kCameraIdFieldNumber;
const int Packet_RequireSession_RecordRequireAck::kCurrentTimeFieldNumber;
const int Packet_RequireSession_RecordRequireAck::kVaryFieldNumber;
const int Packet_RequireSession_RecordRequireAck::kIsPauseFieldNumber;
#endif  // !_MSC_VER

Packet_RequireSession_RecordRequireAck::Packet_RequireSession_RecordRequireAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_RequireSession_RecordRequireAck::InitAsDefaultInstance() {
  cameraid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
}

Packet_RequireSession_RecordRequireAck::Packet_RequireSession_RecordRequireAck(const Packet_RequireSession_RecordRequireAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_RequireSession_RecordRequireAck::SharedCtor() {
  _cached_size_ = 0;
  winid_ = 0;
  cameraid_ = NULL;
  currenttime_ = GOOGLE_ULONGLONG(0);
  vary_ = 0;
  ispause_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_RequireSession_RecordRequireAck::~Packet_RequireSession_RecordRequireAck() {
  SharedDtor();
}

void Packet_RequireSession_RecordRequireAck::SharedDtor() {
  if (this != default_instance_) {
    delete cameraid_;
  }
}

void Packet_RequireSession_RecordRequireAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_RequireSession_RecordRequireAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_RecordRequireAck_descriptor_;
}

const Packet_RequireSession_RecordRequireAck& Packet_RequireSession_RecordRequireAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_RequireSession_RecordRequireAck* Packet_RequireSession_RecordRequireAck::default_instance_ = NULL;

Packet_RequireSession_RecordRequireAck* Packet_RequireSession_RecordRequireAck::New() const {
  return new Packet_RequireSession_RecordRequireAck;
}

void Packet_RequireSession_RecordRequireAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    winid_ = 0;
    if (has_cameraid()) {
      if (cameraid_ != NULL) cameraid_->::TvWall::Guid::Clear();
    }
    currenttime_ = GOOGLE_ULONGLONG(0);
    vary_ = 0;
    ispause_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_RequireSession_RecordRequireAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 winId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CameraId;
        break;
      }

      // required .TvWall.Guid CameraId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CameraId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentTime;
        break;
      }

      // optional uint64 currentTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currenttime_)));
          set_has_currenttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vary;
        break;
      }

      // optional int32 vary = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vary_)));
          set_has_vary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isPause;
        break;
      }

      // optional bool isPause = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispause_)));
          set_has_ispause();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_RequireSession_RecordRequireAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 winId = 1;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->winid(), output);
  }

  // required .TvWall.Guid CameraId = 2;
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cameraid(), output);
  }

  // optional uint64 currentTime = 3;
  if (has_currenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->currenttime(), output);
  }

  // optional int32 vary = 4;
  if (has_vary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vary(), output);
  }

  // optional bool isPause = 5;
  if (has_ispause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ispause(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_RequireSession_RecordRequireAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 winId = 1;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->winid(), target);
  }

  // required .TvWall.Guid CameraId = 2;
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cameraid(), target);
  }

  // optional uint64 currentTime = 3;
  if (has_currenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->currenttime(), target);
  }

  // optional int32 vary = 4;
  if (has_vary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vary(), target);
  }

  // optional bool isPause = 5;
  if (has_ispause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ispause(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_RequireSession_RecordRequireAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 winId = 1;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required .TvWall.Guid CameraId = 2;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameraid());
    }

    // optional uint64 currentTime = 3;
    if (has_currenttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currenttime());
    }

    // optional int32 vary = 4;
    if (has_vary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vary());
    }

    // optional bool isPause = 5;
    if (has_ispause()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_RequireSession_RecordRequireAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_RequireSession_RecordRequireAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_RequireSession_RecordRequireAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_RequireSession_RecordRequireAck::MergeFrom(const Packet_RequireSession_RecordRequireAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_cameraid()) {
      mutable_cameraid()->::TvWall::Guid::MergeFrom(from.cameraid());
    }
    if (from.has_currenttime()) {
      set_currenttime(from.currenttime());
    }
    if (from.has_vary()) {
      set_vary(from.vary());
    }
    if (from.has_ispause()) {
      set_ispause(from.ispause());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_RequireSession_RecordRequireAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_RequireSession_RecordRequireAck::CopyFrom(const Packet_RequireSession_RecordRequireAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_RequireSession_RecordRequireAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cameraid()) {
    if (!this->cameraid().IsInitialized()) return false;
  }
  return true;
}

void Packet_RequireSession_RecordRequireAck::Swap(Packet_RequireSession_RecordRequireAck* other) {
  if (other != this) {
    std::swap(winid_, other->winid_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(currenttime_, other->currenttime_);
    std::swap(vary_, other->vary_);
    std::swap(ispause_, other->ispause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_RequireSession_RecordRequireAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_RequireSession_RecordRequireAck_descriptor_;
  metadata.reflection = Packet_RequireSession_RecordRequireAck_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Packet_RequireSession_NetRequire::Packet_RequireSession_NetRequire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_RequireSession_NetRequire::InitAsDefaultInstance() {
}

Packet_RequireSession_NetRequire::Packet_RequireSession_NetRequire(const Packet_RequireSession_NetRequire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_RequireSession_NetRequire::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_RequireSession_NetRequire::~Packet_RequireSession_NetRequire() {
  SharedDtor();
}

void Packet_RequireSession_NetRequire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_RequireSession_NetRequire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_RequireSession_NetRequire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_NetRequire_descriptor_;
}

const Packet_RequireSession_NetRequire& Packet_RequireSession_NetRequire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_RequireSession_NetRequire* Packet_RequireSession_NetRequire::default_instance_ = NULL;

Packet_RequireSession_NetRequire* Packet_RequireSession_NetRequire::New() const {
  return new Packet_RequireSession_NetRequire;
}

void Packet_RequireSession_NetRequire::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_RequireSession_NetRequire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Packet_RequireSession_NetRequire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_RequireSession_NetRequire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_RequireSession_NetRequire::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_RequireSession_NetRequire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_RequireSession_NetRequire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_RequireSession_NetRequire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_RequireSession_NetRequire::MergeFrom(const Packet_RequireSession_NetRequire& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_RequireSession_NetRequire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_RequireSession_NetRequire::CopyFrom(const Packet_RequireSession_NetRequire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_RequireSession_NetRequire::IsInitialized() const {

  return true;
}

void Packet_RequireSession_NetRequire::Swap(Packet_RequireSession_NetRequire* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_RequireSession_NetRequire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_RequireSession_NetRequire_descriptor_;
  metadata.reflection = Packet_RequireSession_NetRequire_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_RequireSession_NetRequireAck::kNetFieldNumber;
#endif  // !_MSC_VER

Packet_RequireSession_NetRequireAck::Packet_RequireSession_NetRequireAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_RequireSession_NetRequireAck::InitAsDefaultInstance() {
  net_ = const_cast< ::TvWall::Network*>(&::TvWall::Network::default_instance());
}

Packet_RequireSession_NetRequireAck::Packet_RequireSession_NetRequireAck(const Packet_RequireSession_NetRequireAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_RequireSession_NetRequireAck::SharedCtor() {
  _cached_size_ = 0;
  net_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_RequireSession_NetRequireAck::~Packet_RequireSession_NetRequireAck() {
  SharedDtor();
}

void Packet_RequireSession_NetRequireAck::SharedDtor() {
  if (this != default_instance_) {
    delete net_;
  }
}

void Packet_RequireSession_NetRequireAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_RequireSession_NetRequireAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_NetRequireAck_descriptor_;
}

const Packet_RequireSession_NetRequireAck& Packet_RequireSession_NetRequireAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_RequireSession_NetRequireAck* Packet_RequireSession_NetRequireAck::default_instance_ = NULL;

Packet_RequireSession_NetRequireAck* Packet_RequireSession_NetRequireAck::New() const {
  return new Packet_RequireSession_NetRequireAck;
}

void Packet_RequireSession_NetRequireAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_net()) {
      if (net_ != NULL) net_->::TvWall::Network::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_RequireSession_NetRequireAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TvWall.Network net = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_RequireSession_NetRequireAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TvWall.Network net = 1;
  if (has_net()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->net(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_RequireSession_NetRequireAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TvWall.Network net = 1;
  if (has_net()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->net(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_RequireSession_NetRequireAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TvWall.Network net = 1;
    if (has_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_RequireSession_NetRequireAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_RequireSession_NetRequireAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_RequireSession_NetRequireAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_RequireSession_NetRequireAck::MergeFrom(const Packet_RequireSession_NetRequireAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_net()) {
      mutable_net()->::TvWall::Network::MergeFrom(from.net());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_RequireSession_NetRequireAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_RequireSession_NetRequireAck::CopyFrom(const Packet_RequireSession_NetRequireAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_RequireSession_NetRequireAck::IsInitialized() const {

  if (has_net()) {
    if (!this->net().IsInitialized()) return false;
  }
  return true;
}

void Packet_RequireSession_NetRequireAck::Swap(Packet_RequireSession_NetRequireAck* other) {
  if (other != this) {
    std::swap(net_, other->net_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_RequireSession_NetRequireAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_RequireSession_NetRequireAck_descriptor_;
  metadata.reflection = Packet_RequireSession_NetRequireAck_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_RequireSession::kClientRequireFieldNumber;
const int Packet_RequireSession::kClientRequireAckFieldNumber;
const int Packet_RequireSession::kLmsFieldNumber;
const int Packet_RequireSession::kLmsAckFieldNumber;
const int Packet_RequireSession::kRecordRequireFieldNumber;
const int Packet_RequireSession::kRecordRequireAckFieldNumber;
const int Packet_RequireSession::kNetRequireFieldNumber;
const int Packet_RequireSession::kNetRequireAckFieldNumber;
#endif  // !_MSC_VER

Packet_RequireSession::Packet_RequireSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_RequireSession::InitAsDefaultInstance() {
  clientrequire_ = const_cast< ::TvWall::Packet_RequireSession_ClientRequire*>(&::TvWall::Packet_RequireSession_ClientRequire::default_instance());
  clientrequireack_ = const_cast< ::TvWall::Packet_RequireSession_ClientRequireAck*>(&::TvWall::Packet_RequireSession_ClientRequireAck::default_instance());
  lms_ = const_cast< ::TvWall::Packet_RequireSession_LocalMovieSession*>(&::TvWall::Packet_RequireSession_LocalMovieSession::default_instance());
  lmsack_ = const_cast< ::TvWall::Packet_RequireSession_LocalMovieSessionAck*>(&::TvWall::Packet_RequireSession_LocalMovieSessionAck::default_instance());
  recordrequire_ = const_cast< ::TvWall::Packet_RequireSession_RecordRequire*>(&::TvWall::Packet_RequireSession_RecordRequire::default_instance());
  recordrequireack_ = const_cast< ::TvWall::Packet_RequireSession_RecordRequireAck*>(&::TvWall::Packet_RequireSession_RecordRequireAck::default_instance());
  netrequire_ = const_cast< ::TvWall::Packet_RequireSession_NetRequire*>(&::TvWall::Packet_RequireSession_NetRequire::default_instance());
  netrequireack_ = const_cast< ::TvWall::Packet_RequireSession_NetRequireAck*>(&::TvWall::Packet_RequireSession_NetRequireAck::default_instance());
}

Packet_RequireSession::Packet_RequireSession(const Packet_RequireSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_RequireSession::SharedCtor() {
  _cached_size_ = 0;
  clientrequire_ = NULL;
  clientrequireack_ = NULL;
  lms_ = NULL;
  lmsack_ = NULL;
  recordrequire_ = NULL;
  recordrequireack_ = NULL;
  netrequire_ = NULL;
  netrequireack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_RequireSession::~Packet_RequireSession() {
  SharedDtor();
}

void Packet_RequireSession::SharedDtor() {
  if (this != default_instance_) {
    delete clientrequire_;
    delete clientrequireack_;
    delete lms_;
    delete lmsack_;
    delete recordrequire_;
    delete recordrequireack_;
    delete netrequire_;
    delete netrequireack_;
  }
}

void Packet_RequireSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_RequireSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_RequireSession_descriptor_;
}

const Packet_RequireSession& Packet_RequireSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_RequireSession* Packet_RequireSession::default_instance_ = NULL;

Packet_RequireSession* Packet_RequireSession::New() const {
  return new Packet_RequireSession;
}

void Packet_RequireSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientrequire()) {
      if (clientrequire_ != NULL) clientrequire_->::TvWall::Packet_RequireSession_ClientRequire::Clear();
    }
    if (has_clientrequireack()) {
      if (clientrequireack_ != NULL) clientrequireack_->::TvWall::Packet_RequireSession_ClientRequireAck::Clear();
    }
    if (has_lms()) {
      if (lms_ != NULL) lms_->::TvWall::Packet_RequireSession_LocalMovieSession::Clear();
    }
    if (has_lmsack()) {
      if (lmsack_ != NULL) lmsack_->::TvWall::Packet_RequireSession_LocalMovieSessionAck::Clear();
    }
    if (has_recordrequire()) {
      if (recordrequire_ != NULL) recordrequire_->::TvWall::Packet_RequireSession_RecordRequire::Clear();
    }
    if (has_recordrequireack()) {
      if (recordrequireack_ != NULL) recordrequireack_->::TvWall::Packet_RequireSession_RecordRequireAck::Clear();
    }
    if (has_netrequire()) {
      if (netrequire_ != NULL) netrequire_->::TvWall::Packet_RequireSession_NetRequire::Clear();
    }
    if (has_netrequireack()) {
      if (netrequireack_ != NULL) netrequireack_->::TvWall::Packet_RequireSession_NetRequireAck::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_RequireSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TvWall.Packet.RequireSession.ClientRequire clientRequire = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientrequire()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientRequireAck;
        break;
      }

      // optional .TvWall.Packet.RequireSession.ClientRequireAck clientRequireAck = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientRequireAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clientrequireack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lms;
        break;
      }

      // optional .TvWall.Packet.RequireSession.LocalMovieSession lms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lmsAck;
        break;
      }

      // optional .TvWall.Packet.RequireSession.LocalMovieSessionAck lmsAck = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lmsAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lmsack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_recordRequire;
        break;
      }

      // optional .TvWall.Packet.RequireSession.RecordRequire recordRequire = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordRequire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordrequire()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_recordRequireAck;
        break;
      }

      // optional .TvWall.Packet.RequireSession.RecordRequireAck recordRequireAck = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordRequireAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordrequireack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_netRequire;
        break;
      }

      // optional .TvWall.Packet.RequireSession.NetRequire netRequire = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netRequire:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_netrequire()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_netRequireAck;
        break;
      }

      // optional .TvWall.Packet.RequireSession.NetRequireAck netRequireAck = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netRequireAck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_netrequireack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_RequireSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TvWall.Packet.RequireSession.ClientRequire clientRequire = 1;
  if (has_clientrequire()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clientrequire(), output);
  }

  // optional .TvWall.Packet.RequireSession.ClientRequireAck clientRequireAck = 2;
  if (has_clientrequireack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->clientrequireack(), output);
  }

  // optional .TvWall.Packet.RequireSession.LocalMovieSession lms = 3;
  if (has_lms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lms(), output);
  }

  // optional .TvWall.Packet.RequireSession.LocalMovieSessionAck lmsAck = 4;
  if (has_lmsack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lmsack(), output);
  }

  // optional .TvWall.Packet.RequireSession.RecordRequire recordRequire = 5;
  if (has_recordrequire()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->recordrequire(), output);
  }

  // optional .TvWall.Packet.RequireSession.RecordRequireAck recordRequireAck = 6;
  if (has_recordrequireack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->recordrequireack(), output);
  }

  // optional .TvWall.Packet.RequireSession.NetRequire netRequire = 7;
  if (has_netrequire()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->netrequire(), output);
  }

  // optional .TvWall.Packet.RequireSession.NetRequireAck netRequireAck = 8;
  if (has_netrequireack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->netrequireack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_RequireSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TvWall.Packet.RequireSession.ClientRequire clientRequire = 1;
  if (has_clientrequire()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clientrequire(), target);
  }

  // optional .TvWall.Packet.RequireSession.ClientRequireAck clientRequireAck = 2;
  if (has_clientrequireack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->clientrequireack(), target);
  }

  // optional .TvWall.Packet.RequireSession.LocalMovieSession lms = 3;
  if (has_lms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lms(), target);
  }

  // optional .TvWall.Packet.RequireSession.LocalMovieSessionAck lmsAck = 4;
  if (has_lmsack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lmsack(), target);
  }

  // optional .TvWall.Packet.RequireSession.RecordRequire recordRequire = 5;
  if (has_recordrequire()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->recordrequire(), target);
  }

  // optional .TvWall.Packet.RequireSession.RecordRequireAck recordRequireAck = 6;
  if (has_recordrequireack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->recordrequireack(), target);
  }

  // optional .TvWall.Packet.RequireSession.NetRequire netRequire = 7;
  if (has_netrequire()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->netrequire(), target);
  }

  // optional .TvWall.Packet.RequireSession.NetRequireAck netRequireAck = 8;
  if (has_netrequireack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->netrequireack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_RequireSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TvWall.Packet.RequireSession.ClientRequire clientRequire = 1;
    if (has_clientrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientrequire());
    }

    // optional .TvWall.Packet.RequireSession.ClientRequireAck clientRequireAck = 2;
    if (has_clientrequireack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clientrequireack());
    }

    // optional .TvWall.Packet.RequireSession.LocalMovieSession lms = 3;
    if (has_lms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lms());
    }

    // optional .TvWall.Packet.RequireSession.LocalMovieSessionAck lmsAck = 4;
    if (has_lmsack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lmsack());
    }

    // optional .TvWall.Packet.RequireSession.RecordRequire recordRequire = 5;
    if (has_recordrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordrequire());
    }

    // optional .TvWall.Packet.RequireSession.RecordRequireAck recordRequireAck = 6;
    if (has_recordrequireack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordrequireack());
    }

    // optional .TvWall.Packet.RequireSession.NetRequire netRequire = 7;
    if (has_netrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->netrequire());
    }

    // optional .TvWall.Packet.RequireSession.NetRequireAck netRequireAck = 8;
    if (has_netrequireack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->netrequireack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_RequireSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_RequireSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_RequireSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_RequireSession::MergeFrom(const Packet_RequireSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientrequire()) {
      mutable_clientrequire()->::TvWall::Packet_RequireSession_ClientRequire::MergeFrom(from.clientrequire());
    }
    if (from.has_clientrequireack()) {
      mutable_clientrequireack()->::TvWall::Packet_RequireSession_ClientRequireAck::MergeFrom(from.clientrequireack());
    }
    if (from.has_lms()) {
      mutable_lms()->::TvWall::Packet_RequireSession_LocalMovieSession::MergeFrom(from.lms());
    }
    if (from.has_lmsack()) {
      mutable_lmsack()->::TvWall::Packet_RequireSession_LocalMovieSessionAck::MergeFrom(from.lmsack());
    }
    if (from.has_recordrequire()) {
      mutable_recordrequire()->::TvWall::Packet_RequireSession_RecordRequire::MergeFrom(from.recordrequire());
    }
    if (from.has_recordrequireack()) {
      mutable_recordrequireack()->::TvWall::Packet_RequireSession_RecordRequireAck::MergeFrom(from.recordrequireack());
    }
    if (from.has_netrequire()) {
      mutable_netrequire()->::TvWall::Packet_RequireSession_NetRequire::MergeFrom(from.netrequire());
    }
    if (from.has_netrequireack()) {
      mutable_netrequireack()->::TvWall::Packet_RequireSession_NetRequireAck::MergeFrom(from.netrequireack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_RequireSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_RequireSession::CopyFrom(const Packet_RequireSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_RequireSession::IsInitialized() const {

  if (has_clientrequire()) {
    if (!this->clientrequire().IsInitialized()) return false;
  }
  if (has_clientrequireack()) {
    if (!this->clientrequireack().IsInitialized()) return false;
  }
  if (has_lms()) {
    if (!this->lms().IsInitialized()) return false;
  }
  if (has_lmsack()) {
    if (!this->lmsack().IsInitialized()) return false;
  }
  if (has_recordrequire()) {
    if (!this->recordrequire().IsInitialized()) return false;
  }
  if (has_recordrequireack()) {
    if (!this->recordrequireack().IsInitialized()) return false;
  }
  if (has_netrequireack()) {
    if (!this->netrequireack().IsInitialized()) return false;
  }
  return true;
}

void Packet_RequireSession::Swap(Packet_RequireSession* other) {
  if (other != this) {
    std::swap(clientrequire_, other->clientrequire_);
    std::swap(clientrequireack_, other->clientrequireack_);
    std::swap(lms_, other->lms_);
    std::swap(lmsack_, other->lmsack_);
    std::swap(recordrequire_, other->recordrequire_);
    std::swap(recordrequireack_, other->recordrequireack_);
    std::swap(netrequire_, other->netrequire_);
    std::swap(netrequireack_, other->netrequireack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_RequireSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_RequireSession_descriptor_;
  metadata.reflection = Packet_RequireSession_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Notice_Stat_ScreenSpliStat::kScreenIndexFieldNumber;
const int Packet_Notice_Stat_ScreenSpliStat::kRowFieldNumber;
const int Packet_Notice_Stat_ScreenSpliStat::kColFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ScreenSpliStat::Packet_Notice_Stat_ScreenSpliStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ScreenSpliStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_ScreenSpliStat::Packet_Notice_Stat_ScreenSpliStat(const Packet_Notice_Stat_ScreenSpliStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ScreenSpliStat::SharedCtor() {
  _cached_size_ = 0;
  screenindex_ = 0;
  row_ = 0;
  col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ScreenSpliStat::~Packet_Notice_Stat_ScreenSpliStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ScreenSpliStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_ScreenSpliStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ScreenSpliStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ScreenSpliStat_descriptor_;
}

const Packet_Notice_Stat_ScreenSpliStat& Packet_Notice_Stat_ScreenSpliStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ScreenSpliStat* Packet_Notice_Stat_ScreenSpliStat::default_instance_ = NULL;

Packet_Notice_Stat_ScreenSpliStat* Packet_Notice_Stat_ScreenSpliStat::New() const {
  return new Packet_Notice_Stat_ScreenSpliStat;
}

void Packet_Notice_Stat_ScreenSpliStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    screenindex_ = 0;
    row_ = 0;
    col_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ScreenSpliStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 screenIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenindex_)));
          set_has_screenindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_row;
        break;
      }

      // required int32 row = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_col;
        break;
      }

      // required int32 col = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ScreenSpliStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 screenIndex = 2;
  if (has_screenindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->screenindex(), output);
  }

  // required int32 row = 3;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->row(), output);
  }

  // required int32 col = 4;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->col(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ScreenSpliStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 screenIndex = 2;
  if (has_screenindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->screenindex(), target);
  }

  // required int32 row = 3;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->row(), target);
  }

  // required int32 col = 4;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->col(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ScreenSpliStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 screenIndex = 2;
    if (has_screenindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenindex());
    }

    // required int32 row = 3;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // required int32 col = 4;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ScreenSpliStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ScreenSpliStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ScreenSpliStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ScreenSpliStat::MergeFrom(const Packet_Notice_Stat_ScreenSpliStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenindex()) {
      set_screenindex(from.screenindex());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ScreenSpliStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ScreenSpliStat::CopyFrom(const Packet_Notice_Stat_ScreenSpliStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ScreenSpliStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_Notice_Stat_ScreenSpliStat::Swap(Packet_Notice_Stat_ScreenSpliStat* other) {
  if (other != this) {
    std::swap(screenindex_, other->screenindex_);
    std::swap(row_, other->row_);
    std::swap(col_, other->col_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ScreenSpliStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ScreenSpliStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ScreenSpliStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType_descriptor_;
}
bool Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType Packet_Notice_Stat_ViewStat_ViewGeomotryStat::CREATE;
const Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType Packet_Notice_Stat_ViewStat_ViewGeomotryStat::WINDOW_CTRL;
const Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType Packet_Notice_Stat_ViewStat_ViewGeomotryStat::REMOVE;
const Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType Packet_Notice_Stat_ViewStat_ViewGeomotryStat::SET_BORDER_WIDTH;
const Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType Packet_Notice_Stat_ViewStat_ViewGeomotryStat::SHOW_TITLE;
const Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType Packet_Notice_Stat_ViewStat_ViewGeomotryStat::ViewGeomotryStatType_MIN;
const Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType Packet_Notice_Stat_ViewStat_ViewGeomotryStat::ViewGeomotryStatType_MAX;
const int Packet_Notice_Stat_ViewStat_ViewGeomotryStat::ViewGeomotryStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_ViewStat_ViewGeomotryStat::kTypeFieldNumber;
const int Packet_Notice_Stat_ViewStat_ViewGeomotryStat::kViewFieldNumber;
const int Packet_Notice_Stat_ViewStat_ViewGeomotryStat::kUrlFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ViewStat_ViewGeomotryStat::Packet_Notice_Stat_ViewStat_ViewGeomotryStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::InitAsDefaultInstance() {
  view_ = const_cast< ::TvWall::Packet_ElementDat_View*>(&::TvWall::Packet_ElementDat_View::default_instance());
}

Packet_Notice_Stat_ViewStat_ViewGeomotryStat::Packet_Notice_Stat_ViewStat_ViewGeomotryStat(const Packet_Notice_Stat_ViewStat_ViewGeomotryStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  view_ = NULL;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ViewStat_ViewGeomotryStat::~Packet_Notice_Stat_ViewStat_ViewGeomotryStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
    delete view_;
  }
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_ViewGeomotryStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_ViewGeomotryStat_descriptor_;
}

const Packet_Notice_Stat_ViewStat_ViewGeomotryStat& Packet_Notice_Stat_ViewStat_ViewGeomotryStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ViewStat_ViewGeomotryStat* Packet_Notice_Stat_ViewStat_ViewGeomotryStat::default_instance_ = NULL;

Packet_Notice_Stat_ViewStat_ViewGeomotryStat* Packet_Notice_Stat_ViewStat_ViewGeomotryStat::New() const {
  return new Packet_Notice_Stat_ViewStat_ViewGeomotryStat;
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_view()) {
      if (view_ != NULL) view_->::TvWall::Packet_ElementDat_View::Clear();
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ViewStat_ViewGeomotryStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.ViewStat.ViewGeomotryStat.ViewGeomotryStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_ViewStat_ViewGeomotryStat_ViewGeomotryStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_view;
        break;
      }

      // required .TvWall.Packet.ElementDat.View view = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.ViewGeomotryStat.ViewGeomotryStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .TvWall.Packet.ElementDat.View view = 2;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->view(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ViewStat_ViewGeomotryStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.ViewGeomotryStat.ViewGeomotryStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .TvWall.Packet.ElementDat.View view = 2;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->view(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ViewStat_ViewGeomotryStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.ViewStat.ViewGeomotryStat.ViewGeomotryStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .TvWall.Packet.ElementDat.View view = 2;
    if (has_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->view());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ViewStat_ViewGeomotryStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ViewStat_ViewGeomotryStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::MergeFrom(const Packet_Notice_Stat_ViewStat_ViewGeomotryStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_view()) {
      mutable_view()->::TvWall::Packet_ElementDat_View::MergeFrom(from.view());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::CopyFrom(const Packet_Notice_Stat_ViewStat_ViewGeomotryStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ViewStat_ViewGeomotryStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_view()) {
    if (!this->view().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_ViewStat_ViewGeomotryStat::Swap(Packet_Notice_Stat_ViewStat_ViewGeomotryStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(view_, other->view_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ViewStat_ViewGeomotryStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ViewStat_ViewGeomotryStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ViewStat_ViewGeomotryStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType_descriptor_;
}
bool Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType Packet_Notice_Stat_ViewStat_VideoStat::CAMERA_ADD;
const Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType Packet_Notice_Stat_ViewStat_VideoStat::CAMERA_REMOVE;
const Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType Packet_Notice_Stat_ViewStat_VideoStat::POLL_INTERVAL;
const Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType Packet_Notice_Stat_ViewStat_VideoStat::KEEP_STRETCH;
const Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType Packet_Notice_Stat_ViewStat_VideoStat::VideoStatType_MIN;
const Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType Packet_Notice_Stat_ViewStat_VideoStat::VideoStatType_MAX;
const int Packet_Notice_Stat_ViewStat_VideoStat::VideoStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_ViewStat_VideoStat::kTypeFieldNumber;
const int Packet_Notice_Stat_ViewStat_VideoStat::kWinIdFieldNumber;
const int Packet_Notice_Stat_ViewStat_VideoStat::kCameraIdFieldNumber;
const int Packet_Notice_Stat_ViewStat_VideoStat::kPollIntervalFieldNumber;
const int Packet_Notice_Stat_ViewStat_VideoStat::kKeepStretchFieldNumber;
const int Packet_Notice_Stat_ViewStat_VideoStat::kCameraIddyFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ViewStat_VideoStat::Packet_Notice_Stat_ViewStat_VideoStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ViewStat_VideoStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_ViewStat_VideoStat::Packet_Notice_Stat_ViewStat_VideoStat(const Packet_Notice_Stat_ViewStat_VideoStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_VideoStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  pollinterval_ = 0;
  keepstretch_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ViewStat_VideoStat::~Packet_Notice_Stat_ViewStat_VideoStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ViewStat_VideoStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_ViewStat_VideoStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_VideoStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_VideoStat_descriptor_;
}

const Packet_Notice_Stat_ViewStat_VideoStat& Packet_Notice_Stat_ViewStat_VideoStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ViewStat_VideoStat* Packet_Notice_Stat_ViewStat_VideoStat::default_instance_ = NULL;

Packet_Notice_Stat_ViewStat_VideoStat* Packet_Notice_Stat_ViewStat_VideoStat::New() const {
  return new Packet_Notice_Stat_ViewStat_VideoStat;
}

void Packet_Notice_Stat_ViewStat_VideoStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    pollinterval_ = 0;
    keepstretch_ = false;
  }
  cameraid_.Clear();
  cameraiddy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ViewStat_VideoStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.ViewStat.VideoStat.VideoStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_ViewStat_VideoStat_VideoStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cameraId;
        break;
      }

      // repeated .TvWall.Guid cameraId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cameraId;
        if (input->ExpectTag(32)) goto parse_pollInterval;
        break;
      }

      // optional int32 pollInterval = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pollInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pollinterval_)));
          set_has_pollinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_keepStretch;
        break;
      }

      // optional bool keepStretch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepStretch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepstretch_)));
          set_has_keepstretch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cameraIddy;
        break;
      }

      // repeated .TvWall.Guid cameraIddy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraIddy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameraiddy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cameraIddy;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ViewStat_VideoStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.VideoStat.VideoStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // repeated .TvWall.Guid cameraId = 3;
  for (int i = 0; i < this->cameraid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cameraid(i), output);
  }

  // optional int32 pollInterval = 4;
  if (has_pollinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pollinterval(), output);
  }

  // optional bool keepStretch = 5;
  if (has_keepstretch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->keepstretch(), output);
  }

  // repeated .TvWall.Guid cameraIddy = 6;
  for (int i = 0; i < this->cameraiddy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cameraiddy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ViewStat_VideoStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.VideoStat.VideoStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // repeated .TvWall.Guid cameraId = 3;
  for (int i = 0; i < this->cameraid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cameraid(i), target);
  }

  // optional int32 pollInterval = 4;
  if (has_pollinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pollinterval(), target);
  }

  // optional bool keepStretch = 5;
  if (has_keepstretch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->keepstretch(), target);
  }

  // repeated .TvWall.Guid cameraIddy = 6;
  for (int i = 0; i < this->cameraiddy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cameraiddy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ViewStat_VideoStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.ViewStat.VideoStat.VideoStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional int32 pollInterval = 4;
    if (has_pollinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pollinterval());
    }

    // optional bool keepStretch = 5;
    if (has_keepstretch()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TvWall.Guid cameraId = 3;
  total_size += 1 * this->cameraid_size();
  for (int i = 0; i < this->cameraid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameraid(i));
  }

  // repeated .TvWall.Guid cameraIddy = 6;
  total_size += 1 * this->cameraiddy_size();
  for (int i = 0; i < this->cameraiddy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameraiddy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ViewStat_VideoStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ViewStat_VideoStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ViewStat_VideoStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ViewStat_VideoStat::MergeFrom(const Packet_Notice_Stat_ViewStat_VideoStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  cameraid_.MergeFrom(from.cameraid_);
  cameraiddy_.MergeFrom(from.cameraiddy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_pollinterval()) {
      set_pollinterval(from.pollinterval());
    }
    if (from.has_keepstretch()) {
      set_keepstretch(from.keepstretch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ViewStat_VideoStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_VideoStat::CopyFrom(const Packet_Notice_Stat_ViewStat_VideoStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ViewStat_VideoStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < cameraid_size(); i++) {
    if (!this->cameraid(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cameraiddy_size(); i++) {
    if (!this->cameraiddy(i).IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_ViewStat_VideoStat::Swap(Packet_Notice_Stat_ViewStat_VideoStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    cameraid_.Swap(&other->cameraid_);
    std::swap(pollinterval_, other->pollinterval_);
    std::swap(keepstretch_, other->keepstretch_);
    cameraiddy_.Swap(&other->cameraiddy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ViewStat_VideoStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ViewStat_VideoStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ViewStat_VideoStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType_descriptor_;
}
bool Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType Packet_Notice_Stat_ViewStat_RecordStat::RESET_START_TIME;
const Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType Packet_Notice_Stat_ViewStat_RecordStat::KEEP_STRETCH;
const Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType Packet_Notice_Stat_ViewStat_RecordStat::SET_RATE;
const Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType Packet_Notice_Stat_ViewStat_RecordStat::PAUSE;
const Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType Packet_Notice_Stat_ViewStat_RecordStat::SLOW;
const Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType Packet_Notice_Stat_ViewStat_RecordStat::FAST;
const Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType Packet_Notice_Stat_ViewStat_RecordStat::BACK;
const Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType Packet_Notice_Stat_ViewStat_RecordStat::FORWARD;
const Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType Packet_Notice_Stat_ViewStat_RecordStat::RecordStatType_MIN;
const Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType Packet_Notice_Stat_ViewStat_RecordStat::RecordStatType_MAX;
const int Packet_Notice_Stat_ViewStat_RecordStat::RecordStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_ViewStat_RecordStat::kTypeFieldNumber;
const int Packet_Notice_Stat_ViewStat_RecordStat::kWinIdFieldNumber;
const int Packet_Notice_Stat_ViewStat_RecordStat::kCameraIdFieldNumber;
const int Packet_Notice_Stat_ViewStat_RecordStat::kStartTimeFieldNumber;
const int Packet_Notice_Stat_ViewStat_RecordStat::kKeepStretchFieldNumber;
const int Packet_Notice_Stat_ViewStat_RecordStat::kRateFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ViewStat_RecordStat::Packet_Notice_Stat_ViewStat_RecordStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ViewStat_RecordStat::InitAsDefaultInstance() {
  cameraid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
}

Packet_Notice_Stat_ViewStat_RecordStat::Packet_Notice_Stat_ViewStat_RecordStat(const Packet_Notice_Stat_ViewStat_RecordStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_RecordStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  cameraid_ = NULL;
  starttime_ = GOOGLE_ULONGLONG(0);
  keepstretch_ = false;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ViewStat_RecordStat::~Packet_Notice_Stat_ViewStat_RecordStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ViewStat_RecordStat::SharedDtor() {
  if (this != default_instance_) {
    delete cameraid_;
  }
}

void Packet_Notice_Stat_ViewStat_RecordStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_RecordStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_RecordStat_descriptor_;
}

const Packet_Notice_Stat_ViewStat_RecordStat& Packet_Notice_Stat_ViewStat_RecordStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ViewStat_RecordStat* Packet_Notice_Stat_ViewStat_RecordStat::default_instance_ = NULL;

Packet_Notice_Stat_ViewStat_RecordStat* Packet_Notice_Stat_ViewStat_RecordStat::New() const {
  return new Packet_Notice_Stat_ViewStat_RecordStat;
}

void Packet_Notice_Stat_ViewStat_RecordStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_cameraid()) {
      if (cameraid_ != NULL) cameraid_->::TvWall::Guid::Clear();
    }
    starttime_ = GOOGLE_ULONGLONG(0);
    keepstretch_ = false;
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ViewStat_RecordStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.ViewStat.RecordStat.RecordStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_ViewStat_RecordStat_RecordStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cameraId;
        break;
      }

      // required .TvWall.Guid cameraId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_startTime;
        break;
      }

      // optional uint64 startTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_keepStretch;
        break;
      }

      // optional bool keepStretch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keepStretch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keepstretch_)));
          set_has_keepstretch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rate;
        break;
      }

      // optional int32 rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ViewStat_RecordStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.RecordStat.RecordStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // required .TvWall.Guid cameraId = 3;
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cameraid(), output);
  }

  // optional uint64 startTime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->starttime(), output);
  }

  // optional bool keepStretch = 5;
  if (has_keepstretch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->keepstretch(), output);
  }

  // optional int32 rate = 6;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ViewStat_RecordStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.RecordStat.RecordStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // required .TvWall.Guid cameraId = 3;
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cameraid(), target);
  }

  // optional uint64 startTime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->starttime(), target);
  }

  // optional bool keepStretch = 5;
  if (has_keepstretch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->keepstretch(), target);
  }

  // optional int32 rate = 6;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ViewStat_RecordStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.ViewStat.RecordStat.RecordStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required .TvWall.Guid cameraId = 3;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameraid());
    }

    // optional uint64 startTime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->starttime());
    }

    // optional bool keepStretch = 5;
    if (has_keepstretch()) {
      total_size += 1 + 1;
    }

    // optional int32 rate = 6;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ViewStat_RecordStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ViewStat_RecordStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ViewStat_RecordStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ViewStat_RecordStat::MergeFrom(const Packet_Notice_Stat_ViewStat_RecordStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_cameraid()) {
      mutable_cameraid()->::TvWall::Guid::MergeFrom(from.cameraid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_keepstretch()) {
      set_keepstretch(from.keepstretch());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ViewStat_RecordStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_RecordStat::CopyFrom(const Packet_Notice_Stat_ViewStat_RecordStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ViewStat_RecordStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_cameraid()) {
    if (!this->cameraid().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_ViewStat_RecordStat::Swap(Packet_Notice_Stat_ViewStat_RecordStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(starttime_, other->starttime_);
    std::swap(keepstretch_, other->keepstretch_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ViewStat_RecordStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ViewStat_RecordStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ViewStat_RecordStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType_descriptor_;
}
bool Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType Packet_Notice_Stat_ViewStat_LocalMovieStat::SET_FILE;
const Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType Packet_Notice_Stat_ViewStat_LocalMovieStat::SET_VOLUME;
const Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType Packet_Notice_Stat_ViewStat_LocalMovieStat::SET_SLIDER;
const Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType Packet_Notice_Stat_ViewStat_LocalMovieStat::PAUSE;
const Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType Packet_Notice_Stat_ViewStat_LocalMovieStat::STOP;
const Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType Packet_Notice_Stat_ViewStat_LocalMovieStat::LocalMovieType_MIN;
const Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType Packet_Notice_Stat_ViewStat_LocalMovieStat::LocalMovieType_MAX;
const int Packet_Notice_Stat_ViewStat_LocalMovieStat::LocalMovieType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_ViewStat_LocalMovieStat::kTypeFieldNumber;
const int Packet_Notice_Stat_ViewStat_LocalMovieStat::kWinIdFieldNumber;
const int Packet_Notice_Stat_ViewStat_LocalMovieStat::kUrlFieldNumber;
const int Packet_Notice_Stat_ViewStat_LocalMovieStat::kVolumeFieldNumber;
const int Packet_Notice_Stat_ViewStat_LocalMovieStat::kTimeStampFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ViewStat_LocalMovieStat::Packet_Notice_Stat_ViewStat_LocalMovieStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_ViewStat_LocalMovieStat::Packet_Notice_Stat_ViewStat_LocalMovieStat(const Packet_Notice_Stat_ViewStat_LocalMovieStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ViewStat_LocalMovieStat::~Packet_Notice_Stat_ViewStat_LocalMovieStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_LocalMovieStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_LocalMovieStat_descriptor_;
}

const Packet_Notice_Stat_ViewStat_LocalMovieStat& Packet_Notice_Stat_ViewStat_LocalMovieStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ViewStat_LocalMovieStat* Packet_Notice_Stat_ViewStat_LocalMovieStat::default_instance_ = NULL;

Packet_Notice_Stat_ViewStat_LocalMovieStat* Packet_Notice_Stat_ViewStat_LocalMovieStat::New() const {
  return new Packet_Notice_Stat_ViewStat_LocalMovieStat;
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    volume_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ViewStat_LocalMovieStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.ViewStat.LocalMovieStat.LocalMovieType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_ViewStat_LocalMovieStat_LocalMovieType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_volume;
        break;
      }

      // optional int32 volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timeStamp;
        break;
      }

      // optional int64 timeStamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.LocalMovieStat.LocalMovieType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional int32 volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // optional int64 timeStamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ViewStat_LocalMovieStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.LocalMovieStat.LocalMovieType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional int32 volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // optional int64 timeStamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ViewStat_LocalMovieStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.ViewStat.LocalMovieStat.LocalMovieType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional int64 timeStamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ViewStat_LocalMovieStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ViewStat_LocalMovieStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::MergeFrom(const Packet_Notice_Stat_ViewStat_LocalMovieStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::CopyFrom(const Packet_Notice_Stat_ViewStat_LocalMovieStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ViewStat_LocalMovieStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Notice_Stat_ViewStat_LocalMovieStat::Swap(Packet_Notice_Stat_ViewStat_LocalMovieStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(url_, other->url_);
    std::swap(volume_, other->volume_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ViewStat_LocalMovieStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ViewStat_LocalMovieStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ViewStat_LocalMovieStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_FlashStat_FlashStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_FlashStat_FlashStatType_descriptor_;
}
bool Packet_Notice_Stat_ViewStat_FlashStat_FlashStatType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_ViewStat_FlashStat_FlashStatType Packet_Notice_Stat_ViewStat_FlashStat::SET_FLASH;
const Packet_Notice_Stat_ViewStat_FlashStat_FlashStatType Packet_Notice_Stat_ViewStat_FlashStat::FlashStatType_MIN;
const Packet_Notice_Stat_ViewStat_FlashStat_FlashStatType Packet_Notice_Stat_ViewStat_FlashStat::FlashStatType_MAX;
const int Packet_Notice_Stat_ViewStat_FlashStat::FlashStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_ViewStat_FlashStat::kTypeFieldNumber;
const int Packet_Notice_Stat_ViewStat_FlashStat::kWinIdFieldNumber;
const int Packet_Notice_Stat_ViewStat_FlashStat::kUrlFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ViewStat_FlashStat::Packet_Notice_Stat_ViewStat_FlashStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ViewStat_FlashStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_ViewStat_FlashStat::Packet_Notice_Stat_ViewStat_FlashStat(const Packet_Notice_Stat_ViewStat_FlashStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_FlashStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ViewStat_FlashStat::~Packet_Notice_Stat_ViewStat_FlashStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ViewStat_FlashStat::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_ViewStat_FlashStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_FlashStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_FlashStat_descriptor_;
}

const Packet_Notice_Stat_ViewStat_FlashStat& Packet_Notice_Stat_ViewStat_FlashStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ViewStat_FlashStat* Packet_Notice_Stat_ViewStat_FlashStat::default_instance_ = NULL;

Packet_Notice_Stat_ViewStat_FlashStat* Packet_Notice_Stat_ViewStat_FlashStat::New() const {
  return new Packet_Notice_Stat_ViewStat_FlashStat;
}

void Packet_Notice_Stat_ViewStat_FlashStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ViewStat_FlashStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.ViewStat.FlashStat.FlashStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_ViewStat_FlashStat_FlashStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_ViewStat_FlashStat_FlashStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // required string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ViewStat_FlashStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.FlashStat.FlashStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // required string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ViewStat_FlashStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.FlashStat.FlashStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // required string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ViewStat_FlashStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.ViewStat.FlashStat.FlashStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ViewStat_FlashStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ViewStat_FlashStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ViewStat_FlashStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ViewStat_FlashStat::MergeFrom(const Packet_Notice_Stat_ViewStat_FlashStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ViewStat_FlashStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_FlashStat::CopyFrom(const Packet_Notice_Stat_ViewStat_FlashStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ViewStat_FlashStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_Notice_Stat_ViewStat_FlashStat::Swap(Packet_Notice_Stat_ViewStat_FlashStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ViewStat_FlashStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ViewStat_FlashStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ViewStat_FlashStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_HTMLStat_HTMLStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_HTMLStat_HTMLStatType_descriptor_;
}
bool Packet_Notice_Stat_ViewStat_HTMLStat_HTMLStatType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_ViewStat_HTMLStat_HTMLStatType Packet_Notice_Stat_ViewStat_HTMLStat::SET_HTML;
const Packet_Notice_Stat_ViewStat_HTMLStat_HTMLStatType Packet_Notice_Stat_ViewStat_HTMLStat::HTMLStatType_MIN;
const Packet_Notice_Stat_ViewStat_HTMLStat_HTMLStatType Packet_Notice_Stat_ViewStat_HTMLStat::HTMLStatType_MAX;
const int Packet_Notice_Stat_ViewStat_HTMLStat::HTMLStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_ViewStat_HTMLStat::kTypeFieldNumber;
const int Packet_Notice_Stat_ViewStat_HTMLStat::kWinIdFieldNumber;
const int Packet_Notice_Stat_ViewStat_HTMLStat::kUrlFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ViewStat_HTMLStat::Packet_Notice_Stat_ViewStat_HTMLStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ViewStat_HTMLStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_ViewStat_HTMLStat::Packet_Notice_Stat_ViewStat_HTMLStat(const Packet_Notice_Stat_ViewStat_HTMLStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_HTMLStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ViewStat_HTMLStat::~Packet_Notice_Stat_ViewStat_HTMLStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ViewStat_HTMLStat::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_ViewStat_HTMLStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_HTMLStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_HTMLStat_descriptor_;
}

const Packet_Notice_Stat_ViewStat_HTMLStat& Packet_Notice_Stat_ViewStat_HTMLStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ViewStat_HTMLStat* Packet_Notice_Stat_ViewStat_HTMLStat::default_instance_ = NULL;

Packet_Notice_Stat_ViewStat_HTMLStat* Packet_Notice_Stat_ViewStat_HTMLStat::New() const {
  return new Packet_Notice_Stat_ViewStat_HTMLStat;
}

void Packet_Notice_Stat_ViewStat_HTMLStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ViewStat_HTMLStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.ViewStat.HTMLStat.HTMLStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_ViewStat_HTMLStat_HTMLStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_ViewStat_HTMLStat_HTMLStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // required string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ViewStat_HTMLStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.HTMLStat.HTMLStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // required string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ViewStat_HTMLStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.HTMLStat.HTMLStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // required string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ViewStat_HTMLStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.ViewStat.HTMLStat.HTMLStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // required string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ViewStat_HTMLStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ViewStat_HTMLStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ViewStat_HTMLStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ViewStat_HTMLStat::MergeFrom(const Packet_Notice_Stat_ViewStat_HTMLStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ViewStat_HTMLStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_HTMLStat::CopyFrom(const Packet_Notice_Stat_ViewStat_HTMLStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ViewStat_HTMLStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Packet_Notice_Stat_ViewStat_HTMLStat::Swap(Packet_Notice_Stat_ViewStat_HTMLStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ViewStat_HTMLStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ViewStat_HTMLStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ViewStat_HTMLStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_TextStat_TextStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_TextStat_TextStatType_descriptor_;
}
bool Packet_Notice_Stat_ViewStat_TextStat_TextStatType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_ViewStat_TextStat_TextStatType Packet_Notice_Stat_ViewStat_TextStat::SET_TEXT;
const Packet_Notice_Stat_ViewStat_TextStat_TextStatType Packet_Notice_Stat_ViewStat_TextStat::TextStatType_MIN;
const Packet_Notice_Stat_ViewStat_TextStat_TextStatType Packet_Notice_Stat_ViewStat_TextStat::TextStatType_MAX;
const int Packet_Notice_Stat_ViewStat_TextStat::TextStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_ViewStat_TextStat::kTypeFieldNumber;
const int Packet_Notice_Stat_ViewStat_TextStat::kWinIdFieldNumber;
const int Packet_Notice_Stat_ViewStat_TextStat::kTextFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ViewStat_TextStat::Packet_Notice_Stat_ViewStat_TextStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ViewStat_TextStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_ViewStat_TextStat::Packet_Notice_Stat_ViewStat_TextStat(const Packet_Notice_Stat_ViewStat_TextStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_TextStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ViewStat_TextStat::~Packet_Notice_Stat_ViewStat_TextStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ViewStat_TextStat::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_ViewStat_TextStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_TextStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_TextStat_descriptor_;
}

const Packet_Notice_Stat_ViewStat_TextStat& Packet_Notice_Stat_ViewStat_TextStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ViewStat_TextStat* Packet_Notice_Stat_ViewStat_TextStat::default_instance_ = NULL;

Packet_Notice_Stat_ViewStat_TextStat* Packet_Notice_Stat_ViewStat_TextStat::New() const {
  return new Packet_Notice_Stat_ViewStat_TextStat;
}

void Packet_Notice_Stat_ViewStat_TextStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ViewStat_TextStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.ViewStat.TextStat.TextStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_ViewStat_TextStat_TextStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_ViewStat_TextStat_TextStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ViewStat_TextStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.TextStat.TextStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ViewStat_TextStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.TextStat.TextStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ViewStat_TextStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.ViewStat.TextStat.TextStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ViewStat_TextStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ViewStat_TextStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ViewStat_TextStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ViewStat_TextStat::MergeFrom(const Packet_Notice_Stat_ViewStat_TextStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ViewStat_TextStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_TextStat::CopyFrom(const Packet_Notice_Stat_ViewStat_TextStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ViewStat_TextStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Notice_Stat_ViewStat_TextStat::Swap(Packet_Notice_Stat_ViewStat_TextStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ViewStat_TextStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ViewStat_TextStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ViewStat_TextStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_MapStat_MapCtrlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_MapStat_MapCtrlType_descriptor_;
}
bool Packet_Notice_Stat_ViewStat_MapStat_MapCtrlType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_ViewStat_MapStat_MapCtrlType Packet_Notice_Stat_ViewStat_MapStat::SET_MAP;
const Packet_Notice_Stat_ViewStat_MapStat_MapCtrlType Packet_Notice_Stat_ViewStat_MapStat::MapCtrlType_MIN;
const Packet_Notice_Stat_ViewStat_MapStat_MapCtrlType Packet_Notice_Stat_ViewStat_MapStat::MapCtrlType_MAX;
const int Packet_Notice_Stat_ViewStat_MapStat::MapCtrlType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_ViewStat_MapStat::kTypeFieldNumber;
const int Packet_Notice_Stat_ViewStat_MapStat::kWinIdFieldNumber;
const int Packet_Notice_Stat_ViewStat_MapStat::kUrlFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ViewStat_MapStat::Packet_Notice_Stat_ViewStat_MapStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ViewStat_MapStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_ViewStat_MapStat::Packet_Notice_Stat_ViewStat_MapStat(const Packet_Notice_Stat_ViewStat_MapStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_MapStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ViewStat_MapStat::~Packet_Notice_Stat_ViewStat_MapStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ViewStat_MapStat::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_ViewStat_MapStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_MapStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_MapStat_descriptor_;
}

const Packet_Notice_Stat_ViewStat_MapStat& Packet_Notice_Stat_ViewStat_MapStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ViewStat_MapStat* Packet_Notice_Stat_ViewStat_MapStat::default_instance_ = NULL;

Packet_Notice_Stat_ViewStat_MapStat* Packet_Notice_Stat_ViewStat_MapStat::New() const {
  return new Packet_Notice_Stat_ViewStat_MapStat;
}

void Packet_Notice_Stat_ViewStat_MapStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ViewStat_MapStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.ViewStat.MapStat.MapCtrlType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_ViewStat_MapStat_MapCtrlType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_ViewStat_MapStat_MapCtrlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ViewStat_MapStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.MapStat.MapCtrlType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ViewStat_MapStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.MapStat.MapCtrlType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ViewStat_MapStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.ViewStat.MapStat.MapCtrlType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ViewStat_MapStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ViewStat_MapStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ViewStat_MapStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ViewStat_MapStat::MergeFrom(const Packet_Notice_Stat_ViewStat_MapStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ViewStat_MapStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_MapStat::CopyFrom(const Packet_Notice_Stat_ViewStat_MapStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ViewStat_MapStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Notice_Stat_ViewStat_MapStat::Swap(Packet_Notice_Stat_ViewStat_MapStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ViewStat_MapStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ViewStat_MapStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ViewStat_MapStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType_descriptor_;
}
bool Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType Packet_Notice_Stat_ViewStat_OthersStat::OTHER_ADD;
const Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType Packet_Notice_Stat_ViewStat_OthersStat::SERVER_NAME;
const Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType Packet_Notice_Stat_ViewStat_OthersStat::OthersStatType_MIN;
const Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType Packet_Notice_Stat_ViewStat_OthersStat::OthersStatType_MAX;
const int Packet_Notice_Stat_ViewStat_OthersStat::OthersStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_ViewStat_OthersStat::kTypeFieldNumber;
const int Packet_Notice_Stat_ViewStat_OthersStat::kWinIdFieldNumber;
const int Packet_Notice_Stat_ViewStat_OthersStat::kSerNameFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ViewStat_OthersStat::Packet_Notice_Stat_ViewStat_OthersStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ViewStat_OthersStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_ViewStat_OthersStat::Packet_Notice_Stat_ViewStat_OthersStat(const Packet_Notice_Stat_ViewStat_OthersStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_OthersStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  winid_ = 0;
  sername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ViewStat_OthersStat::~Packet_Notice_Stat_ViewStat_OthersStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ViewStat_OthersStat::SharedDtor() {
  if (sername_ != &::google::protobuf::internal::kEmptyString) {
    delete sername_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_ViewStat_OthersStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat_OthersStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_OthersStat_descriptor_;
}

const Packet_Notice_Stat_ViewStat_OthersStat& Packet_Notice_Stat_ViewStat_OthersStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ViewStat_OthersStat* Packet_Notice_Stat_ViewStat_OthersStat::default_instance_ = NULL;

Packet_Notice_Stat_ViewStat_OthersStat* Packet_Notice_Stat_ViewStat_OthersStat::New() const {
  return new Packet_Notice_Stat_ViewStat_OthersStat;
}

void Packet_Notice_Stat_ViewStat_OthersStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    winid_ = 0;
    if (has_sername()) {
      if (sername_ != &::google::protobuf::internal::kEmptyString) {
        sername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ViewStat_OthersStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.ViewStat.OthersStat.OthersStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_ViewStat_OthersStat_OthersStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winId;
        break;
      }

      // required int32 winId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serName;
        break;
      }

      // optional string serName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sername().data(), this->sername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ViewStat_OthersStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.OthersStat.OthersStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winid(), output);
  }

  // optional string serName = 3;
  if (has_sername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sername().data(), this->sername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ViewStat_OthersStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.ViewStat.OthersStat.OthersStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 winId = 2;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winid(), target);
  }

  // optional string serName = 3;
  if (has_sername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sername().data(), this->sername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ViewStat_OthersStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.ViewStat.OthersStat.OthersStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 winId = 2;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional string serName = 3;
    if (has_sername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ViewStat_OthersStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ViewStat_OthersStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ViewStat_OthersStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ViewStat_OthersStat::MergeFrom(const Packet_Notice_Stat_ViewStat_OthersStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_sername()) {
      set_sername(from.sername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ViewStat_OthersStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat_OthersStat::CopyFrom(const Packet_Notice_Stat_ViewStat_OthersStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ViewStat_OthersStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Notice_Stat_ViewStat_OthersStat::Swap(Packet_Notice_Stat_ViewStat_OthersStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(winid_, other->winid_);
    std::swap(sername_, other->sername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ViewStat_OthersStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ViewStat_OthersStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ViewStat_OthersStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Notice_Stat_ViewStat::kVideoStatFieldNumber;
const int Packet_Notice_Stat_ViewStat::kFlashStatFieldNumber;
const int Packet_Notice_Stat_ViewStat::kHtmlStatFieldNumber;
const int Packet_Notice_Stat_ViewStat::kTextStatFieldNumber;
const int Packet_Notice_Stat_ViewStat::kOthersStatFieldNumber;
const int Packet_Notice_Stat_ViewStat::kLocalMovieStatFieldNumber;
const int Packet_Notice_Stat_ViewStat::kViewGeomotryStatFieldNumber;
const int Packet_Notice_Stat_ViewStat::kRecordStatFieldNumber;
const int Packet_Notice_Stat_ViewStat::kMapStatFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ViewStat::Packet_Notice_Stat_ViewStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ViewStat::InitAsDefaultInstance() {
  videostat_ = const_cast< ::TvWall::Packet_Notice_Stat_ViewStat_VideoStat*>(&::TvWall::Packet_Notice_Stat_ViewStat_VideoStat::default_instance());
  flashstat_ = const_cast< ::TvWall::Packet_Notice_Stat_ViewStat_FlashStat*>(&::TvWall::Packet_Notice_Stat_ViewStat_FlashStat::default_instance());
  htmlstat_ = const_cast< ::TvWall::Packet_Notice_Stat_ViewStat_HTMLStat*>(&::TvWall::Packet_Notice_Stat_ViewStat_HTMLStat::default_instance());
  textstat_ = const_cast< ::TvWall::Packet_Notice_Stat_ViewStat_TextStat*>(&::TvWall::Packet_Notice_Stat_ViewStat_TextStat::default_instance());
  othersstat_ = const_cast< ::TvWall::Packet_Notice_Stat_ViewStat_OthersStat*>(&::TvWall::Packet_Notice_Stat_ViewStat_OthersStat::default_instance());
  localmoviestat_ = const_cast< ::TvWall::Packet_Notice_Stat_ViewStat_LocalMovieStat*>(&::TvWall::Packet_Notice_Stat_ViewStat_LocalMovieStat::default_instance());
  viewgeomotrystat_ = const_cast< ::TvWall::Packet_Notice_Stat_ViewStat_ViewGeomotryStat*>(&::TvWall::Packet_Notice_Stat_ViewStat_ViewGeomotryStat::default_instance());
  recordstat_ = const_cast< ::TvWall::Packet_Notice_Stat_ViewStat_RecordStat*>(&::TvWall::Packet_Notice_Stat_ViewStat_RecordStat::default_instance());
  mapstat_ = const_cast< ::TvWall::Packet_Notice_Stat_ViewStat_MapStat*>(&::TvWall::Packet_Notice_Stat_ViewStat_MapStat::default_instance());
}

Packet_Notice_Stat_ViewStat::Packet_Notice_Stat_ViewStat(const Packet_Notice_Stat_ViewStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat::SharedCtor() {
  _cached_size_ = 0;
  videostat_ = NULL;
  flashstat_ = NULL;
  htmlstat_ = NULL;
  textstat_ = NULL;
  othersstat_ = NULL;
  localmoviestat_ = NULL;
  viewgeomotrystat_ = NULL;
  recordstat_ = NULL;
  mapstat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ViewStat::~Packet_Notice_Stat_ViewStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ViewStat::SharedDtor() {
  if (this != default_instance_) {
    delete videostat_;
    delete flashstat_;
    delete htmlstat_;
    delete textstat_;
    delete othersstat_;
    delete localmoviestat_;
    delete viewgeomotrystat_;
    delete recordstat_;
    delete mapstat_;
  }
}

void Packet_Notice_Stat_ViewStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ViewStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ViewStat_descriptor_;
}

const Packet_Notice_Stat_ViewStat& Packet_Notice_Stat_ViewStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ViewStat* Packet_Notice_Stat_ViewStat::default_instance_ = NULL;

Packet_Notice_Stat_ViewStat* Packet_Notice_Stat_ViewStat::New() const {
  return new Packet_Notice_Stat_ViewStat;
}

void Packet_Notice_Stat_ViewStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_videostat()) {
      if (videostat_ != NULL) videostat_->::TvWall::Packet_Notice_Stat_ViewStat_VideoStat::Clear();
    }
    if (has_flashstat()) {
      if (flashstat_ != NULL) flashstat_->::TvWall::Packet_Notice_Stat_ViewStat_FlashStat::Clear();
    }
    if (has_htmlstat()) {
      if (htmlstat_ != NULL) htmlstat_->::TvWall::Packet_Notice_Stat_ViewStat_HTMLStat::Clear();
    }
    if (has_textstat()) {
      if (textstat_ != NULL) textstat_->::TvWall::Packet_Notice_Stat_ViewStat_TextStat::Clear();
    }
    if (has_othersstat()) {
      if (othersstat_ != NULL) othersstat_->::TvWall::Packet_Notice_Stat_ViewStat_OthersStat::Clear();
    }
    if (has_localmoviestat()) {
      if (localmoviestat_ != NULL) localmoviestat_->::TvWall::Packet_Notice_Stat_ViewStat_LocalMovieStat::Clear();
    }
    if (has_viewgeomotrystat()) {
      if (viewgeomotrystat_ != NULL) viewgeomotrystat_->::TvWall::Packet_Notice_Stat_ViewStat_ViewGeomotryStat::Clear();
    }
    if (has_recordstat()) {
      if (recordstat_ != NULL) recordstat_->::TvWall::Packet_Notice_Stat_ViewStat_RecordStat::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_mapstat()) {
      if (mapstat_ != NULL) mapstat_->::TvWall::Packet_Notice_Stat_ViewStat_MapStat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ViewStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TvWall.Packet.Notice.Stat.ViewStat.VideoStat videoStat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videostat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flashStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.ViewStat.FlashStat flashStat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flashStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flashstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_htmlStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.ViewStat.HTMLStat htmlStat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_htmlStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_htmlstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_textStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.ViewStat.TextStat textStat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_othersStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.ViewStat.OthersStat othersStat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_othersStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_othersstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_localMovieStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.ViewStat.LocalMovieStat localMovieStat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localMovieStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localmoviestat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_viewGeomotryStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.ViewStat.ViewGeomotryStat viewGeomotryStat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_viewGeomotryStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewgeomotrystat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_recordStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.ViewStat.RecordStat recordStat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_mapStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.ViewStat.MapStat mapStat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ViewStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TvWall.Packet.Notice.Stat.ViewStat.VideoStat videoStat = 1;
  if (has_videostat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->videostat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.FlashStat flashStat = 2;
  if (has_flashstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flashstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.HTMLStat htmlStat = 3;
  if (has_htmlstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->htmlstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.TextStat textStat = 4;
  if (has_textstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->textstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.OthersStat othersStat = 5;
  if (has_othersstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->othersstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.LocalMovieStat localMovieStat = 6;
  if (has_localmoviestat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->localmoviestat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.ViewGeomotryStat viewGeomotryStat = 7;
  if (has_viewgeomotrystat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->viewgeomotrystat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.RecordStat recordStat = 8;
  if (has_recordstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->recordstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.MapStat mapStat = 9;
  if (has_mapstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->mapstat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ViewStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TvWall.Packet.Notice.Stat.ViewStat.VideoStat videoStat = 1;
  if (has_videostat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->videostat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.FlashStat flashStat = 2;
  if (has_flashstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flashstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.HTMLStat htmlStat = 3;
  if (has_htmlstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->htmlstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.TextStat textStat = 4;
  if (has_textstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->textstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.OthersStat othersStat = 5;
  if (has_othersstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->othersstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.LocalMovieStat localMovieStat = 6;
  if (has_localmoviestat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->localmoviestat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.ViewGeomotryStat viewGeomotryStat = 7;
  if (has_viewgeomotrystat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->viewgeomotrystat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.RecordStat recordStat = 8;
  if (has_recordstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->recordstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.ViewStat.MapStat mapStat = 9;
  if (has_mapstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->mapstat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ViewStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TvWall.Packet.Notice.Stat.ViewStat.VideoStat videoStat = 1;
    if (has_videostat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videostat());
    }

    // optional .TvWall.Packet.Notice.Stat.ViewStat.FlashStat flashStat = 2;
    if (has_flashstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flashstat());
    }

    // optional .TvWall.Packet.Notice.Stat.ViewStat.HTMLStat htmlStat = 3;
    if (has_htmlstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->htmlstat());
    }

    // optional .TvWall.Packet.Notice.Stat.ViewStat.TextStat textStat = 4;
    if (has_textstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textstat());
    }

    // optional .TvWall.Packet.Notice.Stat.ViewStat.OthersStat othersStat = 5;
    if (has_othersstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->othersstat());
    }

    // optional .TvWall.Packet.Notice.Stat.ViewStat.LocalMovieStat localMovieStat = 6;
    if (has_localmoviestat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localmoviestat());
    }

    // optional .TvWall.Packet.Notice.Stat.ViewStat.ViewGeomotryStat viewGeomotryStat = 7;
    if (has_viewgeomotrystat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viewgeomotrystat());
    }

    // optional .TvWall.Packet.Notice.Stat.ViewStat.RecordStat recordStat = 8;
    if (has_recordstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordstat());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TvWall.Packet.Notice.Stat.ViewStat.MapStat mapStat = 9;
    if (has_mapstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapstat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ViewStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ViewStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ViewStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ViewStat::MergeFrom(const Packet_Notice_Stat_ViewStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_videostat()) {
      mutable_videostat()->::TvWall::Packet_Notice_Stat_ViewStat_VideoStat::MergeFrom(from.videostat());
    }
    if (from.has_flashstat()) {
      mutable_flashstat()->::TvWall::Packet_Notice_Stat_ViewStat_FlashStat::MergeFrom(from.flashstat());
    }
    if (from.has_htmlstat()) {
      mutable_htmlstat()->::TvWall::Packet_Notice_Stat_ViewStat_HTMLStat::MergeFrom(from.htmlstat());
    }
    if (from.has_textstat()) {
      mutable_textstat()->::TvWall::Packet_Notice_Stat_ViewStat_TextStat::MergeFrom(from.textstat());
    }
    if (from.has_othersstat()) {
      mutable_othersstat()->::TvWall::Packet_Notice_Stat_ViewStat_OthersStat::MergeFrom(from.othersstat());
    }
    if (from.has_localmoviestat()) {
      mutable_localmoviestat()->::TvWall::Packet_Notice_Stat_ViewStat_LocalMovieStat::MergeFrom(from.localmoviestat());
    }
    if (from.has_viewgeomotrystat()) {
      mutable_viewgeomotrystat()->::TvWall::Packet_Notice_Stat_ViewStat_ViewGeomotryStat::MergeFrom(from.viewgeomotrystat());
    }
    if (from.has_recordstat()) {
      mutable_recordstat()->::TvWall::Packet_Notice_Stat_ViewStat_RecordStat::MergeFrom(from.recordstat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mapstat()) {
      mutable_mapstat()->::TvWall::Packet_Notice_Stat_ViewStat_MapStat::MergeFrom(from.mapstat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ViewStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ViewStat::CopyFrom(const Packet_Notice_Stat_ViewStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ViewStat::IsInitialized() const {

  if (has_videostat()) {
    if (!this->videostat().IsInitialized()) return false;
  }
  if (has_flashstat()) {
    if (!this->flashstat().IsInitialized()) return false;
  }
  if (has_htmlstat()) {
    if (!this->htmlstat().IsInitialized()) return false;
  }
  if (has_textstat()) {
    if (!this->textstat().IsInitialized()) return false;
  }
  if (has_othersstat()) {
    if (!this->othersstat().IsInitialized()) return false;
  }
  if (has_localmoviestat()) {
    if (!this->localmoviestat().IsInitialized()) return false;
  }
  if (has_viewgeomotrystat()) {
    if (!this->viewgeomotrystat().IsInitialized()) return false;
  }
  if (has_recordstat()) {
    if (!this->recordstat().IsInitialized()) return false;
  }
  if (has_mapstat()) {
    if (!this->mapstat().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_ViewStat::Swap(Packet_Notice_Stat_ViewStat* other) {
  if (other != this) {
    std::swap(videostat_, other->videostat_);
    std::swap(flashstat_, other->flashstat_);
    std::swap(htmlstat_, other->htmlstat_);
    std::swap(textstat_, other->textstat_);
    std::swap(othersstat_, other->othersstat_);
    std::swap(localmoviestat_, other->localmoviestat_);
    std::swap(viewgeomotrystat_, other->viewgeomotrystat_);
    std::swap(recordstat_, other->recordstat_);
    std::swap(mapstat_, other->mapstat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ViewStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ViewStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ViewStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_CameraStat_PTZ_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_CameraStat_PTZ_TYPE_descriptor_;
}
bool Packet_Notice_Stat_CameraStat_PTZ_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::LEFT;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::RIGHT;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::UP;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::DOWN;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::ADD_CAMERA;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::REMOVE_CAMERA;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::NETSTAT;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::PLAYING_STAT;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::PLAYBACK_STAT;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::UPDATE;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::ADD;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::REMOVE;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::ADD_GRP;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::REMOVE_GRP;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::UPDATE_GRP;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::PTZ_TYPE_MIN;
const Packet_Notice_Stat_CameraStat_PTZ_TYPE Packet_Notice_Stat_CameraStat::PTZ_TYPE_MAX;
const int Packet_Notice_Stat_CameraStat::PTZ_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_CameraStat::kTypeFieldNumber;
const int Packet_Notice_Stat_CameraStat::kCameraIdFieldNumber;
const int Packet_Notice_Stat_CameraStat::kCamGrpFieldNumber;
const int Packet_Notice_Stat_CameraStat::kCamFieldNumber;
const int Packet_Notice_Stat_CameraStat::kGrpFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_CameraStat::Packet_Notice_Stat_CameraStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_CameraStat::InitAsDefaultInstance() {
  cameraid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
  cam_ = const_cast< ::TvWall::Packet_ElementDat_Camera*>(&::TvWall::Packet_ElementDat_Camera::default_instance());
  grp_ = const_cast< ::TvWall::Packet_ElementDat_CameraGrp*>(&::TvWall::Packet_ElementDat_CameraGrp::default_instance());
}

Packet_Notice_Stat_CameraStat::Packet_Notice_Stat_CameraStat(const Packet_Notice_Stat_CameraStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_CameraStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cameraid_ = NULL;
  cam_ = NULL;
  grp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_CameraStat::~Packet_Notice_Stat_CameraStat() {
  SharedDtor();
}

void Packet_Notice_Stat_CameraStat::SharedDtor() {
  if (this != default_instance_) {
    delete cameraid_;
    delete cam_;
    delete grp_;
  }
}

void Packet_Notice_Stat_CameraStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_CameraStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_CameraStat_descriptor_;
}

const Packet_Notice_Stat_CameraStat& Packet_Notice_Stat_CameraStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_CameraStat* Packet_Notice_Stat_CameraStat::default_instance_ = NULL;

Packet_Notice_Stat_CameraStat* Packet_Notice_Stat_CameraStat::New() const {
  return new Packet_Notice_Stat_CameraStat;
}

void Packet_Notice_Stat_CameraStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_cameraid()) {
      if (cameraid_ != NULL) cameraid_->::TvWall::Guid::Clear();
    }
    if (has_cam()) {
      if (cam_ != NULL) cam_->::TvWall::Packet_ElementDat_Camera::Clear();
    }
    if (has_grp()) {
      if (grp_ != NULL) grp_->::TvWall::Packet_ElementDat_CameraGrp::Clear();
    }
  }
  camgrp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_CameraStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.CameraStat.PTZ_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_CameraStat_PTZ_TYPE_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_CameraStat_PTZ_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cameraId;
        break;
      }

      // optional .TvWall.Guid cameraId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_camGrp;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camGrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camgrp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_camGrp;
        if (input->ExpectTag(34)) goto parse_cam;
        break;
      }

      // optional .TvWall.Packet.ElementDat.Camera cam = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_grp;
        break;
      }

      // optional .TvWall.Packet.ElementDat.CameraGrp grp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_CameraStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.CameraStat.PTZ_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .TvWall.Guid cameraId = 2;
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cameraid(), output);
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
  for (int i = 0; i < this->camgrp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->camgrp(i), output);
  }

  // optional .TvWall.Packet.ElementDat.Camera cam = 4;
  if (has_cam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cam(), output);
  }

  // optional .TvWall.Packet.ElementDat.CameraGrp grp = 5;
  if (has_grp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->grp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_CameraStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.CameraStat.PTZ_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .TvWall.Guid cameraId = 2;
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cameraid(), target);
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
  for (int i = 0; i < this->camgrp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->camgrp(i), target);
  }

  // optional .TvWall.Packet.ElementDat.Camera cam = 4;
  if (has_cam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cam(), target);
  }

  // optional .TvWall.Packet.ElementDat.CameraGrp grp = 5;
  if (has_grp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->grp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_CameraStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.CameraStat.PTZ_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .TvWall.Guid cameraId = 2;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameraid());
    }

    // optional .TvWall.Packet.ElementDat.Camera cam = 4;
    if (has_cam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cam());
    }

    // optional .TvWall.Packet.ElementDat.CameraGrp grp = 5;
    if (has_grp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grp());
    }

  }
  // repeated .TvWall.Packet.ElementDat.CameraGrp camGrp = 3;
  total_size += 1 * this->camgrp_size();
  for (int i = 0; i < this->camgrp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camgrp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_CameraStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_CameraStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_CameraStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_CameraStat::MergeFrom(const Packet_Notice_Stat_CameraStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  camgrp_.MergeFrom(from.camgrp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cameraid()) {
      mutable_cameraid()->::TvWall::Guid::MergeFrom(from.cameraid());
    }
    if (from.has_cam()) {
      mutable_cam()->::TvWall::Packet_ElementDat_Camera::MergeFrom(from.cam());
    }
    if (from.has_grp()) {
      mutable_grp()->::TvWall::Packet_ElementDat_CameraGrp::MergeFrom(from.grp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_CameraStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_CameraStat::CopyFrom(const Packet_Notice_Stat_CameraStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_CameraStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_cameraid()) {
    if (!this->cameraid().IsInitialized()) return false;
  }
  for (int i = 0; i < camgrp_size(); i++) {
    if (!this->camgrp(i).IsInitialized()) return false;
  }
  if (has_cam()) {
    if (!this->cam().IsInitialized()) return false;
  }
  if (has_grp()) {
    if (!this->grp().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_CameraStat::Swap(Packet_Notice_Stat_CameraStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cameraid_, other->cameraid_);
    camgrp_.Swap(&other->camgrp_);
    std::swap(cam_, other->cam_);
    std::swap(grp_, other->grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_CameraStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_CameraStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_CameraStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_HotPointStat_HotPointStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_HotPointStat_HotPointStatType_descriptor_;
}
bool Packet_Notice_Stat_HotPointStat_HotPointStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_HotPointStat_HotPointStatType Packet_Notice_Stat_HotPointStat::CREATE;
const Packet_Notice_Stat_HotPointStat_HotPointStatType Packet_Notice_Stat_HotPointStat::REMOVE;
const Packet_Notice_Stat_HotPointStat_HotPointStatType Packet_Notice_Stat_HotPointStat::RESET;
const Packet_Notice_Stat_HotPointStat_HotPointStatType Packet_Notice_Stat_HotPointStat::RESET_SCREEN;
const Packet_Notice_Stat_HotPointStat_HotPointStatType Packet_Notice_Stat_HotPointStat::HotPointStatType_MIN;
const Packet_Notice_Stat_HotPointStat_HotPointStatType Packet_Notice_Stat_HotPointStat::HotPointStatType_MAX;
const int Packet_Notice_Stat_HotPointStat::HotPointStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_HotPointStat::kTypeFieldNumber;
const int Packet_Notice_Stat_HotPointStat::kHotPointFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_HotPointStat::Packet_Notice_Stat_HotPointStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_HotPointStat::InitAsDefaultInstance() {
  hotpoint_ = const_cast< ::TvWall::Packet_ElementDat_HotPoint*>(&::TvWall::Packet_ElementDat_HotPoint::default_instance());
}

Packet_Notice_Stat_HotPointStat::Packet_Notice_Stat_HotPointStat(const Packet_Notice_Stat_HotPointStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_HotPointStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  hotpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_HotPointStat::~Packet_Notice_Stat_HotPointStat() {
  SharedDtor();
}

void Packet_Notice_Stat_HotPointStat::SharedDtor() {
  if (this != default_instance_) {
    delete hotpoint_;
  }
}

void Packet_Notice_Stat_HotPointStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_HotPointStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_HotPointStat_descriptor_;
}

const Packet_Notice_Stat_HotPointStat& Packet_Notice_Stat_HotPointStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_HotPointStat* Packet_Notice_Stat_HotPointStat::default_instance_ = NULL;

Packet_Notice_Stat_HotPointStat* Packet_Notice_Stat_HotPointStat::New() const {
  return new Packet_Notice_Stat_HotPointStat;
}

void Packet_Notice_Stat_HotPointStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_hotpoint()) {
      if (hotpoint_ != NULL) hotpoint_->::TvWall::Packet_ElementDat_HotPoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_HotPointStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.HotPointStat.HotPointStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_HotPointStat_HotPointStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_HotPointStat_HotPointStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hotPoint;
        break;
      }

      // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_HotPointStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.HotPointStat.HotPointStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 2;
  if (has_hotpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hotpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_HotPointStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.HotPointStat.HotPointStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 2;
  if (has_hotpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hotpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_HotPointStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.HotPointStat.HotPointStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .TvWall.Packet.ElementDat.HotPoint hotPoint = 2;
    if (has_hotpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_HotPointStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_HotPointStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_HotPointStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_HotPointStat::MergeFrom(const Packet_Notice_Stat_HotPointStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_hotpoint()) {
      mutable_hotpoint()->::TvWall::Packet_ElementDat_HotPoint::MergeFrom(from.hotpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_HotPointStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_HotPointStat::CopyFrom(const Packet_Notice_Stat_HotPointStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_HotPointStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_hotpoint()) {
    if (!this->hotpoint().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_HotPointStat::Swap(Packet_Notice_Stat_HotPointStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(hotpoint_, other->hotpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_HotPointStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_HotPointStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_HotPointStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_LayoutStat_LayoutStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_LayoutStat_LayoutStatType_descriptor_;
}
bool Packet_Notice_Stat_LayoutStat_LayoutStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_LayoutStat_LayoutStatType Packet_Notice_Stat_LayoutStat::ADD;
const Packet_Notice_Stat_LayoutStat_LayoutStatType Packet_Notice_Stat_LayoutStat::REMOVE;
const Packet_Notice_Stat_LayoutStat_LayoutStatType Packet_Notice_Stat_LayoutStat::USE;
const Packet_Notice_Stat_LayoutStat_LayoutStatType Packet_Notice_Stat_LayoutStat::LayoutStatType_MIN;
const Packet_Notice_Stat_LayoutStat_LayoutStatType Packet_Notice_Stat_LayoutStat::LayoutStatType_MAX;
const int Packet_Notice_Stat_LayoutStat::LayoutStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_LayoutStat::kTypeFieldNumber;
const int Packet_Notice_Stat_LayoutStat::kServLayoutFieldNumber;
const int Packet_Notice_Stat_LayoutStat::kCurrentLayoutFieldNumber;
const int Packet_Notice_Stat_LayoutStat::kDyFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_LayoutStat::Packet_Notice_Stat_LayoutStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_LayoutStat::InitAsDefaultInstance() {
  dy_ = const_cast< ::TvWall::Packet_ElementDat_ServerLayout*>(&::TvWall::Packet_ElementDat_ServerLayout::default_instance());
}

Packet_Notice_Stat_LayoutStat::Packet_Notice_Stat_LayoutStat(const Packet_Notice_Stat_LayoutStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_LayoutStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  currentlayout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_LayoutStat::~Packet_Notice_Stat_LayoutStat() {
  SharedDtor();
}

void Packet_Notice_Stat_LayoutStat::SharedDtor() {
  if (currentlayout_ != &::google::protobuf::internal::kEmptyString) {
    delete currentlayout_;
  }
  if (this != default_instance_) {
    delete dy_;
  }
}

void Packet_Notice_Stat_LayoutStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_LayoutStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_LayoutStat_descriptor_;
}

const Packet_Notice_Stat_LayoutStat& Packet_Notice_Stat_LayoutStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_LayoutStat* Packet_Notice_Stat_LayoutStat::default_instance_ = NULL;

Packet_Notice_Stat_LayoutStat* Packet_Notice_Stat_LayoutStat::New() const {
  return new Packet_Notice_Stat_LayoutStat;
}

void Packet_Notice_Stat_LayoutStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_currentlayout()) {
      if (currentlayout_ != &::google::protobuf::internal::kEmptyString) {
        currentlayout_->clear();
      }
    }
    if (has_dy()) {
      if (dy_ != NULL) dy_->::TvWall::Packet_ElementDat_ServerLayout::Clear();
    }
  }
  servlayout_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_LayoutStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.LayoutStat.LayoutStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_LayoutStat_LayoutStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_LayoutStat_LayoutStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_servLayout;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.ServerLayout servLayout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servLayout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servlayout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_servLayout;
        if (input->ExpectTag(26)) goto parse_currentLayout;
        break;
      }

      // optional string currentLayout = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentLayout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentlayout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentlayout().data(), this->currentlayout().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dy;
        break;
      }

      // optional .TvWall.Packet.ElementDat.ServerLayout dy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_LayoutStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.LayoutStat.LayoutStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .TvWall.Packet.ElementDat.ServerLayout servLayout = 2;
  for (int i = 0; i < this->servlayout_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->servlayout(i), output);
  }

  // optional string currentLayout = 3;
  if (has_currentlayout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentlayout().data(), this->currentlayout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->currentlayout(), output);
  }

  // optional .TvWall.Packet.ElementDat.ServerLayout dy = 4;
  if (has_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_LayoutStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.LayoutStat.LayoutStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .TvWall.Packet.ElementDat.ServerLayout servLayout = 2;
  for (int i = 0; i < this->servlayout_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->servlayout(i), target);
  }

  // optional string currentLayout = 3;
  if (has_currentlayout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentlayout().data(), this->currentlayout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currentlayout(), target);
  }

  // optional .TvWall.Packet.ElementDat.ServerLayout dy = 4;
  if (has_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_LayoutStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.LayoutStat.LayoutStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string currentLayout = 3;
    if (has_currentlayout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentlayout());
    }

    // optional .TvWall.Packet.ElementDat.ServerLayout dy = 4;
    if (has_dy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dy());
    }

  }
  // repeated .TvWall.Packet.ElementDat.ServerLayout servLayout = 2;
  total_size += 1 * this->servlayout_size();
  for (int i = 0; i < this->servlayout_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servlayout(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_LayoutStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_LayoutStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_LayoutStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_LayoutStat::MergeFrom(const Packet_Notice_Stat_LayoutStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  servlayout_.MergeFrom(from.servlayout_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_currentlayout()) {
      set_currentlayout(from.currentlayout());
    }
    if (from.has_dy()) {
      mutable_dy()->::TvWall::Packet_ElementDat_ServerLayout::MergeFrom(from.dy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_LayoutStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_LayoutStat::CopyFrom(const Packet_Notice_Stat_LayoutStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_LayoutStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < servlayout_size(); i++) {
    if (!this->servlayout(i).IsInitialized()) return false;
  }
  if (has_dy()) {
    if (!this->dy().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_LayoutStat::Swap(Packet_Notice_Stat_LayoutStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    servlayout_.Swap(&other->servlayout_);
    std::swap(currentlayout_, other->currentlayout_);
    std::swap(dy_, other->dy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_LayoutStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_LayoutStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_LayoutStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType_descriptor_;
}
bool Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType Packet_Notice_Stat_LayoutLoopStat::ADD;
const Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType Packet_Notice_Stat_LayoutLoopStat::REMOVE;
const Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType Packet_Notice_Stat_LayoutLoopStat::ADD_LAYOUT;
const Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType Packet_Notice_Stat_LayoutLoopStat::USE;
const Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType Packet_Notice_Stat_LayoutLoopStat::SET_LOOP;
const Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType Packet_Notice_Stat_LayoutLoopStat::STOP;
const Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType Packet_Notice_Stat_LayoutLoopStat::LayoutLoopStatType_MIN;
const Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType Packet_Notice_Stat_LayoutLoopStat::LayoutLoopStatType_MAX;
const int Packet_Notice_Stat_LayoutLoopStat::LayoutLoopStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_LayoutLoopStat::kTypeFieldNumber;
const int Packet_Notice_Stat_LayoutLoopStat::kServLayoutLoopFieldNumber;
const int Packet_Notice_Stat_LayoutLoopStat::kCurrentLayoutLoopFieldNumber;
const int Packet_Notice_Stat_LayoutLoopStat::kLoopFieldNumber;
const int Packet_Notice_Stat_LayoutLoopStat::kDyFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_LayoutLoopStat::Packet_Notice_Stat_LayoutLoopStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_LayoutLoopStat::InitAsDefaultInstance() {
  dy_ = const_cast< ::TvWall::Packet_ElementDat_ServerLayoutLoop*>(&::TvWall::Packet_ElementDat_ServerLayoutLoop::default_instance());
}

Packet_Notice_Stat_LayoutLoopStat::Packet_Notice_Stat_LayoutLoopStat(const Packet_Notice_Stat_LayoutLoopStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_LayoutLoopStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  currentlayoutloop_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loop_ = 0u;
  dy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_LayoutLoopStat::~Packet_Notice_Stat_LayoutLoopStat() {
  SharedDtor();
}

void Packet_Notice_Stat_LayoutLoopStat::SharedDtor() {
  if (currentlayoutloop_ != &::google::protobuf::internal::kEmptyString) {
    delete currentlayoutloop_;
  }
  if (this != default_instance_) {
    delete dy_;
  }
}

void Packet_Notice_Stat_LayoutLoopStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_LayoutLoopStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_LayoutLoopStat_descriptor_;
}

const Packet_Notice_Stat_LayoutLoopStat& Packet_Notice_Stat_LayoutLoopStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_LayoutLoopStat* Packet_Notice_Stat_LayoutLoopStat::default_instance_ = NULL;

Packet_Notice_Stat_LayoutLoopStat* Packet_Notice_Stat_LayoutLoopStat::New() const {
  return new Packet_Notice_Stat_LayoutLoopStat;
}

void Packet_Notice_Stat_LayoutLoopStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_currentlayoutloop()) {
      if (currentlayoutloop_ != &::google::protobuf::internal::kEmptyString) {
        currentlayoutloop_->clear();
      }
    }
    loop_ = 0u;
    if (has_dy()) {
      if (dy_ != NULL) dy_->::TvWall::Packet_ElementDat_ServerLayoutLoop::Clear();
    }
  }
  servlayoutloop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_LayoutLoopStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.LayoutLoopStat.LayoutLoopStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_LayoutLoopStat_LayoutLoopStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_servLayoutLoop;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.ServerLayoutLoop servLayoutLoop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servLayoutLoop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servlayoutloop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_servLayoutLoop;
        if (input->ExpectTag(34)) goto parse_currentLayoutLoop;
        break;
      }

      // optional string currentLayoutLoop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentLayoutLoop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentlayoutloop()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentlayoutloop().data(), this->currentlayoutloop().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_loop;
        break;
      }

      // optional uint32 loop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loop_)));
          set_has_loop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dy;
        break;
      }

      // optional .TvWall.Packet.ElementDat.ServerLayoutLoop dy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_LayoutLoopStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.LayoutLoopStat.LayoutLoopStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .TvWall.Packet.ElementDat.ServerLayoutLoop servLayoutLoop = 2;
  for (int i = 0; i < this->servlayoutloop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->servlayoutloop(i), output);
  }

  // optional string currentLayoutLoop = 4;
  if (has_currentlayoutloop()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentlayoutloop().data(), this->currentlayoutloop().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currentlayoutloop(), output);
  }

  // optional uint32 loop = 5;
  if (has_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->loop(), output);
  }

  // optional .TvWall.Packet.ElementDat.ServerLayoutLoop dy = 6;
  if (has_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_LayoutLoopStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.LayoutLoopStat.LayoutLoopStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .TvWall.Packet.ElementDat.ServerLayoutLoop servLayoutLoop = 2;
  for (int i = 0; i < this->servlayoutloop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->servlayoutloop(i), target);
  }

  // optional string currentLayoutLoop = 4;
  if (has_currentlayoutloop()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentlayoutloop().data(), this->currentlayoutloop().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currentlayoutloop(), target);
  }

  // optional uint32 loop = 5;
  if (has_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->loop(), target);
  }

  // optional .TvWall.Packet.ElementDat.ServerLayoutLoop dy = 6;
  if (has_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_LayoutLoopStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.LayoutLoopStat.LayoutLoopStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string currentLayoutLoop = 4;
    if (has_currentlayoutloop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentlayoutloop());
    }

    // optional uint32 loop = 5;
    if (has_loop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loop());
    }

    // optional .TvWall.Packet.ElementDat.ServerLayoutLoop dy = 6;
    if (has_dy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dy());
    }

  }
  // repeated .TvWall.Packet.ElementDat.ServerLayoutLoop servLayoutLoop = 2;
  total_size += 1 * this->servlayoutloop_size();
  for (int i = 0; i < this->servlayoutloop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servlayoutloop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_LayoutLoopStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_LayoutLoopStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_LayoutLoopStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_LayoutLoopStat::MergeFrom(const Packet_Notice_Stat_LayoutLoopStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  servlayoutloop_.MergeFrom(from.servlayoutloop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_currentlayoutloop()) {
      set_currentlayoutloop(from.currentlayoutloop());
    }
    if (from.has_loop()) {
      set_loop(from.loop());
    }
    if (from.has_dy()) {
      mutable_dy()->::TvWall::Packet_ElementDat_ServerLayoutLoop::MergeFrom(from.dy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_LayoutLoopStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_LayoutLoopStat::CopyFrom(const Packet_Notice_Stat_LayoutLoopStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_LayoutLoopStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < servlayoutloop_size(); i++) {
    if (!this->servlayoutloop(i).IsInitialized()) return false;
  }
  if (has_dy()) {
    if (!this->dy().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_LayoutLoopStat::Swap(Packet_Notice_Stat_LayoutLoopStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    servlayoutloop_.Swap(&other->servlayoutloop_);
    std::swap(currentlayoutloop_, other->currentlayoutloop_);
    std::swap(loop_, other->loop_);
    std::swap(dy_, other->dy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_LayoutLoopStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_LayoutLoopStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_LayoutLoopStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_MapGrpStat_MapGrpStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_MapGrpStat_MapGrpStatType_descriptor_;
}
bool Packet_Notice_Stat_MapGrpStat_MapGrpStatType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_MapGrpStat_MapGrpStatType Packet_Notice_Stat_MapGrpStat::RESET;
const Packet_Notice_Stat_MapGrpStat_MapGrpStatType Packet_Notice_Stat_MapGrpStat::MapGrpStatType_MIN;
const Packet_Notice_Stat_MapGrpStat_MapGrpStatType Packet_Notice_Stat_MapGrpStat::MapGrpStatType_MAX;
const int Packet_Notice_Stat_MapGrpStat::MapGrpStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_MapGrpStat::kTypeFieldNumber;
const int Packet_Notice_Stat_MapGrpStat::kMapGrpFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_MapGrpStat::Packet_Notice_Stat_MapGrpStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_MapGrpStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_MapGrpStat::Packet_Notice_Stat_MapGrpStat(const Packet_Notice_Stat_MapGrpStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_MapGrpStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_MapGrpStat::~Packet_Notice_Stat_MapGrpStat() {
  SharedDtor();
}

void Packet_Notice_Stat_MapGrpStat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_MapGrpStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_MapGrpStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_MapGrpStat_descriptor_;
}

const Packet_Notice_Stat_MapGrpStat& Packet_Notice_Stat_MapGrpStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_MapGrpStat* Packet_Notice_Stat_MapGrpStat::default_instance_ = NULL;

Packet_Notice_Stat_MapGrpStat* Packet_Notice_Stat_MapGrpStat::New() const {
  return new Packet_Notice_Stat_MapGrpStat;
}

void Packet_Notice_Stat_MapGrpStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  mapgrp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_MapGrpStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.MapGrpStat.MapGrpStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_MapGrpStat_MapGrpStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_MapGrpStat_MapGrpStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mapGrp;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.Map mapGrp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapGrp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapgrp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mapGrp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_MapGrpStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.MapGrpStat.MapGrpStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .TvWall.Packet.ElementDat.Map mapGrp = 2;
  for (int i = 0; i < this->mapgrp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mapgrp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_MapGrpStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.MapGrpStat.MapGrpStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .TvWall.Packet.ElementDat.Map mapGrp = 2;
  for (int i = 0; i < this->mapgrp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mapgrp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_MapGrpStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.MapGrpStat.MapGrpStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .TvWall.Packet.ElementDat.Map mapGrp = 2;
  total_size += 1 * this->mapgrp_size();
  for (int i = 0; i < this->mapgrp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapgrp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_MapGrpStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_MapGrpStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_MapGrpStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_MapGrpStat::MergeFrom(const Packet_Notice_Stat_MapGrpStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapgrp_.MergeFrom(from.mapgrp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_MapGrpStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_MapGrpStat::CopyFrom(const Packet_Notice_Stat_MapGrpStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_MapGrpStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mapgrp_size(); i++) {
    if (!this->mapgrp(i).IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_MapGrpStat::Swap(Packet_Notice_Stat_MapGrpStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    mapgrp_.Swap(&other->mapgrp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_MapGrpStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_MapGrpStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_MapGrpStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Notice_Stat_ErrorStat::kErrorFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_ErrorStat::Packet_Notice_Stat_ErrorStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_ErrorStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_ErrorStat::Packet_Notice_Stat_ErrorStat(const Packet_Notice_Stat_ErrorStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_ErrorStat::SharedCtor() {
  _cached_size_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_ErrorStat::~Packet_Notice_Stat_ErrorStat() {
  SharedDtor();
}

void Packet_Notice_Stat_ErrorStat::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_ErrorStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_ErrorStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_ErrorStat_descriptor_;
}

const Packet_Notice_Stat_ErrorStat& Packet_Notice_Stat_ErrorStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_ErrorStat* Packet_Notice_Stat_ErrorStat::default_instance_ = NULL;

Packet_Notice_Stat_ErrorStat* Packet_Notice_Stat_ErrorStat::New() const {
  return new Packet_Notice_Stat_ErrorStat;
}

void Packet_Notice_Stat_ErrorStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_ErrorStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_ErrorStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_ErrorStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_ErrorStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_ErrorStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_ErrorStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_ErrorStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_ErrorStat::MergeFrom(const Packet_Notice_Stat_ErrorStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_ErrorStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_ErrorStat::CopyFrom(const Packet_Notice_Stat_ErrorStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_ErrorStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Packet_Notice_Stat_ErrorStat::Swap(Packet_Notice_Stat_ErrorStat* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_ErrorStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_ErrorStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_ErrorStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Notice_Stat_KeyboardSelectedStat::kScreenIdFieldNumber;
const int Packet_Notice_Stat_KeyboardSelectedStat::kCameraIdFieldNumber;
const int Packet_Notice_Stat_KeyboardSelectedStat::kCellidFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_KeyboardSelectedStat::Packet_Notice_Stat_KeyboardSelectedStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_KeyboardSelectedStat::InitAsDefaultInstance() {
  cameraid_ = const_cast< ::TvWall::Guid*>(&::TvWall::Guid::default_instance());
}

Packet_Notice_Stat_KeyboardSelectedStat::Packet_Notice_Stat_KeyboardSelectedStat(const Packet_Notice_Stat_KeyboardSelectedStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_KeyboardSelectedStat::SharedCtor() {
  _cached_size_ = 0;
  screenid_ = 0;
  cameraid_ = NULL;
  cellid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_KeyboardSelectedStat::~Packet_Notice_Stat_KeyboardSelectedStat() {
  SharedDtor();
}

void Packet_Notice_Stat_KeyboardSelectedStat::SharedDtor() {
  if (this != default_instance_) {
    delete cameraid_;
  }
}

void Packet_Notice_Stat_KeyboardSelectedStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_KeyboardSelectedStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_KeyboardSelectedStat_descriptor_;
}

const Packet_Notice_Stat_KeyboardSelectedStat& Packet_Notice_Stat_KeyboardSelectedStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_KeyboardSelectedStat* Packet_Notice_Stat_KeyboardSelectedStat::default_instance_ = NULL;

Packet_Notice_Stat_KeyboardSelectedStat* Packet_Notice_Stat_KeyboardSelectedStat::New() const {
  return new Packet_Notice_Stat_KeyboardSelectedStat;
}

void Packet_Notice_Stat_KeyboardSelectedStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    screenid_ = 0;
    if (has_cameraid()) {
      if (cameraid_ != NULL) cameraid_->::TvWall::Guid::Clear();
    }
    cellid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_KeyboardSelectedStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 screenId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screenid_)));
          set_has_screenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cameraId;
        break;
      }

      // required .TvWall.Guid cameraId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cellid;
        break;
      }

      // required int32 cellid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_KeyboardSelectedStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 screenId = 1;
  if (has_screenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->screenid(), output);
  }

  // required .TvWall.Guid cameraId = 2;
  if (has_cameraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cameraid(), output);
  }

  // required int32 cellid = 3;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cellid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_KeyboardSelectedStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 screenId = 1;
  if (has_screenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->screenid(), target);
  }

  // required .TvWall.Guid cameraId = 2;
  if (has_cameraid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cameraid(), target);
  }

  // required int32 cellid = 3;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cellid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_KeyboardSelectedStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 screenId = 1;
    if (has_screenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screenid());
    }

    // required .TvWall.Guid cameraId = 2;
    if (has_cameraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameraid());
    }

    // required int32 cellid = 3;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_KeyboardSelectedStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_KeyboardSelectedStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_KeyboardSelectedStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_KeyboardSelectedStat::MergeFrom(const Packet_Notice_Stat_KeyboardSelectedStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenid()) {
      set_screenid(from.screenid());
    }
    if (from.has_cameraid()) {
      mutable_cameraid()->::TvWall::Guid::MergeFrom(from.cameraid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_KeyboardSelectedStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_KeyboardSelectedStat::CopyFrom(const Packet_Notice_Stat_KeyboardSelectedStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_KeyboardSelectedStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_cameraid()) {
    if (!this->cameraid().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_KeyboardSelectedStat::Swap(Packet_Notice_Stat_KeyboardSelectedStat* other) {
  if (other != this) {
    std::swap(screenid_, other->screenid_);
    std::swap(cameraid_, other->cameraid_);
    std::swap(cellid_, other->cellid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_KeyboardSelectedStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_KeyboardSelectedStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_KeyboardSelectedStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Notice_Stat_AlarmStat::kAlarmSourceFieldNumber;
const int Packet_Notice_Stat_AlarmStat::kAlarmClearFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_AlarmStat::Packet_Notice_Stat_AlarmStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_AlarmStat::InitAsDefaultInstance() {
}

Packet_Notice_Stat_AlarmStat::Packet_Notice_Stat_AlarmStat(const Packet_Notice_Stat_AlarmStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_AlarmStat::SharedCtor() {
  _cached_size_ = 0;
  alarmsource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alarmclear_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_AlarmStat::~Packet_Notice_Stat_AlarmStat() {
  SharedDtor();
}

void Packet_Notice_Stat_AlarmStat::SharedDtor() {
  if (alarmsource_ != &::google::protobuf::internal::kEmptyString) {
    delete alarmsource_;
  }
  if (this != default_instance_) {
  }
}

void Packet_Notice_Stat_AlarmStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_AlarmStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_AlarmStat_descriptor_;
}

const Packet_Notice_Stat_AlarmStat& Packet_Notice_Stat_AlarmStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_AlarmStat* Packet_Notice_Stat_AlarmStat::default_instance_ = NULL;

Packet_Notice_Stat_AlarmStat* Packet_Notice_Stat_AlarmStat::New() const {
  return new Packet_Notice_Stat_AlarmStat;
}

void Packet_Notice_Stat_AlarmStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alarmsource()) {
      if (alarmsource_ != &::google::protobuf::internal::kEmptyString) {
        alarmsource_->clear();
      }
    }
    alarmclear_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_AlarmStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string alarmSource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmsource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alarmsource().data(), this->alarmsource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_alarmClear;
        break;
      }

      // required bool alarmClear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alarmClear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alarmclear_)));
          set_has_alarmclear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_AlarmStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string alarmSource = 1;
  if (has_alarmsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmsource().data(), this->alarmsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->alarmsource(), output);
  }

  // required bool alarmClear = 2;
  if (has_alarmclear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->alarmclear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_AlarmStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string alarmSource = 1;
  if (has_alarmsource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alarmsource().data(), this->alarmsource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alarmsource(), target);
  }

  // required bool alarmClear = 2;
  if (has_alarmclear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->alarmclear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_AlarmStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string alarmSource = 1;
    if (has_alarmsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alarmsource());
    }

    // required bool alarmClear = 2;
    if (has_alarmclear()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_AlarmStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_AlarmStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_AlarmStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_AlarmStat::MergeFrom(const Packet_Notice_Stat_AlarmStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarmsource()) {
      set_alarmsource(from.alarmsource());
    }
    if (from.has_alarmclear()) {
      set_alarmclear(from.alarmclear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_AlarmStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_AlarmStat::CopyFrom(const Packet_Notice_Stat_AlarmStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_AlarmStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Packet_Notice_Stat_AlarmStat::Swap(Packet_Notice_Stat_AlarmStat* other) {
  if (other != this) {
    std::swap(alarmsource_, other->alarmsource_);
    std::swap(alarmclear_, other->alarmclear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_AlarmStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_AlarmStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_AlarmStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType_descriptor_;
}
bool Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType Packet_Notice_Stat_GroupLoopStat::ALL;
const Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType Packet_Notice_Stat_GroupLoopStat::FOCUS_AREA;
const Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType Packet_Notice_Stat_GroupLoopStat::RESET_VIEWS;
const Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType Packet_Notice_Stat_GroupLoopStat::LOOP_TIME;
const Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType Packet_Notice_Stat_GroupLoopStat::ACTIVED;
const Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType Packet_Notice_Stat_GroupLoopStat::GroupLoopStatType_MIN;
const Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType Packet_Notice_Stat_GroupLoopStat::GroupLoopStatType_MAX;
const int Packet_Notice_Stat_GroupLoopStat::GroupLoopStatType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Packet_Notice_Stat_GroupLoopStat::kTypeFieldNumber;
const int Packet_Notice_Stat_GroupLoopStat::kGroupLoopFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat_GroupLoopStat::Packet_Notice_Stat_GroupLoopStat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat_GroupLoopStat::InitAsDefaultInstance() {
  grouploop_ = const_cast< ::TvWall::Packet_ElementDat_GroupLoop*>(&::TvWall::Packet_ElementDat_GroupLoop::default_instance());
}

Packet_Notice_Stat_GroupLoopStat::Packet_Notice_Stat_GroupLoopStat(const Packet_Notice_Stat_GroupLoopStat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat_GroupLoopStat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  grouploop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat_GroupLoopStat::~Packet_Notice_Stat_GroupLoopStat() {
  SharedDtor();
}

void Packet_Notice_Stat_GroupLoopStat::SharedDtor() {
  if (this != default_instance_) {
    delete grouploop_;
  }
}

void Packet_Notice_Stat_GroupLoopStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat_GroupLoopStat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_GroupLoopStat_descriptor_;
}

const Packet_Notice_Stat_GroupLoopStat& Packet_Notice_Stat_GroupLoopStat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat_GroupLoopStat* Packet_Notice_Stat_GroupLoopStat::default_instance_ = NULL;

Packet_Notice_Stat_GroupLoopStat* Packet_Notice_Stat_GroupLoopStat::New() const {
  return new Packet_Notice_Stat_GroupLoopStat;
}

void Packet_Notice_Stat_GroupLoopStat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_grouploop()) {
      if (grouploop_ != NULL) grouploop_->::TvWall::Packet_ElementDat_GroupLoop::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat_GroupLoopStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.Stat.GroupLoopStat.GroupLoopStatType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TvWall::Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType_IsValid(value)) {
            set_type(static_cast< ::TvWall::Packet_Notice_Stat_GroupLoopStat_GroupLoopStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupLoop;
        break;
      }

      // required .TvWall.Packet.ElementDat.GroupLoop groupLoop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupLoop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grouploop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat_GroupLoopStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.Stat.GroupLoopStat.GroupLoopStatType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .TvWall.Packet.ElementDat.GroupLoop groupLoop = 2;
  if (has_grouploop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->grouploop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat_GroupLoopStat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.Stat.GroupLoopStat.GroupLoopStatType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .TvWall.Packet.ElementDat.GroupLoop groupLoop = 2;
  if (has_grouploop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->grouploop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat_GroupLoopStat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.Stat.GroupLoopStat.GroupLoopStatType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .TvWall.Packet.ElementDat.GroupLoop groupLoop = 2;
    if (has_grouploop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grouploop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat_GroupLoopStat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat_GroupLoopStat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat_GroupLoopStat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat_GroupLoopStat::MergeFrom(const Packet_Notice_Stat_GroupLoopStat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_grouploop()) {
      mutable_grouploop()->::TvWall::Packet_ElementDat_GroupLoop::MergeFrom(from.grouploop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat_GroupLoopStat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat_GroupLoopStat::CopyFrom(const Packet_Notice_Stat_GroupLoopStat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat_GroupLoopStat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_grouploop()) {
    if (!this->grouploop().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat_GroupLoopStat::Swap(Packet_Notice_Stat_GroupLoopStat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(grouploop_, other->grouploop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat_GroupLoopStat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_GroupLoopStat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_GroupLoopStat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Notice_Stat::kViewStatFieldNumber;
const int Packet_Notice_Stat::kCameraStatFieldNumber;
const int Packet_Notice_Stat::kHotPointStatFieldNumber;
const int Packet_Notice_Stat::kLyoutStatFieldNumber;
const int Packet_Notice_Stat::kScreenStatFieldNumber;
const int Packet_Notice_Stat::kMapGrpStatFieldNumber;
const int Packet_Notice_Stat::kLyoutLoopStatFieldNumber;
const int Packet_Notice_Stat::kErrStatFieldNumber;
const int Packet_Notice_Stat::kKeyboardSelectedStatFieldNumber;
const int Packet_Notice_Stat::kAlarmStatFieldNumber;
const int Packet_Notice_Stat::kGroupLoopStatFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_Stat::Packet_Notice_Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_Stat::InitAsDefaultInstance() {
  viewstat_ = const_cast< ::TvWall::Packet_Notice_Stat_ViewStat*>(&::TvWall::Packet_Notice_Stat_ViewStat::default_instance());
  camerastat_ = const_cast< ::TvWall::Packet_Notice_Stat_CameraStat*>(&::TvWall::Packet_Notice_Stat_CameraStat::default_instance());
  hotpointstat_ = const_cast< ::TvWall::Packet_Notice_Stat_HotPointStat*>(&::TvWall::Packet_Notice_Stat_HotPointStat::default_instance());
  lyoutstat_ = const_cast< ::TvWall::Packet_Notice_Stat_LayoutStat*>(&::TvWall::Packet_Notice_Stat_LayoutStat::default_instance());
  screenstat_ = const_cast< ::TvWall::Packet_Notice_Stat_ScreenSpliStat*>(&::TvWall::Packet_Notice_Stat_ScreenSpliStat::default_instance());
  mapgrpstat_ = const_cast< ::TvWall::Packet_Notice_Stat_MapGrpStat*>(&::TvWall::Packet_Notice_Stat_MapGrpStat::default_instance());
  lyoutloopstat_ = const_cast< ::TvWall::Packet_Notice_Stat_LayoutLoopStat*>(&::TvWall::Packet_Notice_Stat_LayoutLoopStat::default_instance());
  errstat_ = const_cast< ::TvWall::Packet_Notice_Stat_ErrorStat*>(&::TvWall::Packet_Notice_Stat_ErrorStat::default_instance());
  keyboardselectedstat_ = const_cast< ::TvWall::Packet_Notice_Stat_KeyboardSelectedStat*>(&::TvWall::Packet_Notice_Stat_KeyboardSelectedStat::default_instance());
  alarmstat_ = const_cast< ::TvWall::Packet_Notice_Stat_AlarmStat*>(&::TvWall::Packet_Notice_Stat_AlarmStat::default_instance());
  grouploopstat_ = const_cast< ::TvWall::Packet_Notice_Stat_GroupLoopStat*>(&::TvWall::Packet_Notice_Stat_GroupLoopStat::default_instance());
}

Packet_Notice_Stat::Packet_Notice_Stat(const Packet_Notice_Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_Stat::SharedCtor() {
  _cached_size_ = 0;
  viewstat_ = NULL;
  camerastat_ = NULL;
  hotpointstat_ = NULL;
  lyoutstat_ = NULL;
  screenstat_ = NULL;
  mapgrpstat_ = NULL;
  lyoutloopstat_ = NULL;
  errstat_ = NULL;
  keyboardselectedstat_ = NULL;
  alarmstat_ = NULL;
  grouploopstat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_Stat::~Packet_Notice_Stat() {
  SharedDtor();
}

void Packet_Notice_Stat::SharedDtor() {
  if (this != default_instance_) {
    delete viewstat_;
    delete camerastat_;
    delete hotpointstat_;
    delete lyoutstat_;
    delete screenstat_;
    delete mapgrpstat_;
    delete lyoutloopstat_;
    delete errstat_;
    delete keyboardselectedstat_;
    delete alarmstat_;
    delete grouploopstat_;
  }
}

void Packet_Notice_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_Stat_descriptor_;
}

const Packet_Notice_Stat& Packet_Notice_Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_Stat* Packet_Notice_Stat::default_instance_ = NULL;

Packet_Notice_Stat* Packet_Notice_Stat::New() const {
  return new Packet_Notice_Stat;
}

void Packet_Notice_Stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_viewstat()) {
      if (viewstat_ != NULL) viewstat_->::TvWall::Packet_Notice_Stat_ViewStat::Clear();
    }
    if (has_camerastat()) {
      if (camerastat_ != NULL) camerastat_->::TvWall::Packet_Notice_Stat_CameraStat::Clear();
    }
    if (has_hotpointstat()) {
      if (hotpointstat_ != NULL) hotpointstat_->::TvWall::Packet_Notice_Stat_HotPointStat::Clear();
    }
    if (has_lyoutstat()) {
      if (lyoutstat_ != NULL) lyoutstat_->::TvWall::Packet_Notice_Stat_LayoutStat::Clear();
    }
    if (has_screenstat()) {
      if (screenstat_ != NULL) screenstat_->::TvWall::Packet_Notice_Stat_ScreenSpliStat::Clear();
    }
    if (has_mapgrpstat()) {
      if (mapgrpstat_ != NULL) mapgrpstat_->::TvWall::Packet_Notice_Stat_MapGrpStat::Clear();
    }
    if (has_lyoutloopstat()) {
      if (lyoutloopstat_ != NULL) lyoutloopstat_->::TvWall::Packet_Notice_Stat_LayoutLoopStat::Clear();
    }
    if (has_errstat()) {
      if (errstat_ != NULL) errstat_->::TvWall::Packet_Notice_Stat_ErrorStat::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_keyboardselectedstat()) {
      if (keyboardselectedstat_ != NULL) keyboardselectedstat_->::TvWall::Packet_Notice_Stat_KeyboardSelectedStat::Clear();
    }
    if (has_alarmstat()) {
      if (alarmstat_ != NULL) alarmstat_->::TvWall::Packet_Notice_Stat_AlarmStat::Clear();
    }
    if (has_grouploopstat()) {
      if (grouploopstat_ != NULL) grouploopstat_->::TvWall::Packet_Notice_Stat_GroupLoopStat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TvWall.Packet.Notice.Stat.ViewStat viewStat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cameraStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.CameraStat cameraStat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camerastat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hotPointStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.HotPointStat hotPointStat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotPointStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotpointstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lyoutStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.LayoutStat lyoutStat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lyoutStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lyoutstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_screenStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.ScreenSpliStat screenStat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screenStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screenstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mapGrpStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.MapGrpStat mapGrpStat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapGrpStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapgrpstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_lyoutLoopStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.LayoutLoopStat lyoutLoopStat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lyoutLoopStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lyoutloopstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_errStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.ErrorStat errStat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_keyboardSelectedStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.KeyboardSelectedStat keyboardSelectedStat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyboardSelectedStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keyboardselectedstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_alarmStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.AlarmStat alarmStat = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alarmStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarmstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_groupLoopStat;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat.GroupLoopStat groupLoopStat = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupLoopStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grouploopstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TvWall.Packet.Notice.Stat.ViewStat viewStat = 1;
  if (has_viewstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->viewstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.CameraStat cameraStat = 2;
  if (has_camerastat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->camerastat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.HotPointStat hotPointStat = 3;
  if (has_hotpointstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hotpointstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.LayoutStat lyoutStat = 4;
  if (has_lyoutstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lyoutstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.ScreenSpliStat screenStat = 5;
  if (has_screenstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->screenstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.MapGrpStat mapGrpStat = 6;
  if (has_mapgrpstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mapgrpstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.LayoutLoopStat lyoutLoopStat = 7;
  if (has_lyoutloopstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->lyoutloopstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.ErrorStat errStat = 8;
  if (has_errstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->errstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.KeyboardSelectedStat keyboardSelectedStat = 9;
  if (has_keyboardselectedstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->keyboardselectedstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.AlarmStat alarmStat = 10;
  if (has_alarmstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->alarmstat(), output);
  }

  // optional .TvWall.Packet.Notice.Stat.GroupLoopStat groupLoopStat = 11;
  if (has_grouploopstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->grouploopstat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TvWall.Packet.Notice.Stat.ViewStat viewStat = 1;
  if (has_viewstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->viewstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.CameraStat cameraStat = 2;
  if (has_camerastat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->camerastat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.HotPointStat hotPointStat = 3;
  if (has_hotpointstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hotpointstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.LayoutStat lyoutStat = 4;
  if (has_lyoutstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lyoutstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.ScreenSpliStat screenStat = 5;
  if (has_screenstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->screenstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.MapGrpStat mapGrpStat = 6;
  if (has_mapgrpstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mapgrpstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.LayoutLoopStat lyoutLoopStat = 7;
  if (has_lyoutloopstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->lyoutloopstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.ErrorStat errStat = 8;
  if (has_errstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->errstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.KeyboardSelectedStat keyboardSelectedStat = 9;
  if (has_keyboardselectedstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->keyboardselectedstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.AlarmStat alarmStat = 10;
  if (has_alarmstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->alarmstat(), target);
  }

  // optional .TvWall.Packet.Notice.Stat.GroupLoopStat groupLoopStat = 11;
  if (has_grouploopstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->grouploopstat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TvWall.Packet.Notice.Stat.ViewStat viewStat = 1;
    if (has_viewstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->viewstat());
    }

    // optional .TvWall.Packet.Notice.Stat.CameraStat cameraStat = 2;
    if (has_camerastat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camerastat());
    }

    // optional .TvWall.Packet.Notice.Stat.HotPointStat hotPointStat = 3;
    if (has_hotpointstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotpointstat());
    }

    // optional .TvWall.Packet.Notice.Stat.LayoutStat lyoutStat = 4;
    if (has_lyoutstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lyoutstat());
    }

    // optional .TvWall.Packet.Notice.Stat.ScreenSpliStat screenStat = 5;
    if (has_screenstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screenstat());
    }

    // optional .TvWall.Packet.Notice.Stat.MapGrpStat mapGrpStat = 6;
    if (has_mapgrpstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapgrpstat());
    }

    // optional .TvWall.Packet.Notice.Stat.LayoutLoopStat lyoutLoopStat = 7;
    if (has_lyoutloopstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lyoutloopstat());
    }

    // optional .TvWall.Packet.Notice.Stat.ErrorStat errStat = 8;
    if (has_errstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errstat());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .TvWall.Packet.Notice.Stat.KeyboardSelectedStat keyboardSelectedStat = 9;
    if (has_keyboardselectedstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keyboardselectedstat());
    }

    // optional .TvWall.Packet.Notice.Stat.AlarmStat alarmStat = 10;
    if (has_alarmstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarmstat());
    }

    // optional .TvWall.Packet.Notice.Stat.GroupLoopStat groupLoopStat = 11;
    if (has_grouploopstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grouploopstat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_Stat::MergeFrom(const Packet_Notice_Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewstat()) {
      mutable_viewstat()->::TvWall::Packet_Notice_Stat_ViewStat::MergeFrom(from.viewstat());
    }
    if (from.has_camerastat()) {
      mutable_camerastat()->::TvWall::Packet_Notice_Stat_CameraStat::MergeFrom(from.camerastat());
    }
    if (from.has_hotpointstat()) {
      mutable_hotpointstat()->::TvWall::Packet_Notice_Stat_HotPointStat::MergeFrom(from.hotpointstat());
    }
    if (from.has_lyoutstat()) {
      mutable_lyoutstat()->::TvWall::Packet_Notice_Stat_LayoutStat::MergeFrom(from.lyoutstat());
    }
    if (from.has_screenstat()) {
      mutable_screenstat()->::TvWall::Packet_Notice_Stat_ScreenSpliStat::MergeFrom(from.screenstat());
    }
    if (from.has_mapgrpstat()) {
      mutable_mapgrpstat()->::TvWall::Packet_Notice_Stat_MapGrpStat::MergeFrom(from.mapgrpstat());
    }
    if (from.has_lyoutloopstat()) {
      mutable_lyoutloopstat()->::TvWall::Packet_Notice_Stat_LayoutLoopStat::MergeFrom(from.lyoutloopstat());
    }
    if (from.has_errstat()) {
      mutable_errstat()->::TvWall::Packet_Notice_Stat_ErrorStat::MergeFrom(from.errstat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_keyboardselectedstat()) {
      mutable_keyboardselectedstat()->::TvWall::Packet_Notice_Stat_KeyboardSelectedStat::MergeFrom(from.keyboardselectedstat());
    }
    if (from.has_alarmstat()) {
      mutable_alarmstat()->::TvWall::Packet_Notice_Stat_AlarmStat::MergeFrom(from.alarmstat());
    }
    if (from.has_grouploopstat()) {
      mutable_grouploopstat()->::TvWall::Packet_Notice_Stat_GroupLoopStat::MergeFrom(from.grouploopstat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_Stat::CopyFrom(const Packet_Notice_Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_Stat::IsInitialized() const {

  if (has_viewstat()) {
    if (!this->viewstat().IsInitialized()) return false;
  }
  if (has_camerastat()) {
    if (!this->camerastat().IsInitialized()) return false;
  }
  if (has_hotpointstat()) {
    if (!this->hotpointstat().IsInitialized()) return false;
  }
  if (has_lyoutstat()) {
    if (!this->lyoutstat().IsInitialized()) return false;
  }
  if (has_screenstat()) {
    if (!this->screenstat().IsInitialized()) return false;
  }
  if (has_mapgrpstat()) {
    if (!this->mapgrpstat().IsInitialized()) return false;
  }
  if (has_lyoutloopstat()) {
    if (!this->lyoutloopstat().IsInitialized()) return false;
  }
  if (has_errstat()) {
    if (!this->errstat().IsInitialized()) return false;
  }
  if (has_keyboardselectedstat()) {
    if (!this->keyboardselectedstat().IsInitialized()) return false;
  }
  if (has_alarmstat()) {
    if (!this->alarmstat().IsInitialized()) return false;
  }
  if (has_grouploopstat()) {
    if (!this->grouploopstat().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_Stat::Swap(Packet_Notice_Stat* other) {
  if (other != this) {
    std::swap(viewstat_, other->viewstat_);
    std::swap(camerastat_, other->camerastat_);
    std::swap(hotpointstat_, other->hotpointstat_);
    std::swap(lyoutstat_, other->lyoutstat_);
    std::swap(screenstat_, other->screenstat_);
    std::swap(mapgrpstat_, other->mapgrpstat_);
    std::swap(lyoutloopstat_, other->lyoutloopstat_);
    std::swap(errstat_, other->errstat_);
    std::swap(keyboardselectedstat_, other->keyboardselectedstat_);
    std::swap(alarmstat_, other->alarmstat_);
    std::swap(grouploopstat_, other->grouploopstat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_Stat_descriptor_;
  metadata.reflection = Packet_Notice_Stat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Notice_NoticeMaster_NoticeMasterLyout::kMasterLayoutFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_NoticeMaster_NoticeMasterLyout::Packet_Notice_NoticeMaster_NoticeMasterLyout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::InitAsDefaultInstance() {
  masterlayout_ = const_cast< ::TvWall::Packet_ElementMaster_MasterLayout*>(&::TvWall::Packet_ElementMaster_MasterLayout::default_instance());
}

Packet_Notice_NoticeMaster_NoticeMasterLyout::Packet_Notice_NoticeMaster_NoticeMasterLyout(const Packet_Notice_NoticeMaster_NoticeMasterLyout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::SharedCtor() {
  _cached_size_ = 0;
  masterlayout_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_NoticeMaster_NoticeMasterLyout::~Packet_Notice_NoticeMaster_NoticeMasterLyout() {
  SharedDtor();
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::SharedDtor() {
  if (this != default_instance_) {
    delete masterlayout_;
  }
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_NoticeMaster_NoticeMasterLyout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_NoticeMaster_NoticeMasterLyout_descriptor_;
}

const Packet_Notice_NoticeMaster_NoticeMasterLyout& Packet_Notice_NoticeMaster_NoticeMasterLyout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_NoticeMaster_NoticeMasterLyout* Packet_Notice_NoticeMaster_NoticeMasterLyout::default_instance_ = NULL;

Packet_Notice_NoticeMaster_NoticeMasterLyout* Packet_Notice_NoticeMaster_NoticeMasterLyout::New() const {
  return new Packet_Notice_NoticeMaster_NoticeMasterLyout;
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_masterlayout()) {
      if (masterlayout_ != NULL) masterlayout_->::TvWall::Packet_ElementMaster_MasterLayout::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_NoticeMaster_NoticeMasterLyout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.ElementMaster.MasterLayout masterLayout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_masterlayout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.ElementMaster.MasterLayout masterLayout = 1;
  if (has_masterlayout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->masterlayout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_NoticeMaster_NoticeMasterLyout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.ElementMaster.MasterLayout masterLayout = 1;
  if (has_masterlayout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->masterlayout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_NoticeMaster_NoticeMasterLyout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.ElementMaster.MasterLayout masterLayout = 1;
    if (has_masterlayout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->masterlayout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_NoticeMaster_NoticeMasterLyout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_NoticeMaster_NoticeMasterLyout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::MergeFrom(const Packet_Notice_NoticeMaster_NoticeMasterLyout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_masterlayout()) {
      mutable_masterlayout()->::TvWall::Packet_ElementMaster_MasterLayout::MergeFrom(from.masterlayout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::CopyFrom(const Packet_Notice_NoticeMaster_NoticeMasterLyout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_NoticeMaster_NoticeMasterLyout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_masterlayout()) {
    if (!this->masterlayout().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_NoticeMaster_NoticeMasterLyout::Swap(Packet_Notice_NoticeMaster_NoticeMasterLyout* other) {
  if (other != this) {
    std::swap(masterlayout_, other->masterlayout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_NoticeMaster_NoticeMasterLyout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_NoticeMaster_NoticeMasterLyout_descriptor_;
  metadata.reflection = Packet_Notice_NoticeMaster_NoticeMasterLyout_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Notice_NoticeMaster::kNmlyoutFieldNumber;
#endif  // !_MSC_VER

Packet_Notice_NoticeMaster::Packet_Notice_NoticeMaster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice_NoticeMaster::InitAsDefaultInstance() {
  nmlyout_ = const_cast< ::TvWall::Packet_Notice_NoticeMaster_NoticeMasterLyout*>(&::TvWall::Packet_Notice_NoticeMaster_NoticeMasterLyout::default_instance());
}

Packet_Notice_NoticeMaster::Packet_Notice_NoticeMaster(const Packet_Notice_NoticeMaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice_NoticeMaster::SharedCtor() {
  _cached_size_ = 0;
  nmlyout_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice_NoticeMaster::~Packet_Notice_NoticeMaster() {
  SharedDtor();
}

void Packet_Notice_NoticeMaster::SharedDtor() {
  if (this != default_instance_) {
    delete nmlyout_;
  }
}

void Packet_Notice_NoticeMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice_NoticeMaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_NoticeMaster_descriptor_;
}

const Packet_Notice_NoticeMaster& Packet_Notice_NoticeMaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice_NoticeMaster* Packet_Notice_NoticeMaster::default_instance_ = NULL;

Packet_Notice_NoticeMaster* Packet_Notice_NoticeMaster::New() const {
  return new Packet_Notice_NoticeMaster;
}

void Packet_Notice_NoticeMaster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nmlyout()) {
      if (nmlyout_ != NULL) nmlyout_->::TvWall::Packet_Notice_NoticeMaster_NoticeMasterLyout::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice_NoticeMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .TvWall.Packet.Notice.NoticeMaster.NoticeMasterLyout nmlyout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nmlyout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice_NoticeMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .TvWall.Packet.Notice.NoticeMaster.NoticeMasterLyout nmlyout = 1;
  if (has_nmlyout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nmlyout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice_NoticeMaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .TvWall.Packet.Notice.NoticeMaster.NoticeMasterLyout nmlyout = 1;
  if (has_nmlyout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nmlyout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice_NoticeMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .TvWall.Packet.Notice.NoticeMaster.NoticeMasterLyout nmlyout = 1;
    if (has_nmlyout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nmlyout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice_NoticeMaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice_NoticeMaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice_NoticeMaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice_NoticeMaster::MergeFrom(const Packet_Notice_NoticeMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nmlyout()) {
      mutable_nmlyout()->::TvWall::Packet_Notice_NoticeMaster_NoticeMasterLyout::MergeFrom(from.nmlyout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice_NoticeMaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice_NoticeMaster::CopyFrom(const Packet_Notice_NoticeMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice_NoticeMaster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_nmlyout()) {
    if (!this->nmlyout().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice_NoticeMaster::Swap(Packet_Notice_NoticeMaster* other) {
  if (other != this) {
    std::swap(nmlyout_, other->nmlyout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice_NoticeMaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_NoticeMaster_descriptor_;
  metadata.reflection = Packet_Notice_NoticeMaster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet_Notice::kScreenInfoFieldNumber;
const int Packet_Notice::kStatInfoFieldNumber;
const int Packet_Notice::kCameraGrpInfoFieldNumber;
const int Packet_Notice::kMasterStatFieldNumber;
#endif  // !_MSC_VER

Packet_Notice::Packet_Notice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet_Notice::InitAsDefaultInstance() {
  statinfo_ = const_cast< ::TvWall::Packet_Notice_Stat*>(&::TvWall::Packet_Notice_Stat::default_instance());
  masterstat_ = const_cast< ::TvWall::Packet_Notice_NoticeMaster*>(&::TvWall::Packet_Notice_NoticeMaster::default_instance());
}

Packet_Notice::Packet_Notice(const Packet_Notice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet_Notice::SharedCtor() {
  _cached_size_ = 0;
  statinfo_ = NULL;
  masterstat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet_Notice::~Packet_Notice() {
  SharedDtor();
}

void Packet_Notice::SharedDtor() {
  if (this != default_instance_) {
    delete statinfo_;
    delete masterstat_;
  }
}

void Packet_Notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet_Notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_Notice_descriptor_;
}

const Packet_Notice& Packet_Notice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet_Notice* Packet_Notice::default_instance_ = NULL;

Packet_Notice* Packet_Notice::New() const {
  return new Packet_Notice;
}

void Packet_Notice::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_statinfo()) {
      if (statinfo_ != NULL) statinfo_->::TvWall::Packet_Notice_Stat::Clear();
    }
    if (has_masterstat()) {
      if (masterstat_ != NULL) masterstat_->::TvWall::Packet_Notice_NoticeMaster::Clear();
    }
  }
  screeninfo_.Clear();
  cameragrpinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet_Notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TvWall.Packet.ElementDat.Screen screenInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screenInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_screeninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_screenInfo;
        if (input->ExpectTag(18)) goto parse_statInfo;
        break;
      }

      // optional .TvWall.Packet.Notice.Stat statInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cameraGrpInfo;
        break;
      }

      // repeated .TvWall.Packet.ElementDat.CameraGrp cameraGrpInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraGrpInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameragrpinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cameraGrpInfo;
        if (input->ExpectTag(34)) goto parse_masterStat;
        break;
      }

      // optional .TvWall.Packet.Notice.NoticeMaster masterStat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masterStat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_masterstat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet_Notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TvWall.Packet.ElementDat.Screen screenInfo = 1;
  for (int i = 0; i < this->screeninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->screeninfo(i), output);
  }

  // optional .TvWall.Packet.Notice.Stat statInfo = 2;
  if (has_statinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statinfo(), output);
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp cameraGrpInfo = 3;
  for (int i = 0; i < this->cameragrpinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cameragrpinfo(i), output);
  }

  // optional .TvWall.Packet.Notice.NoticeMaster masterStat = 4;
  if (has_masterstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->masterstat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet_Notice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TvWall.Packet.ElementDat.Screen screenInfo = 1;
  for (int i = 0; i < this->screeninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->screeninfo(i), target);
  }

  // optional .TvWall.Packet.Notice.Stat statInfo = 2;
  if (has_statinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statinfo(), target);
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp cameraGrpInfo = 3;
  for (int i = 0; i < this->cameragrpinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cameragrpinfo(i), target);
  }

  // optional .TvWall.Packet.Notice.NoticeMaster masterStat = 4;
  if (has_masterstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->masterstat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet_Notice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .TvWall.Packet.Notice.Stat statInfo = 2;
    if (has_statinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statinfo());
    }

    // optional .TvWall.Packet.Notice.NoticeMaster masterStat = 4;
    if (has_masterstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->masterstat());
    }

  }
  // repeated .TvWall.Packet.ElementDat.Screen screenInfo = 1;
  total_size += 1 * this->screeninfo_size();
  for (int i = 0; i < this->screeninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->screeninfo(i));
  }

  // repeated .TvWall.Packet.ElementDat.CameraGrp cameraGrpInfo = 3;
  total_size += 1 * this->cameragrpinfo_size();
  for (int i = 0; i < this->cameragrpinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameragrpinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet_Notice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet_Notice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet_Notice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet_Notice::MergeFrom(const Packet_Notice& from) {
  GOOGLE_CHECK_NE(&from, this);
  screeninfo_.MergeFrom(from.screeninfo_);
  cameragrpinfo_.MergeFrom(from.cameragrpinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_statinfo()) {
      mutable_statinfo()->::TvWall::Packet_Notice_Stat::MergeFrom(from.statinfo());
    }
    if (from.has_masterstat()) {
      mutable_masterstat()->::TvWall::Packet_Notice_NoticeMaster::MergeFrom(from.masterstat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet_Notice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet_Notice::CopyFrom(const Packet_Notice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet_Notice::IsInitialized() const {

  for (int i = 0; i < screeninfo_size(); i++) {
    if (!this->screeninfo(i).IsInitialized()) return false;
  }
  if (has_statinfo()) {
    if (!this->statinfo().IsInitialized()) return false;
  }
  for (int i = 0; i < cameragrpinfo_size(); i++) {
    if (!this->cameragrpinfo(i).IsInitialized()) return false;
  }
  if (has_masterstat()) {
    if (!this->masterstat().IsInitialized()) return false;
  }
  return true;
}

void Packet_Notice::Swap(Packet_Notice* other) {
  if (other != this) {
    screeninfo_.Swap(&other->screeninfo_);
    std::swap(statinfo_, other->statinfo_);
    cameragrpinfo_.Swap(&other->cameragrpinfo_);
    std::swap(masterstat_, other->masterstat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet_Notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_Notice_descriptor_;
  metadata.reflection = Packet_Notice_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Packet::kSessionFieldNumber;
const int Packet::kCtrlFieldNumber;
const int Packet::kRequireSessionFieldNumber;
const int Packet::kNoticeFieldNumber;
#endif  // !_MSC_VER

Packet::Packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Packet::InitAsDefaultInstance() {
  session_ = const_cast< ::TvWall::Packet_Session*>(&::TvWall::Packet_Session::default_instance());
  ctrl_ = const_cast< ::TvWall::Packet_Ctrl*>(&::TvWall::Packet_Ctrl::default_instance());
  requiresession_ = const_cast< ::TvWall::Packet_RequireSession*>(&::TvWall::Packet_RequireSession::default_instance());
  notice_ = const_cast< ::TvWall::Packet_Notice*>(&::TvWall::Packet_Notice::default_instance());
}

Packet::Packet(const Packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Packet::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  ctrl_ = NULL;
  requiresession_ = NULL;
  notice_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Packet::~Packet() {
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != default_instance_) {
    delete session_;
    delete ctrl_;
    delete requiresession_;
    delete notice_;
  }
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Packet_descriptor_;
}

const Packet& Packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_2ftvWall_2eproto();
  return *default_instance_;
}

Packet* Packet::default_instance_ = NULL;

Packet* Packet::New() const {
  return new Packet;
}

void Packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::TvWall::Packet_Session::Clear();
    }
    if (has_ctrl()) {
      if (ctrl_ != NULL) ctrl_->::TvWall::Packet_Ctrl::Clear();
    }
    if (has_requiresession()) {
      if (requiresession_ != NULL) requiresession_->::TvWall::Packet_RequireSession::Clear();
    }
    if (has_notice()) {
      if (notice_ != NULL) notice_->::TvWall::Packet_Notice::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TvWall.Packet.Session session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ctrl;
        break;
      }

      // optional .TvWall.Packet.Ctrl ctrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ctrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_requireSession;
        break;
      }

      // optional .TvWall.Packet.RequireSession requireSession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requireSession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requiresession()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notice;
        break;
      }

      // optional .TvWall.Packet.Notice notice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TvWall.Packet.Session session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session(), output);
  }

  // optional .TvWall.Packet.Ctrl ctrl = 3;
  if (has_ctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ctrl(), output);
  }

  // optional .TvWall.Packet.RequireSession requireSession = 4;
  if (has_requiresession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->requiresession(), output);
  }

  // optional .TvWall.Packet.Notice notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TvWall.Packet.Session session = 2;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session(), target);
  }

  // optional .TvWall.Packet.Ctrl ctrl = 3;
  if (has_ctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ctrl(), target);
  }

  // optional .TvWall.Packet.RequireSession requireSession = 4;
  if (has_requiresession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->requiresession(), target);
  }

  // optional .TvWall.Packet.Notice notice = 5;
  if (has_notice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TvWall.Packet.Session session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }

    // optional .TvWall.Packet.Ctrl ctrl = 3;
    if (has_ctrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ctrl());
    }

    // optional .TvWall.Packet.RequireSession requireSession = 4;
    if (has_requiresession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requiresession());
    }

    // optional .TvWall.Packet.Notice notice = 5;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::TvWall::Packet_Session::MergeFrom(from.session());
    }
    if (from.has_ctrl()) {
      mutable_ctrl()->::TvWall::Packet_Ctrl::MergeFrom(from.ctrl());
    }
    if (from.has_requiresession()) {
      mutable_requiresession()->::TvWall::Packet_RequireSession::MergeFrom(from.requiresession());
    }
    if (from.has_notice()) {
      mutable_notice()->::TvWall::Packet_Notice::MergeFrom(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {

  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  if (has_ctrl()) {
    if (!this->ctrl().IsInitialized()) return false;
  }
  if (has_requiresession()) {
    if (!this->requiresession().IsInitialized()) return false;
  }
  if (has_notice()) {
    if (!this->notice().IsInitialized()) return false;
  }
  return true;
}

void Packet::Swap(Packet* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(ctrl_, other->ctrl_);
    std::swap(requiresession_, other->requiresession_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Packet_descriptor_;
  metadata.reflection = Packet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TvWall

// @@protoc_insertion_point(global_scope)
